/**
* Tencent is pleased to support the open source community by making TDW available.
* Copyright (C) 2014 THL A29 Limited, a Tencent company. All rights reserved.
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use 
* this file except in compliance with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed 
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
* OF ANY KIND, either express or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/
/*
 * =====================================================================================
 *
 *       Filename:  tdw_file.cc
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  12/20/2010 04:16:52 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Xinjie Li (Engineer), xinjieli@tencent.com
 *        Company:  Tencent
 *
 * =====================================================================================
 */

#include <google/protobuf/compiler/tdw/tdw_file.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/compiler/tdw/tdw_dependent_file.h>
#include <google/protobuf/compiler/tdw/tdw_message.h>
#include <google/protobuf/compiler/tdw/tdw_helpers.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace tdw {

//modified by cherry start
//FileGenerator::FileGenerator(const FileDescriptor* file,
//                            const string& database_name,
//                            const string& table_name) 
//  : file_(file),
//    database_name_(database_name),
//    table_name_(table_name), 
//    message_generators_(
//        new scoped_ptr<MessageGenerator>[file->message_type_count()])
FileGenerator::FileGenerator(const FileDescriptor* file,
                            const string& database_name,
                            const string& table_name,
                            const string& modified_time) 
  : file_(file),
    database_name_(database_name),
    table_name_(table_name),
    modified_time_(modified_time), 
    message_generators_(
        new scoped_ptr<MessageGenerator>[file->message_type_count()])
//modified by cherry end
{
  InitDependentGenerators();
  for (int i=0; i<file->message_type_count(); i++) {
    message_generators_[i].reset(
        new MessageGenerator(file->message_type(i), table_name_));
  }
  InitVariables();
}

FileGenerator::~FileGenerator() {}

void FileGenerator::InitVariables() {
//modified by cherry start 
//  string java_outer_classname = database_name_ + "_" + table_name_;
//modified by cherry end
  string java_outer_classname = database_name_ + "_" + table_name_ + "_" + modified_time_;
  variables_["filename"] = file_->name();
  variables_["package"] = "tdw";
  variables_["java_package"] = "tdw";
  variables_["java_outer_classname"] = java_outer_classname;
}

void FileGenerator::InitDependentGenerators() {
  MakeDependentGenerator(file_);
}

void FileGenerator::MakeDependentGenerator(const FileDescriptor* file) {
  for (int i = 0; i< file->dependency_count(); i++) {
    const FileDescriptor* dependency = file->dependency(i);
    string name = StripProto(dependency->name());
    if (dependent_generators_.find(name) == dependent_generators_.end()) {
      dependent_generators_[name] = tr1::shared_ptr<DependentFileGenerator>(new DependentFileGenerator(dependency, file));
      MakeDependentGenerator(dependency);
    }
  }
}

bool FileGenerator::Validate(string* error) {
  bool found_table_message = false;
  for (int i=0; i<file_->message_type_count(); i++) {
    string message_name = ToLower(file_->message_type(i)->name());
    if (message_name == table_name_) {
      found_table_message = true;
      break;
    }
  }
  
  if (!found_table_message) {
    error->assign(file_->name());
    error->append(
        ": Cannot generate tdw proto file because there is no message \"");
    error->append(table_name_);
    error->append(
        "\" which is required by the table name");
    return false;
  }
  return true;
}

void FileGenerator::Generate(io::Printer* printer)
{
  printer->Print(variables_,
      "// Generated by the protocol buffer compiler - tdw plugin. DO NOT EDIT!\n"
      "// source: $filename$\n"
      "\n"
      "package $package$;\n"
      "\n"
      "option java_package = \"$java_package$\";\n"
      "option java_outer_classname = \"$java_outer_classname$\";\n"
      "\n");

  for (int i=0; i<file_->message_type_count(); i++) {
    if (i>1) {
      printer->Print("\n");
    }
    message_generators_[i]->Generate(printer);
  }

  map<string, tr1::shared_ptr<DependentFileGenerator> >::iterator it = dependent_generators_.begin();
  for (; it != dependent_generators_.end(); it++) {
    it->second->Generate(printer);
  }
}


} // namespace tdw
} // namespace compiler
} // namespace protobuf
} // namespace google

