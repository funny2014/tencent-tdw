/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hive.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class ThriftHive {

  public interface Iface extends
      org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface {

    public String execute(String query) throws HiveServerException,
        org.apache.thrift.TException;

    public String jdbc_execute(String query, String queryID)
        throws HiveServerException, org.apache.thrift.TException;

    public String fetchOne() throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> fetchN(int numRows) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> fetchAll() throws HiveServerException,
        org.apache.thrift.TException;

    public org.apache.hadoop.hive.metastore.api.Schema getSchema()
        throws HiveServerException, org.apache.thrift.TException;

    public org.apache.hadoop.hive.metastore.api.Schema getThriftSchema()
        throws HiveServerException, org.apache.thrift.TException;

    public HiveClusterStatus getClusterStatus() throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> createSession(String name) throws HiveServerException,
        org.apache.thrift.TException;

    public String requireSession(String sid, String svid)
        throws HiveServerException, org.apache.thrift.TException;

    public int detachSession(String sid, String svid)
        throws HiveServerException, org.apache.thrift.TException;

    public int dropSession(String sid, String svid) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> showSessions() throws HiveServerException,
        org.apache.thrift.TException;

    public int uploadJob(String job) throws HiveServerException,
        org.apache.thrift.TException;

    public int killJob() throws HiveServerException,
        org.apache.thrift.TException;

    public int configJob(String config) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> getJobStatus(int jobid) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> getEnv() throws HiveServerException,
        org.apache.thrift.TException;

    public int audit(String user, String passwd, String dbname)
        throws HiveServerException, org.apache.thrift.TException;

    public void setHistory(String sid, int jobid) throws HiveServerException,
        org.apache.thrift.TException;

    public String getHistory(int jobid) throws HiveServerException,
        org.apache.thrift.TException;

    public String compile(String query) throws HiveServerException,
        org.apache.thrift.TException;

    public String upload(String rtype, String user, String fileName, String data)
        throws HiveServerException, org.apache.thrift.TException;

    public String makejar(String dbname, String tblname, String filename,
        String username) throws HiveServerException,
        org.apache.thrift.TException;

    public void clean() throws org.apache.thrift.TException;

    public String preproto(String dbname, String tblname, String filename,
        String username) throws HiveServerException,
        org.apache.thrift.TException;

    public String genjar(String dbname, String tblname, String filename)
        throws HiveServerException, org.apache.thrift.TException;

    public String uploadModule(String user, String moduleName,
        ByteBuffer module1) throws HiveServerException,
        org.apache.thrift.TException;

    public ByteBuffer downloadModule(String user, String moduleName)
        throws HiveServerException, org.apache.thrift.TException;

    public List<String> listModule(String user) throws HiveServerException,
        org.apache.thrift.TException;

    public String getRowCount() throws HiveServerException,
        org.apache.thrift.TException;

    public int getSQLProcess(String sqlID) throws HiveServerException,
        org.apache.thrift.TException;

    public int killSQLQuery(String sqlID) throws HiveServerException,
        org.apache.thrift.TException;

    public int dataSync(String createSQL, String tableName, String data,
        String partName, String subPartName, int mode)
        throws HiveServerException, org.apache.thrift.TException;

    public String getLoader(String destDB, String destTable, int mode)
        throws HiveServerException, org.apache.thrift.TException;

    public int releaseLoader(String loaderID) throws HiveServerException,
        org.apache.thrift.TException;

    public int uploadData(String loaderID, String data)
        throws HiveServerException, org.apache.thrift.TException;

    public int completeUploadData(String loaderID) throws HiveServerException,
        org.apache.thrift.TException;

    public int querySQLState(String sqlID) throws HiveServerException,
        org.apache.thrift.TException;

    public String getJobID(String sqlID) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> getJobCounts(String sqlID) throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> getHiveLoad() throws HiveServerException,
        org.apache.thrift.TException;

    public List<String> getSchemaForExplain(String sql)
        throws HiveServerException, org.apache.thrift.TException;

    public int replaceJar(String dbname, String tablename, String user)
        throws HiveServerException, org.apache.thrift.TException;

    public String uploadProto(String user, String fileName, ByteBuffer data)
        throws HiveServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends
      org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.AsyncIface {

    public void execute(
        String query,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.execute_call> resultHandler)
        throws org.apache.thrift.TException;

    public void jdbc_execute(
        String query,
        String queryID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.jdbc_execute_call> resultHandler)
        throws org.apache.thrift.TException;

    public void fetchOne(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchOne_call> resultHandler)
        throws org.apache.thrift.TException;

    public void fetchN(
        int numRows,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchN_call> resultHandler)
        throws org.apache.thrift.TException;

    public void fetchAll(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchAll_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getSchema(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSchema_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getThriftSchema(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getThriftSchema_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getClusterStatus(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getClusterStatus_call> resultHandler)
        throws org.apache.thrift.TException;

    public void createSession(
        String name,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createSession_call> resultHandler)
        throws org.apache.thrift.TException;

    public void requireSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requireSession_call> resultHandler)
        throws org.apache.thrift.TException;

    public void detachSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.detachSession_call> resultHandler)
        throws org.apache.thrift.TException;

    public void dropSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.dropSession_call> resultHandler)
        throws org.apache.thrift.TException;

    public void showSessions(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.showSessions_call> resultHandler)
        throws org.apache.thrift.TException;

    public void uploadJob(
        String job,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadJob_call> resultHandler)
        throws org.apache.thrift.TException;

    public void killJob(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.killJob_call> resultHandler)
        throws org.apache.thrift.TException;

    public void configJob(
        String config,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.configJob_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getJobStatus(
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobStatus_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getEnv(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEnv_call> resultHandler)
        throws org.apache.thrift.TException;

    public void audit(
        String user,
        String passwd,
        String dbname,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.audit_call> resultHandler)
        throws org.apache.thrift.TException;

    public void setHistory(
        String sid,
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setHistory_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getHistory(
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHistory_call> resultHandler)
        throws org.apache.thrift.TException;

    public void compile(
        String query,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.compile_call> resultHandler)
        throws org.apache.thrift.TException;

    public void upload(
        String rtype,
        String user,
        String fileName,
        String data,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.upload_call> resultHandler)
        throws org.apache.thrift.TException;

    public void makejar(
        String dbname,
        String tblname,
        String filename,
        String username,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.makejar_call> resultHandler)
        throws org.apache.thrift.TException;

    public void clean(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clean_call> resultHandler)
        throws org.apache.thrift.TException;

    public void preproto(
        String dbname,
        String tblname,
        String filename,
        String username,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.preproto_call> resultHandler)
        throws org.apache.thrift.TException;

    public void genjar(
        String dbname,
        String tblname,
        String filename,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.genjar_call> resultHandler)
        throws org.apache.thrift.TException;

    public void uploadModule(
        String user,
        String moduleName,
        ByteBuffer module1,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadModule_call> resultHandler)
        throws org.apache.thrift.TException;

    public void downloadModule(
        String user,
        String moduleName,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.downloadModule_call> resultHandler)
        throws org.apache.thrift.TException;

    public void listModule(
        String user,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listModule_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getRowCount(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRowCount_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getSQLProcess(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSQLProcess_call> resultHandler)
        throws org.apache.thrift.TException;

    public void killSQLQuery(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.killSQLQuery_call> resultHandler)
        throws org.apache.thrift.TException;

    public void dataSync(
        String createSQL,
        String tableName,
        String data,
        String partName,
        String subPartName,
        int mode,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.dataSync_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getLoader(
        String destDB,
        String destTable,
        int mode,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLoader_call> resultHandler)
        throws org.apache.thrift.TException;

    public void releaseLoader(
        String loaderID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.releaseLoader_call> resultHandler)
        throws org.apache.thrift.TException;

    public void uploadData(
        String loaderID,
        String data,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadData_call> resultHandler)
        throws org.apache.thrift.TException;

    public void completeUploadData(
        String loaderID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.completeUploadData_call> resultHandler)
        throws org.apache.thrift.TException;

    public void querySQLState(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.querySQLState_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getJobID(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobID_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getJobCounts(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobCounts_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getHiveLoad(
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHiveLoad_call> resultHandler)
        throws org.apache.thrift.TException;

    public void getSchemaForExplain(
        String sql,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSchemaForExplain_call> resultHandler)
        throws org.apache.thrift.TException;

    public void replaceJar(
        String dbname,
        String tablename,
        String user,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.replaceJar_call> resultHandler)
        throws org.apache.thrift.TException;

    public void uploadProto(
        String user,
        String fileName,
        ByteBuffer data,
        org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadProto_call> resultHandler)
        throws org.apache.thrift.TException;

  }

  public static class Client extends
      org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Client implements
      Iface {
    public static class Factory implements
        org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
          org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot,
        org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String execute(String query) throws HiveServerException,
        org.apache.thrift.TException {
      send_execute(query);
      return recv_execute();
    }

    public void send_execute(String query) throws org.apache.thrift.TException {
      execute_args args = new execute_args();
      args.setQuery(query);
      sendBase("execute", args);
    }

    public String recv_execute() throws HiveServerException,
        org.apache.thrift.TException {
      execute_result result = new execute_result();
      receiveBase(result, "execute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "execute failed: unknown result");
    }

    public String jdbc_execute(String query, String queryID)
        throws HiveServerException, org.apache.thrift.TException {
      send_jdbc_execute(query, queryID);
      return recv_jdbc_execute();
    }

    public void send_jdbc_execute(String query, String queryID)
        throws org.apache.thrift.TException {
      jdbc_execute_args args = new jdbc_execute_args();
      args.setQuery(query);
      args.setQueryID(queryID);
      sendBase("jdbc_execute", args);
    }

    public String recv_jdbc_execute() throws HiveServerException,
        org.apache.thrift.TException {
      jdbc_execute_result result = new jdbc_execute_result();
      receiveBase(result, "jdbc_execute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "jdbc_execute failed: unknown result");
    }

    public String fetchOne() throws HiveServerException,
        org.apache.thrift.TException {
      send_fetchOne();
      return recv_fetchOne();
    }

    public void send_fetchOne() throws org.apache.thrift.TException {
      fetchOne_args args = new fetchOne_args();
      sendBase("fetchOne", args);
    }

    public String recv_fetchOne() throws HiveServerException,
        org.apache.thrift.TException {
      fetchOne_result result = new fetchOne_result();
      receiveBase(result, "fetchOne");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "fetchOne failed: unknown result");
    }

    public List<String> fetchN(int numRows) throws HiveServerException,
        org.apache.thrift.TException {
      send_fetchN(numRows);
      return recv_fetchN();
    }

    public void send_fetchN(int numRows) throws org.apache.thrift.TException {
      fetchN_args args = new fetchN_args();
      args.setNumRows(numRows);
      sendBase("fetchN", args);
    }

    public List<String> recv_fetchN() throws HiveServerException,
        org.apache.thrift.TException {
      fetchN_result result = new fetchN_result();
      receiveBase(result, "fetchN");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "fetchN failed: unknown result");
    }

    public List<String> fetchAll() throws HiveServerException,
        org.apache.thrift.TException {
      send_fetchAll();
      return recv_fetchAll();
    }

    public void send_fetchAll() throws org.apache.thrift.TException {
      fetchAll_args args = new fetchAll_args();
      sendBase("fetchAll", args);
    }

    public List<String> recv_fetchAll() throws HiveServerException,
        org.apache.thrift.TException {
      fetchAll_result result = new fetchAll_result();
      receiveBase(result, "fetchAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "fetchAll failed: unknown result");
    }

    public org.apache.hadoop.hive.metastore.api.Schema getSchema()
        throws HiveServerException, org.apache.thrift.TException {
      send_getSchema();
      return recv_getSchema();
    }

    public void send_getSchema() throws org.apache.thrift.TException {
      getSchema_args args = new getSchema_args();
      sendBase("getSchema", args);
    }

    public org.apache.hadoop.hive.metastore.api.Schema recv_getSchema()
        throws HiveServerException, org.apache.thrift.TException {
      getSchema_result result = new getSchema_result();
      receiveBase(result, "getSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getSchema failed: unknown result");
    }

    public org.apache.hadoop.hive.metastore.api.Schema getThriftSchema()
        throws HiveServerException, org.apache.thrift.TException {
      send_getThriftSchema();
      return recv_getThriftSchema();
    }

    public void send_getThriftSchema() throws org.apache.thrift.TException {
      getThriftSchema_args args = new getThriftSchema_args();
      sendBase("getThriftSchema", args);
    }

    public org.apache.hadoop.hive.metastore.api.Schema recv_getThriftSchema()
        throws HiveServerException, org.apache.thrift.TException {
      getThriftSchema_result result = new getThriftSchema_result();
      receiveBase(result, "getThriftSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getThriftSchema failed: unknown result");
    }

    public HiveClusterStatus getClusterStatus() throws HiveServerException,
        org.apache.thrift.TException {
      send_getClusterStatus();
      return recv_getClusterStatus();
    }

    public void send_getClusterStatus() throws org.apache.thrift.TException {
      getClusterStatus_args args = new getClusterStatus_args();
      sendBase("getClusterStatus", args);
    }

    public HiveClusterStatus recv_getClusterStatus()
        throws HiveServerException, org.apache.thrift.TException {
      getClusterStatus_result result = new getClusterStatus_result();
      receiveBase(result, "getClusterStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getClusterStatus failed: unknown result");
    }

    public List<String> createSession(String name) throws HiveServerException,
        org.apache.thrift.TException {
      send_createSession(name);
      return recv_createSession();
    }

    public void send_createSession(String name)
        throws org.apache.thrift.TException {
      createSession_args args = new createSession_args();
      args.setName(name);
      sendBase("createSession", args);
    }

    public List<String> recv_createSession() throws HiveServerException,
        org.apache.thrift.TException {
      createSession_result result = new createSession_result();
      receiveBase(result, "createSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "createSession failed: unknown result");
    }

    public String requireSession(String sid, String svid)
        throws HiveServerException, org.apache.thrift.TException {
      send_requireSession(sid, svid);
      return recv_requireSession();
    }

    public void send_requireSession(String sid, String svid)
        throws org.apache.thrift.TException {
      requireSession_args args = new requireSession_args();
      args.setSid(sid);
      args.setSvid(svid);
      sendBase("requireSession", args);
    }

    public String recv_requireSession() throws HiveServerException,
        org.apache.thrift.TException {
      requireSession_result result = new requireSession_result();
      receiveBase(result, "requireSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "requireSession failed: unknown result");
    }

    public int detachSession(String sid, String svid)
        throws HiveServerException, org.apache.thrift.TException {
      send_detachSession(sid, svid);
      return recv_detachSession();
    }

    public void send_detachSession(String sid, String svid)
        throws org.apache.thrift.TException {
      detachSession_args args = new detachSession_args();
      args.setSid(sid);
      args.setSvid(svid);
      sendBase("detachSession", args);
    }

    public int recv_detachSession() throws HiveServerException,
        org.apache.thrift.TException {
      detachSession_result result = new detachSession_result();
      receiveBase(result, "detachSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "detachSession failed: unknown result");
    }

    public int dropSession(String sid, String svid) throws HiveServerException,
        org.apache.thrift.TException {
      send_dropSession(sid, svid);
      return recv_dropSession();
    }

    public void send_dropSession(String sid, String svid)
        throws org.apache.thrift.TException {
      dropSession_args args = new dropSession_args();
      args.setSid(sid);
      args.setSvid(svid);
      sendBase("dropSession", args);
    }

    public int recv_dropSession() throws HiveServerException,
        org.apache.thrift.TException {
      dropSession_result result = new dropSession_result();
      receiveBase(result, "dropSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "dropSession failed: unknown result");
    }

    public List<String> showSessions() throws HiveServerException,
        org.apache.thrift.TException {
      send_showSessions();
      return recv_showSessions();
    }

    public void send_showSessions() throws org.apache.thrift.TException {
      showSessions_args args = new showSessions_args();
      sendBase("showSessions", args);
    }

    public List<String> recv_showSessions() throws HiveServerException,
        org.apache.thrift.TException {
      showSessions_result result = new showSessions_result();
      receiveBase(result, "showSessions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "showSessions failed: unknown result");
    }

    public int uploadJob(String job) throws HiveServerException,
        org.apache.thrift.TException {
      send_uploadJob(job);
      return recv_uploadJob();
    }

    public void send_uploadJob(String job) throws org.apache.thrift.TException {
      uploadJob_args args = new uploadJob_args();
      args.setJob(job);
      sendBase("uploadJob", args);
    }

    public int recv_uploadJob() throws HiveServerException,
        org.apache.thrift.TException {
      uploadJob_result result = new uploadJob_result();
      receiveBase(result, "uploadJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "uploadJob failed: unknown result");
    }

    public int killJob() throws HiveServerException,
        org.apache.thrift.TException {
      send_killJob();
      return recv_killJob();
    }

    public void send_killJob() throws org.apache.thrift.TException {
      killJob_args args = new killJob_args();
      sendBase("killJob", args);
    }

    public int recv_killJob() throws HiveServerException,
        org.apache.thrift.TException {
      killJob_result result = new killJob_result();
      receiveBase(result, "killJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "killJob failed: unknown result");
    }

    public int configJob(String config) throws HiveServerException,
        org.apache.thrift.TException {
      send_configJob(config);
      return recv_configJob();
    }

    public void send_configJob(String config)
        throws org.apache.thrift.TException {
      configJob_args args = new configJob_args();
      args.setConfig(config);
      sendBase("configJob", args);
    }

    public int recv_configJob() throws HiveServerException,
        org.apache.thrift.TException {
      configJob_result result = new configJob_result();
      receiveBase(result, "configJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "configJob failed: unknown result");
    }

    public List<String> getJobStatus(int jobid) throws HiveServerException,
        org.apache.thrift.TException {
      send_getJobStatus(jobid);
      return recv_getJobStatus();
    }

    public void send_getJobStatus(int jobid)
        throws org.apache.thrift.TException {
      getJobStatus_args args = new getJobStatus_args();
      args.setJobid(jobid);
      sendBase("getJobStatus", args);
    }

    public List<String> recv_getJobStatus() throws HiveServerException,
        org.apache.thrift.TException {
      getJobStatus_result result = new getJobStatus_result();
      receiveBase(result, "getJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getJobStatus failed: unknown result");
    }

    public List<String> getEnv() throws HiveServerException,
        org.apache.thrift.TException {
      send_getEnv();
      return recv_getEnv();
    }

    public void send_getEnv() throws org.apache.thrift.TException {
      getEnv_args args = new getEnv_args();
      sendBase("getEnv", args);
    }

    public List<String> recv_getEnv() throws HiveServerException,
        org.apache.thrift.TException {
      getEnv_result result = new getEnv_result();
      receiveBase(result, "getEnv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getEnv failed: unknown result");
    }

    public int audit(String user, String passwd, String dbname)
        throws HiveServerException, org.apache.thrift.TException {
      send_audit(user, passwd, dbname);
      return recv_audit();
    }

    public void send_audit(String user, String passwd, String dbname)
        throws org.apache.thrift.TException {
      audit_args args = new audit_args();
      args.setUser(user);
      args.setPasswd(passwd);
      args.setDbname(dbname);
      sendBase("audit", args);
    }

    public int recv_audit() throws HiveServerException,
        org.apache.thrift.TException {
      audit_result result = new audit_result();
      receiveBase(result, "audit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "audit failed: unknown result");
    }

    public void setHistory(String sid, int jobid) throws HiveServerException,
        org.apache.thrift.TException {
      send_setHistory(sid, jobid);
      recv_setHistory();
    }

    public void send_setHistory(String sid, int jobid)
        throws org.apache.thrift.TException {
      setHistory_args args = new setHistory_args();
      args.setSid(sid);
      args.setJobid(jobid);
      sendBase("setHistory", args);
    }

    public void recv_setHistory() throws HiveServerException,
        org.apache.thrift.TException {
      setHistory_result result = new setHistory_result();
      receiveBase(result, "setHistory");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public String getHistory(int jobid) throws HiveServerException,
        org.apache.thrift.TException {
      send_getHistory(jobid);
      return recv_getHistory();
    }

    public void send_getHistory(int jobid) throws org.apache.thrift.TException {
      getHistory_args args = new getHistory_args();
      args.setJobid(jobid);
      sendBase("getHistory", args);
    }

    public String recv_getHistory() throws HiveServerException,
        org.apache.thrift.TException {
      getHistory_result result = new getHistory_result();
      receiveBase(result, "getHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getHistory failed: unknown result");
    }

    public String compile(String query) throws HiveServerException,
        org.apache.thrift.TException {
      send_compile(query);
      return recv_compile();
    }

    public void send_compile(String query) throws org.apache.thrift.TException {
      compile_args args = new compile_args();
      args.setQuery(query);
      sendBase("compile", args);
    }

    public String recv_compile() throws HiveServerException,
        org.apache.thrift.TException {
      compile_result result = new compile_result();
      receiveBase(result, "compile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "compile failed: unknown result");
    }

    public String upload(String rtype, String user, String fileName, String data)
        throws HiveServerException, org.apache.thrift.TException {
      send_upload(rtype, user, fileName, data);
      return recv_upload();
    }

    public void send_upload(String rtype, String user, String fileName,
        String data) throws org.apache.thrift.TException {
      upload_args args = new upload_args();
      args.setRtype(rtype);
      args.setUser(user);
      args.setFileName(fileName);
      args.setData(data);
      sendBase("upload", args);
    }

    public String recv_upload() throws HiveServerException,
        org.apache.thrift.TException {
      upload_result result = new upload_result();
      receiveBase(result, "upload");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "upload failed: unknown result");
    }

    public String makejar(String dbname, String tblname, String filename,
        String username) throws HiveServerException,
        org.apache.thrift.TException {
      send_makejar(dbname, tblname, filename, username);
      return recv_makejar();
    }

    public void send_makejar(String dbname, String tblname, String filename,
        String username) throws org.apache.thrift.TException {
      makejar_args args = new makejar_args();
      args.setDbname(dbname);
      args.setTblname(tblname);
      args.setFilename(filename);
      args.setUsername(username);
      sendBase("makejar", args);
    }

    public String recv_makejar() throws HiveServerException,
        org.apache.thrift.TException {
      makejar_result result = new makejar_result();
      receiveBase(result, "makejar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "makejar failed: unknown result");
    }

    public void clean() throws org.apache.thrift.TException {
      send_clean();
      recv_clean();
    }

    public void send_clean() throws org.apache.thrift.TException {
      clean_args args = new clean_args();
      sendBase("clean", args);
    }

    public void recv_clean() throws org.apache.thrift.TException {
      clean_result result = new clean_result();
      receiveBase(result, "clean");
      return;
    }

    public String preproto(String dbname, String tblname, String filename,
        String username) throws HiveServerException,
        org.apache.thrift.TException {
      send_preproto(dbname, tblname, filename, username);
      return recv_preproto();
    }

    public void send_preproto(String dbname, String tblname, String filename,
        String username) throws org.apache.thrift.TException {
      preproto_args args = new preproto_args();
      args.setDbname(dbname);
      args.setTblname(tblname);
      args.setFilename(filename);
      args.setUsername(username);
      sendBase("preproto", args);
    }

    public String recv_preproto() throws HiveServerException,
        org.apache.thrift.TException {
      preproto_result result = new preproto_result();
      receiveBase(result, "preproto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "preproto failed: unknown result");
    }

    public String genjar(String dbname, String tblname, String filename)
        throws HiveServerException, org.apache.thrift.TException {
      send_genjar(dbname, tblname, filename);
      return recv_genjar();
    }

    public void send_genjar(String dbname, String tblname, String filename)
        throws org.apache.thrift.TException {
      genjar_args args = new genjar_args();
      args.setDbname(dbname);
      args.setTblname(tblname);
      args.setFilename(filename);
      sendBase("genjar", args);
    }

    public String recv_genjar() throws HiveServerException,
        org.apache.thrift.TException {
      genjar_result result = new genjar_result();
      receiveBase(result, "genjar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "genjar failed: unknown result");
    }

    public String uploadModule(String user, String moduleName,
        ByteBuffer module1) throws HiveServerException,
        org.apache.thrift.TException {
      send_uploadModule(user, moduleName, module1);
      return recv_uploadModule();
    }

    public void send_uploadModule(String user, String moduleName,
        ByteBuffer module1) throws org.apache.thrift.TException {
      uploadModule_args args = new uploadModule_args();
      args.setUser(user);
      args.setModuleName(moduleName);
      args.setModule1(module1);
      sendBase("uploadModule", args);
    }

    public String recv_uploadModule() throws HiveServerException,
        org.apache.thrift.TException {
      uploadModule_result result = new uploadModule_result();
      receiveBase(result, "uploadModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "uploadModule failed: unknown result");
    }

    public ByteBuffer downloadModule(String user, String moduleName)
        throws HiveServerException, org.apache.thrift.TException {
      send_downloadModule(user, moduleName);
      return recv_downloadModule();
    }

    public void send_downloadModule(String user, String moduleName)
        throws org.apache.thrift.TException {
      downloadModule_args args = new downloadModule_args();
      args.setUser(user);
      args.setModuleName(moduleName);
      sendBase("downloadModule", args);
    }

    public ByteBuffer recv_downloadModule() throws HiveServerException,
        org.apache.thrift.TException {
      downloadModule_result result = new downloadModule_result();
      receiveBase(result, "downloadModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "downloadModule failed: unknown result");
    }

    public List<String> listModule(String user) throws HiveServerException,
        org.apache.thrift.TException {
      send_listModule(user);
      return recv_listModule();
    }

    public void send_listModule(String user)
        throws org.apache.thrift.TException {
      listModule_args args = new listModule_args();
      args.setUser(user);
      sendBase("listModule", args);
    }

    public List<String> recv_listModule() throws HiveServerException,
        org.apache.thrift.TException {
      listModule_result result = new listModule_result();
      receiveBase(result, "listModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "listModule failed: unknown result");
    }

    public String getRowCount() throws HiveServerException,
        org.apache.thrift.TException {
      send_getRowCount();
      return recv_getRowCount();
    }

    public void send_getRowCount() throws org.apache.thrift.TException {
      getRowCount_args args = new getRowCount_args();
      sendBase("getRowCount", args);
    }

    public String recv_getRowCount() throws HiveServerException,
        org.apache.thrift.TException {
      getRowCount_result result = new getRowCount_result();
      receiveBase(result, "getRowCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getRowCount failed: unknown result");
    }

    public int getSQLProcess(String sqlID) throws HiveServerException,
        org.apache.thrift.TException {
      send_getSQLProcess(sqlID);
      return recv_getSQLProcess();
    }

    public void send_getSQLProcess(String sqlID)
        throws org.apache.thrift.TException {
      getSQLProcess_args args = new getSQLProcess_args();
      args.setSqlID(sqlID);
      sendBase("getSQLProcess", args);
    }

    public int recv_getSQLProcess() throws HiveServerException,
        org.apache.thrift.TException {
      getSQLProcess_result result = new getSQLProcess_result();
      receiveBase(result, "getSQLProcess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getSQLProcess failed: unknown result");
    }

    public int killSQLQuery(String sqlID) throws HiveServerException,
        org.apache.thrift.TException {
      send_killSQLQuery(sqlID);
      return recv_killSQLQuery();
    }

    public void send_killSQLQuery(String sqlID)
        throws org.apache.thrift.TException {
      killSQLQuery_args args = new killSQLQuery_args();
      args.setSqlID(sqlID);
      sendBase("killSQLQuery", args);
    }

    public int recv_killSQLQuery() throws HiveServerException,
        org.apache.thrift.TException {
      killSQLQuery_result result = new killSQLQuery_result();
      receiveBase(result, "killSQLQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "killSQLQuery failed: unknown result");
    }

    public int dataSync(String createSQL, String tableName, String data,
        String partName, String subPartName, int mode)
        throws HiveServerException, org.apache.thrift.TException {
      send_dataSync(createSQL, tableName, data, partName, subPartName, mode);
      return recv_dataSync();
    }

    public void send_dataSync(String createSQL, String tableName, String data,
        String partName, String subPartName, int mode)
        throws org.apache.thrift.TException {
      dataSync_args args = new dataSync_args();
      args.setCreateSQL(createSQL);
      args.setTableName(tableName);
      args.setData(data);
      args.setPartName(partName);
      args.setSubPartName(subPartName);
      args.setMode(mode);
      sendBase("dataSync", args);
    }

    public int recv_dataSync() throws HiveServerException,
        org.apache.thrift.TException {
      dataSync_result result = new dataSync_result();
      receiveBase(result, "dataSync");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "dataSync failed: unknown result");
    }

    public String getLoader(String destDB, String destTable, int mode)
        throws HiveServerException, org.apache.thrift.TException {
      send_getLoader(destDB, destTable, mode);
      return recv_getLoader();
    }

    public void send_getLoader(String destDB, String destTable, int mode)
        throws org.apache.thrift.TException {
      getLoader_args args = new getLoader_args();
      args.setDestDB(destDB);
      args.setDestTable(destTable);
      args.setMode(mode);
      sendBase("getLoader", args);
    }

    public String recv_getLoader() throws HiveServerException,
        org.apache.thrift.TException {
      getLoader_result result = new getLoader_result();
      receiveBase(result, "getLoader");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getLoader failed: unknown result");
    }

    public int releaseLoader(String loaderID) throws HiveServerException,
        org.apache.thrift.TException {
      send_releaseLoader(loaderID);
      return recv_releaseLoader();
    }

    public void send_releaseLoader(String loaderID)
        throws org.apache.thrift.TException {
      releaseLoader_args args = new releaseLoader_args();
      args.setLoaderID(loaderID);
      sendBase("releaseLoader", args);
    }

    public int recv_releaseLoader() throws HiveServerException,
        org.apache.thrift.TException {
      releaseLoader_result result = new releaseLoader_result();
      receiveBase(result, "releaseLoader");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "releaseLoader failed: unknown result");
    }

    public int uploadData(String loaderID, String data)
        throws HiveServerException, org.apache.thrift.TException {
      send_uploadData(loaderID, data);
      return recv_uploadData();
    }

    public void send_uploadData(String loaderID, String data)
        throws org.apache.thrift.TException {
      uploadData_args args = new uploadData_args();
      args.setLoaderID(loaderID);
      args.setData(data);
      sendBase("uploadData", args);
    }

    public int recv_uploadData() throws HiveServerException,
        org.apache.thrift.TException {
      uploadData_result result = new uploadData_result();
      receiveBase(result, "uploadData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "uploadData failed: unknown result");
    }

    public int completeUploadData(String loaderID) throws HiveServerException,
        org.apache.thrift.TException {
      send_completeUploadData(loaderID);
      return recv_completeUploadData();
    }

    public void send_completeUploadData(String loaderID)
        throws org.apache.thrift.TException {
      completeUploadData_args args = new completeUploadData_args();
      args.setLoaderID(loaderID);
      sendBase("completeUploadData", args);
    }

    public int recv_completeUploadData() throws HiveServerException,
        org.apache.thrift.TException {
      completeUploadData_result result = new completeUploadData_result();
      receiveBase(result, "completeUploadData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "completeUploadData failed: unknown result");
    }

    public int querySQLState(String sqlID) throws HiveServerException,
        org.apache.thrift.TException {
      send_querySQLState(sqlID);
      return recv_querySQLState();
    }

    public void send_querySQLState(String sqlID)
        throws org.apache.thrift.TException {
      querySQLState_args args = new querySQLState_args();
      args.setSqlID(sqlID);
      sendBase("querySQLState", args);
    }

    public int recv_querySQLState() throws HiveServerException,
        org.apache.thrift.TException {
      querySQLState_result result = new querySQLState_result();
      receiveBase(result, "querySQLState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "querySQLState failed: unknown result");
    }

    public String getJobID(String sqlID) throws HiveServerException,
        org.apache.thrift.TException {
      send_getJobID(sqlID);
      return recv_getJobID();
    }

    public void send_getJobID(String sqlID) throws org.apache.thrift.TException {
      getJobID_args args = new getJobID_args();
      args.setSqlID(sqlID);
      sendBase("getJobID", args);
    }

    public String recv_getJobID() throws HiveServerException,
        org.apache.thrift.TException {
      getJobID_result result = new getJobID_result();
      receiveBase(result, "getJobID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getJobID failed: unknown result");
    }

    public List<String> getJobCounts(String sqlID) throws HiveServerException,
        org.apache.thrift.TException {
      send_getJobCounts(sqlID);
      return recv_getJobCounts();
    }

    public void send_getJobCounts(String sqlID)
        throws org.apache.thrift.TException {
      getJobCounts_args args = new getJobCounts_args();
      args.setSqlID(sqlID);
      sendBase("getJobCounts", args);
    }

    public List<String> recv_getJobCounts() throws HiveServerException,
        org.apache.thrift.TException {
      getJobCounts_result result = new getJobCounts_result();
      receiveBase(result, "getJobCounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getJobCounts failed: unknown result");
    }

    public List<String> getHiveLoad() throws HiveServerException,
        org.apache.thrift.TException {
      send_getHiveLoad();
      return recv_getHiveLoad();
    }

    public void send_getHiveLoad() throws org.apache.thrift.TException {
      getHiveLoad_args args = new getHiveLoad_args();
      sendBase("getHiveLoad", args);
    }

    public List<String> recv_getHiveLoad() throws HiveServerException,
        org.apache.thrift.TException {
      getHiveLoad_result result = new getHiveLoad_result();
      receiveBase(result, "getHiveLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getHiveLoad failed: unknown result");
    }

    public List<String> getSchemaForExplain(String sql)
        throws HiveServerException, org.apache.thrift.TException {
      send_getSchemaForExplain(sql);
      return recv_getSchemaForExplain();
    }

    public void send_getSchemaForExplain(String sql)
        throws org.apache.thrift.TException {
      getSchemaForExplain_args args = new getSchemaForExplain_args();
      args.setSql(sql);
      sendBase("getSchemaForExplain", args);
    }

    public List<String> recv_getSchemaForExplain() throws HiveServerException,
        org.apache.thrift.TException {
      getSchemaForExplain_result result = new getSchemaForExplain_result();
      receiveBase(result, "getSchemaForExplain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getSchemaForExplain failed: unknown result");
    }

    public int replaceJar(String dbname, String tablename, String user)
        throws HiveServerException, org.apache.thrift.TException {
      send_replaceJar(dbname, tablename, user);
      return recv_replaceJar();
    }

    public void send_replaceJar(String dbname, String tablename, String user)
        throws org.apache.thrift.TException {
      replaceJar_args args = new replaceJar_args();
      args.setDbname(dbname);
      args.setTablename(tablename);
      args.setUser(user);
      sendBase("replaceJar", args);
    }

    public int recv_replaceJar() throws HiveServerException,
        org.apache.thrift.TException {
      replaceJar_result result = new replaceJar_result();
      receiveBase(result, "replaceJar");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "replaceJar failed: unknown result");
    }

    public String uploadProto(String user, String fileName, ByteBuffer data)
        throws HiveServerException, org.apache.thrift.TException {
      send_uploadProto(user, fileName, data);
      return recv_uploadProto();
    }

    public void send_uploadProto(String user, String fileName, ByteBuffer data)
        throws org.apache.thrift.TException {
      uploadProto_args args = new uploadProto_args();
      args.setUser(user);
      args.setFileName(fileName);
      args.setData(data);
      sendBase("uploadProto", args);
    }

    public String recv_uploadProto() throws HiveServerException,
        org.apache.thrift.TException {
      uploadProto_result result = new uploadProto_result();
      receiveBase(result, "uploadProto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "uploadProto failed: unknown result");
    }

  }

  public static class AsyncClient extends
      org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.AsyncClient
      implements AsyncIface {
    public static class Factory implements
        org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void execute(String query,
        org.apache.thrift.async.AsyncMethodCallback<execute_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      execute_call method_call = new execute_call(query, resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execute_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String query;

      public execute_call(
          String query,
          org.apache.thrift.async.AsyncMethodCallback<execute_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "execute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execute_args args = new execute_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_execute();
      }
    }

    public void jdbc_execute(
        String query,
        String queryID,
        org.apache.thrift.async.AsyncMethodCallback<jdbc_execute_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      jdbc_execute_call method_call = new jdbc_execute_call(query, queryID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class jdbc_execute_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String query;
      private String queryID;

      public jdbc_execute_call(
          String query,
          String queryID,
          org.apache.thrift.async.AsyncMethodCallback<jdbc_execute_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.queryID = queryID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "jdbc_execute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        jdbc_execute_args args = new jdbc_execute_args();
        args.setQuery(query);
        args.setQueryID(queryID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_jdbc_execute();
      }
    }

    public void fetchOne(
        org.apache.thrift.async.AsyncMethodCallback<fetchOne_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      fetchOne_call method_call = new fetchOne_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchOne_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public fetchOne_call(
          org.apache.thrift.async.AsyncMethodCallback<fetchOne_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "fetchOne", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchOne_args args = new fetchOne_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchOne();
      }
    }

    public void fetchN(int numRows,
        org.apache.thrift.async.AsyncMethodCallback<fetchN_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      fetchN_call method_call = new fetchN_call(numRows, resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchN_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private int numRows;

      public fetchN_call(
          int numRows,
          org.apache.thrift.async.AsyncMethodCallback<fetchN_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numRows = numRows;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "fetchN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchN_args args = new fetchN_args();
        args.setNumRows(numRows);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchN();
      }
    }

    public void fetchAll(
        org.apache.thrift.async.AsyncMethodCallback<fetchAll_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      fetchAll_call method_call = new fetchAll_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchAll_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public fetchAll_call(
          org.apache.thrift.async.AsyncMethodCallback<fetchAll_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "fetchAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchAll_args args = new fetchAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchAll();
      }
    }

    public void getSchema(
        org.apache.thrift.async.AsyncMethodCallback<getSchema_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getSchema_call method_call = new getSchema_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchema_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getSchema_call(
          org.apache.thrift.async.AsyncMethodCallback<getSchema_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchema_args args = new getSchema_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.hadoop.hive.metastore.api.Schema getResult()
          throws HiveServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchema();
      }
    }

    public void getThriftSchema(
        org.apache.thrift.async.AsyncMethodCallback<getThriftSchema_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getThriftSchema_call method_call = new getThriftSchema_call(
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getThriftSchema_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getThriftSchema_call(
          org.apache.thrift.async.AsyncMethodCallback<getThriftSchema_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getThriftSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getThriftSchema_args args = new getThriftSchema_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.hadoop.hive.metastore.api.Schema getResult()
          throws HiveServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getThriftSchema();
      }
    }

    public void getClusterStatus(
        org.apache.thrift.async.AsyncMethodCallback<getClusterStatus_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getClusterStatus_call method_call = new getClusterStatus_call(
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClusterStatus_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getClusterStatus_call(
          org.apache.thrift.async.AsyncMethodCallback<getClusterStatus_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getClusterStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClusterStatus_args args = new getClusterStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HiveClusterStatus getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClusterStatus();
      }
    }

    public void createSession(
        String name,
        org.apache.thrift.async.AsyncMethodCallback<createSession_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      createSession_call method_call = new createSession_call(name,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSession_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String name;

      public createSession_call(
          String name,
          org.apache.thrift.async.AsyncMethodCallback<createSession_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "createSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSession_args args = new createSession_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSession();
      }
    }

    public void requireSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<requireSession_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      requireSession_call method_call = new requireSession_call(sid, svid,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requireSession_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sid;
      private String svid;

      public requireSession_call(
          String sid,
          String svid,
          org.apache.thrift.async.AsyncMethodCallback<requireSession_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.svid = svid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "requireSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requireSession_args args = new requireSession_args();
        args.setSid(sid);
        args.setSvid(svid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_requireSession();
      }
    }

    public void detachSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<detachSession_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      detachSession_call method_call = new detachSession_call(sid, svid,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class detachSession_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sid;
      private String svid;

      public detachSession_call(
          String sid,
          String svid,
          org.apache.thrift.async.AsyncMethodCallback<detachSession_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.svid = svid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "detachSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        detachSession_args args = new detachSession_args();
        args.setSid(sid);
        args.setSvid(svid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_detachSession();
      }
    }

    public void dropSession(
        String sid,
        String svid,
        org.apache.thrift.async.AsyncMethodCallback<dropSession_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      dropSession_call method_call = new dropSession_call(sid, svid,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dropSession_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sid;
      private String svid;

      public dropSession_call(
          String sid,
          String svid,
          org.apache.thrift.async.AsyncMethodCallback<dropSession_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.svid = svid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "dropSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dropSession_args args = new dropSession_args();
        args.setSid(sid);
        args.setSvid(svid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_dropSession();
      }
    }

    public void showSessions(
        org.apache.thrift.async.AsyncMethodCallback<showSessions_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      showSessions_call method_call = new showSessions_call(resultHandler,
          this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class showSessions_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public showSessions_call(
          org.apache.thrift.async.AsyncMethodCallback<showSessions_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "showSessions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        showSessions_args args = new showSessions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_showSessions();
      }
    }

    public void uploadJob(
        String job,
        org.apache.thrift.async.AsyncMethodCallback<uploadJob_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      uploadJob_call method_call = new uploadJob_call(job, resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadJob_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String job;

      public uploadJob_call(
          String job,
          org.apache.thrift.async.AsyncMethodCallback<uploadJob_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "uploadJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadJob_args args = new uploadJob_args();
        args.setJob(job);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadJob();
      }
    }

    public void killJob(
        org.apache.thrift.async.AsyncMethodCallback<killJob_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      killJob_call method_call = new killJob_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class killJob_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public killJob_call(
          org.apache.thrift.async.AsyncMethodCallback<killJob_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "killJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        killJob_args args = new killJob_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_killJob();
      }
    }

    public void configJob(
        String config,
        org.apache.thrift.async.AsyncMethodCallback<configJob_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      configJob_call method_call = new configJob_call(config, resultHandler,
          this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configJob_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String config;

      public configJob_call(
          String config,
          org.apache.thrift.async.AsyncMethodCallback<configJob_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config = config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "configJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configJob_args args = new configJob_args();
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_configJob();
      }
    }

    public void getJobStatus(
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getJobStatus_call method_call = new getJobStatus_call(jobid,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobStatus_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private int jobid;

      public getJobStatus_call(
          int jobid,
          org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobStatus_args args = new getJobStatus_args();
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobStatus();
      }
    }

    public void getEnv(
        org.apache.thrift.async.AsyncMethodCallback<getEnv_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getEnv_call method_call = new getEnv_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnv_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getEnv_call(
          org.apache.thrift.async.AsyncMethodCallback<getEnv_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getEnv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnv_args args = new getEnv_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnv();
      }
    }

    public void audit(String user, String passwd, String dbname,
        org.apache.thrift.async.AsyncMethodCallback<audit_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      audit_call method_call = new audit_call(user, passwd, dbname,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class audit_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String user;
      private String passwd;
      private String dbname;

      public audit_call(
          String user,
          String passwd,
          String dbname,
          org.apache.thrift.async.AsyncMethodCallback<audit_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.passwd = passwd;
        this.dbname = dbname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("audit",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        audit_args args = new audit_args();
        args.setUser(user);
        args.setPasswd(passwd);
        args.setDbname(dbname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_audit();
      }
    }

    public void setHistory(
        String sid,
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<setHistory_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      setHistory_call method_call = new setHistory_call(sid, jobid,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setHistory_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sid;
      private int jobid;

      public setHistory_call(
          String sid,
          int jobid,
          org.apache.thrift.async.AsyncMethodCallback<setHistory_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "setHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setHistory_args args = new setHistory_args();
        args.setSid(sid);
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_setHistory();
      }
    }

    public void getHistory(
        int jobid,
        org.apache.thrift.async.AsyncMethodCallback<getHistory_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getHistory_call method_call = new getHistory_call(jobid, resultHandler,
          this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistory_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private int jobid;

      public getHistory_call(
          int jobid,
          org.apache.thrift.async.AsyncMethodCallback<getHistory_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistory_args args = new getHistory_args();
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistory();
      }
    }

    public void compile(String query,
        org.apache.thrift.async.AsyncMethodCallback<compile_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      compile_call method_call = new compile_call(query, resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compile_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String query;

      public compile_call(
          String query,
          org.apache.thrift.async.AsyncMethodCallback<compile_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "compile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compile_args args = new compile_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_compile();
      }
    }

    public void upload(String rtype, String user, String fileName, String data,
        org.apache.thrift.async.AsyncMethodCallback<upload_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      upload_call method_call = new upload_call(rtype, user, fileName, data,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upload_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String rtype;
      private String user;
      private String fileName;
      private String data;

      public upload_call(
          String rtype,
          String user,
          String fileName,
          String data,
          org.apache.thrift.async.AsyncMethodCallback<upload_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rtype = rtype;
        this.user = user;
        this.fileName = fileName;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "upload", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upload_args args = new upload_args();
        args.setRtype(rtype);
        args.setUser(user);
        args.setFileName(fileName);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_upload();
      }
    }

    public void makejar(String dbname, String tblname, String filename,
        String username,
        org.apache.thrift.async.AsyncMethodCallback<makejar_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      makejar_call method_call = new makejar_call(dbname, tblname, filename,
          username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makejar_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String tblname;
      private String filename;
      private String username;

      public makejar_call(
          String dbname,
          String tblname,
          String filename,
          String username,
          org.apache.thrift.async.AsyncMethodCallback<makejar_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.tblname = tblname;
        this.filename = filename;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "makejar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makejar_args args = new makejar_args();
        args.setDbname(dbname);
        args.setTblname(tblname);
        args.setFilename(filename);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_makejar();
      }
    }

    public void clean(
        org.apache.thrift.async.AsyncMethodCallback<clean_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      clean_call method_call = new clean_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clean_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public clean_call(
          org.apache.thrift.async.AsyncMethodCallback<clean_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clean",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        clean_args args = new clean_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        (new Client(prot)).recv_clean();
      }
    }

    public void preproto(String dbname, String tblname, String filename,
        String username,
        org.apache.thrift.async.AsyncMethodCallback<preproto_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      preproto_call method_call = new preproto_call(dbname, tblname, filename,
          username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class preproto_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String tblname;
      private String filename;
      private String username;

      public preproto_call(
          String dbname,
          String tblname,
          String filename,
          String username,
          org.apache.thrift.async.AsyncMethodCallback<preproto_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.tblname = tblname;
        this.filename = filename;
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "preproto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        preproto_args args = new preproto_args();
        args.setDbname(dbname);
        args.setTblname(tblname);
        args.setFilename(filename);
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_preproto();
      }
    }

    public void genjar(String dbname, String tblname, String filename,
        org.apache.thrift.async.AsyncMethodCallback<genjar_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      genjar_call method_call = new genjar_call(dbname, tblname, filename,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class genjar_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String tblname;
      private String filename;

      public genjar_call(
          String dbname,
          String tblname,
          String filename,
          org.apache.thrift.async.AsyncMethodCallback<genjar_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.tblname = tblname;
        this.filename = filename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "genjar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        genjar_args args = new genjar_args();
        args.setDbname(dbname);
        args.setTblname(tblname);
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_genjar();
      }
    }

    public void uploadModule(
        String user,
        String moduleName,
        ByteBuffer module1,
        org.apache.thrift.async.AsyncMethodCallback<uploadModule_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      uploadModule_call method_call = new uploadModule_call(user, moduleName,
          module1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadModule_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String user;
      private String moduleName;
      private ByteBuffer module1;

      public uploadModule_call(
          String user,
          String moduleName,
          ByteBuffer module1,
          org.apache.thrift.async.AsyncMethodCallback<uploadModule_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.moduleName = moduleName;
        this.module1 = module1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "uploadModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadModule_args args = new uploadModule_args();
        args.setUser(user);
        args.setModuleName(moduleName);
        args.setModule1(module1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadModule();
      }
    }

    public void downloadModule(
        String user,
        String moduleName,
        org.apache.thrift.async.AsyncMethodCallback<downloadModule_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      downloadModule_call method_call = new downloadModule_call(user,
          moduleName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class downloadModule_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String user;
      private String moduleName;

      public downloadModule_call(
          String user,
          String moduleName,
          org.apache.thrift.async.AsyncMethodCallback<downloadModule_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.moduleName = moduleName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "downloadModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        downloadModule_args args = new downloadModule_args();
        args.setUser(user);
        args.setModuleName(moduleName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_downloadModule();
      }
    }

    public void listModule(
        String user,
        org.apache.thrift.async.AsyncMethodCallback<listModule_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      listModule_call method_call = new listModule_call(user, resultHandler,
          this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listModule_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String user;

      public listModule_call(
          String user,
          org.apache.thrift.async.AsyncMethodCallback<listModule_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "listModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listModule_args args = new listModule_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_listModule();
      }
    }

    public void getRowCount(
        org.apache.thrift.async.AsyncMethodCallback<getRowCount_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getRowCount_call method_call = new getRowCount_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRowCount_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getRowCount_call(
          org.apache.thrift.async.AsyncMethodCallback<getRowCount_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getRowCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRowCount_args args = new getRowCount_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRowCount();
      }
    }

    public void getSQLProcess(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<getSQLProcess_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getSQLProcess_call method_call = new getSQLProcess_call(sqlID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSQLProcess_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sqlID;

      public getSQLProcess_call(
          String sqlID,
          org.apache.thrift.async.AsyncMethodCallback<getSQLProcess_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlID = sqlID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getSQLProcess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSQLProcess_args args = new getSQLProcess_args();
        args.setSqlID(sqlID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSQLProcess();
      }
    }

    public void killSQLQuery(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<killSQLQuery_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      killSQLQuery_call method_call = new killSQLQuery_call(sqlID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class killSQLQuery_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sqlID;

      public killSQLQuery_call(
          String sqlID,
          org.apache.thrift.async.AsyncMethodCallback<killSQLQuery_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlID = sqlID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "killSQLQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        killSQLQuery_args args = new killSQLQuery_args();
        args.setSqlID(sqlID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_killSQLQuery();
      }
    }

    public void dataSync(String createSQL, String tableName, String data,
        String partName, String subPartName, int mode,
        org.apache.thrift.async.AsyncMethodCallback<dataSync_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      dataSync_call method_call = new dataSync_call(createSQL, tableName, data,
          partName, subPartName, mode, resultHandler, this, ___protocolFactory,
          ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataSync_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String createSQL;
      private String tableName;
      private String data;
      private String partName;
      private String subPartName;
      private int mode;

      public dataSync_call(
          String createSQL,
          String tableName,
          String data,
          String partName,
          String subPartName,
          int mode,
          org.apache.thrift.async.AsyncMethodCallback<dataSync_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createSQL = createSQL;
        this.tableName = tableName;
        this.data = data;
        this.partName = partName;
        this.subPartName = subPartName;
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "dataSync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataSync_args args = new dataSync_args();
        args.setCreateSQL(createSQL);
        args.setTableName(tableName);
        args.setData(data);
        args.setPartName(partName);
        args.setSubPartName(subPartName);
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataSync();
      }
    }

    public void getLoader(
        String destDB,
        String destTable,
        int mode,
        org.apache.thrift.async.AsyncMethodCallback<getLoader_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getLoader_call method_call = new getLoader_call(destDB, destTable, mode,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoader_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String destDB;
      private String destTable;
      private int mode;

      public getLoader_call(
          String destDB,
          String destTable,
          int mode,
          org.apache.thrift.async.AsyncMethodCallback<getLoader_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.destDB = destDB;
        this.destTable = destTable;
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getLoader", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoader_args args = new getLoader_args();
        args.setDestDB(destDB);
        args.setDestTable(destTable);
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoader();
      }
    }

    public void releaseLoader(
        String loaderID,
        org.apache.thrift.async.AsyncMethodCallback<releaseLoader_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      releaseLoader_call method_call = new releaseLoader_call(loaderID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class releaseLoader_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String loaderID;

      public releaseLoader_call(
          String loaderID,
          org.apache.thrift.async.AsyncMethodCallback<releaseLoader_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loaderID = loaderID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "releaseLoader", org.apache.thrift.protocol.TMessageType.CALL, 0));
        releaseLoader_args args = new releaseLoader_args();
        args.setLoaderID(loaderID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseLoader();
      }
    }

    public void uploadData(
        String loaderID,
        String data,
        org.apache.thrift.async.AsyncMethodCallback<uploadData_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      uploadData_call method_call = new uploadData_call(loaderID, data,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadData_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String loaderID;
      private String data;

      public uploadData_call(
          String loaderID,
          String data,
          org.apache.thrift.async.AsyncMethodCallback<uploadData_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loaderID = loaderID;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "uploadData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadData_args args = new uploadData_args();
        args.setLoaderID(loaderID);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadData();
      }
    }

    public void completeUploadData(
        String loaderID,
        org.apache.thrift.async.AsyncMethodCallback<completeUploadData_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      completeUploadData_call method_call = new completeUploadData_call(
          loaderID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completeUploadData_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String loaderID;

      public completeUploadData_call(
          String loaderID,
          org.apache.thrift.async.AsyncMethodCallback<completeUploadData_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loaderID = loaderID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "completeUploadData", org.apache.thrift.protocol.TMessageType.CALL,
            0));
        completeUploadData_args args = new completeUploadData_args();
        args.setLoaderID(loaderID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_completeUploadData();
      }
    }

    public void querySQLState(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<querySQLState_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      querySQLState_call method_call = new querySQLState_call(sqlID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySQLState_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sqlID;

      public querySQLState_call(
          String sqlID,
          org.apache.thrift.async.AsyncMethodCallback<querySQLState_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlID = sqlID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "querySQLState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySQLState_args args = new querySQLState_args();
        args.setSqlID(sqlID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySQLState();
      }
    }

    public void getJobID(String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<getJobID_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getJobID_call method_call = new getJobID_call(sqlID, resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobID_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sqlID;

      public getJobID_call(
          String sqlID,
          org.apache.thrift.async.AsyncMethodCallback<getJobID_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlID = sqlID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getJobID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobID_args args = new getJobID_args();
        args.setSqlID(sqlID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobID();
      }
    }

    public void getJobCounts(
        String sqlID,
        org.apache.thrift.async.AsyncMethodCallback<getJobCounts_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getJobCounts_call method_call = new getJobCounts_call(sqlID,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobCounts_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sqlID;

      public getJobCounts_call(
          String sqlID,
          org.apache.thrift.async.AsyncMethodCallback<getJobCounts_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlID = sqlID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getJobCounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobCounts_args args = new getJobCounts_args();
        args.setSqlID(sqlID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobCounts();
      }
    }

    public void getHiveLoad(
        org.apache.thrift.async.AsyncMethodCallback<getHiveLoad_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getHiveLoad_call method_call = new getHiveLoad_call(resultHandler, this,
          ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHiveLoad_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      public getHiveLoad_call(
          org.apache.thrift.async.AsyncMethodCallback<getHiveLoad_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getHiveLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHiveLoad_args args = new getHiveLoad_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHiveLoad();
      }
    }

    public void getSchemaForExplain(
        String sql,
        org.apache.thrift.async.AsyncMethodCallback<getSchemaForExplain_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getSchemaForExplain_call method_call = new getSchemaForExplain_call(sql,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchemaForExplain_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String sql;

      public getSchemaForExplain_call(
          String sql,
          org.apache.thrift.async.AsyncMethodCallback<getSchemaForExplain_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "getSchemaForExplain",
            org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchemaForExplain_args args = new getSchemaForExplain_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchemaForExplain();
      }
    }

    public void replaceJar(
        String dbname,
        String tablename,
        String user,
        org.apache.thrift.async.AsyncMethodCallback<replaceJar_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      replaceJar_call method_call = new replaceJar_call(dbname, tablename,
          user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replaceJar_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String dbname;
      private String tablename;
      private String user;

      public replaceJar_call(
          String dbname,
          String tablename,
          String user,
          org.apache.thrift.async.AsyncMethodCallback<replaceJar_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbname = dbname;
        this.tablename = tablename;
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "replaceJar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replaceJar_args args = new replaceJar_args();
        args.setDbname(dbname);
        args.setTablename(tablename);
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_replaceJar();
      }
    }

    public void uploadProto(
        String user,
        String fileName,
        ByteBuffer data,
        org.apache.thrift.async.AsyncMethodCallback<uploadProto_call> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      uploadProto_call method_call = new uploadProto_call(user, fileName, data,
          resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadProto_call extends
        org.apache.thrift.async.TAsyncMethodCall {
      private String user;
      private String fileName;
      private ByteBuffer data;

      public uploadProto_call(
          String user,
          String fileName,
          ByteBuffer data,
          org.apache.thrift.async.AsyncMethodCallback<uploadProto_call> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.fileName = fileName;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
            "uploadProto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadProto_args args = new uploadProto_args();
        args.setUser(user);
        args.setFileName(fileName);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws HiveServerException,
          org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
            .getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadProto();
      }
    }

  }

  public static class Processor<I extends Iface> extends
      org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Processor
      implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(
          iface,
          getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("execute", new execute());
      processMap.put("jdbc_execute", new jdbc_execute());
      processMap.put("fetchOne", new fetchOne());
      processMap.put("fetchN", new fetchN());
      processMap.put("fetchAll", new fetchAll());
      processMap.put("getSchema", new getSchema());
      processMap.put("getThriftSchema", new getThriftSchema());
      processMap.put("getClusterStatus", new getClusterStatus());
      processMap.put("createSession", new createSession());
      processMap.put("requireSession", new requireSession());
      processMap.put("detachSession", new detachSession());
      processMap.put("dropSession", new dropSession());
      processMap.put("showSessions", new showSessions());
      processMap.put("uploadJob", new uploadJob());
      processMap.put("killJob", new killJob());
      processMap.put("configJob", new configJob());
      processMap.put("getJobStatus", new getJobStatus());
      processMap.put("getEnv", new getEnv());
      processMap.put("audit", new audit());
      processMap.put("setHistory", new setHistory());
      processMap.put("getHistory", new getHistory());
      processMap.put("compile", new compile());
      processMap.put("upload", new upload());
      processMap.put("makejar", new makejar());
      processMap.put("clean", new clean());
      processMap.put("preproto", new preproto());
      processMap.put("genjar", new genjar());
      processMap.put("uploadModule", new uploadModule());
      processMap.put("downloadModule", new downloadModule());
      processMap.put("listModule", new listModule());
      processMap.put("getRowCount", new getRowCount());
      processMap.put("getSQLProcess", new getSQLProcess());
      processMap.put("killSQLQuery", new killSQLQuery());
      processMap.put("dataSync", new dataSync());
      processMap.put("getLoader", new getLoader());
      processMap.put("releaseLoader", new releaseLoader());
      processMap.put("uploadData", new uploadData());
      processMap.put("completeUploadData", new completeUploadData());
      processMap.put("querySQLState", new querySQLState());
      processMap.put("getJobID", new getJobID());
      processMap.put("getJobCounts", new getJobCounts());
      processMap.put("getHiveLoad", new getHiveLoad());
      processMap.put("getSchemaForExplain", new getSchemaForExplain());
      processMap.put("replaceJar", new replaceJar());
      processMap.put("uploadProto", new uploadProto());
      return processMap;
    }

    private static class execute<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, execute_args> {
      public execute() {
        super("execute");
      }

      protected execute_args getEmptyArgsInstance() {
        return new execute_args();
      }

      protected execute_result getResult(I iface, execute_args args)
          throws org.apache.thrift.TException {
        execute_result result = new execute_result();
        try {
          result.success = iface.execute(args.query);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class jdbc_execute<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, jdbc_execute_args> {
      public jdbc_execute() {
        super("jdbc_execute");
      }

      protected jdbc_execute_args getEmptyArgsInstance() {
        return new jdbc_execute_args();
      }

      protected jdbc_execute_result getResult(I iface, jdbc_execute_args args)
          throws org.apache.thrift.TException {
        jdbc_execute_result result = new jdbc_execute_result();
        try {
          result.success = iface.jdbc_execute(args.query, args.queryID);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class fetchOne<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, fetchOne_args> {
      public fetchOne() {
        super("fetchOne");
      }

      protected fetchOne_args getEmptyArgsInstance() {
        return new fetchOne_args();
      }

      protected fetchOne_result getResult(I iface, fetchOne_args args)
          throws org.apache.thrift.TException {
        fetchOne_result result = new fetchOne_result();
        try {
          result.success = iface.fetchOne();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class fetchN<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, fetchN_args> {
      public fetchN() {
        super("fetchN");
      }

      protected fetchN_args getEmptyArgsInstance() {
        return new fetchN_args();
      }

      protected fetchN_result getResult(I iface, fetchN_args args)
          throws org.apache.thrift.TException {
        fetchN_result result = new fetchN_result();
        try {
          result.success = iface.fetchN(args.numRows);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class fetchAll<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, fetchAll_args> {
      public fetchAll() {
        super("fetchAll");
      }

      protected fetchAll_args getEmptyArgsInstance() {
        return new fetchAll_args();
      }

      protected fetchAll_result getResult(I iface, fetchAll_args args)
          throws org.apache.thrift.TException {
        fetchAll_result result = new fetchAll_result();
        try {
          result.success = iface.fetchAll();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getSchema<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getSchema_args> {
      public getSchema() {
        super("getSchema");
      }

      protected getSchema_args getEmptyArgsInstance() {
        return new getSchema_args();
      }

      protected getSchema_result getResult(I iface, getSchema_args args)
          throws org.apache.thrift.TException {
        getSchema_result result = new getSchema_result();
        try {
          result.success = iface.getSchema();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getThriftSchema<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getThriftSchema_args> {
      public getThriftSchema() {
        super("getThriftSchema");
      }

      protected getThriftSchema_args getEmptyArgsInstance() {
        return new getThriftSchema_args();
      }

      protected getThriftSchema_result getResult(I iface,
          getThriftSchema_args args) throws org.apache.thrift.TException {
        getThriftSchema_result result = new getThriftSchema_result();
        try {
          result.success = iface.getThriftSchema();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getClusterStatus<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getClusterStatus_args> {
      public getClusterStatus() {
        super("getClusterStatus");
      }

      protected getClusterStatus_args getEmptyArgsInstance() {
        return new getClusterStatus_args();
      }

      protected getClusterStatus_result getResult(I iface,
          getClusterStatus_args args) throws org.apache.thrift.TException {
        getClusterStatus_result result = new getClusterStatus_result();
        try {
          result.success = iface.getClusterStatus();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class createSession<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, createSession_args> {
      public createSession() {
        super("createSession");
      }

      protected createSession_args getEmptyArgsInstance() {
        return new createSession_args();
      }

      protected createSession_result getResult(I iface, createSession_args args)
          throws org.apache.thrift.TException {
        createSession_result result = new createSession_result();
        try {
          result.success = iface.createSession(args.name);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class requireSession<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, requireSession_args> {
      public requireSession() {
        super("requireSession");
      }

      protected requireSession_args getEmptyArgsInstance() {
        return new requireSession_args();
      }

      protected requireSession_result getResult(I iface,
          requireSession_args args) throws org.apache.thrift.TException {
        requireSession_result result = new requireSession_result();
        try {
          result.success = iface.requireSession(args.sid, args.svid);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class detachSession<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, detachSession_args> {
      public detachSession() {
        super("detachSession");
      }

      protected detachSession_args getEmptyArgsInstance() {
        return new detachSession_args();
      }

      protected detachSession_result getResult(I iface, detachSession_args args)
          throws org.apache.thrift.TException {
        detachSession_result result = new detachSession_result();
        try {
          result.success = iface.detachSession(args.sid, args.svid);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class dropSession<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, dropSession_args> {
      public dropSession() {
        super("dropSession");
      }

      protected dropSession_args getEmptyArgsInstance() {
        return new dropSession_args();
      }

      protected dropSession_result getResult(I iface, dropSession_args args)
          throws org.apache.thrift.TException {
        dropSession_result result = new dropSession_result();
        try {
          result.success = iface.dropSession(args.sid, args.svid);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class showSessions<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, showSessions_args> {
      public showSessions() {
        super("showSessions");
      }

      protected showSessions_args getEmptyArgsInstance() {
        return new showSessions_args();
      }

      protected showSessions_result getResult(I iface, showSessions_args args)
          throws org.apache.thrift.TException {
        showSessions_result result = new showSessions_result();
        try {
          result.success = iface.showSessions();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class uploadJob<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, uploadJob_args> {
      public uploadJob() {
        super("uploadJob");
      }

      protected uploadJob_args getEmptyArgsInstance() {
        return new uploadJob_args();
      }

      protected uploadJob_result getResult(I iface, uploadJob_args args)
          throws org.apache.thrift.TException {
        uploadJob_result result = new uploadJob_result();
        try {
          result.success = iface.uploadJob(args.job);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class killJob<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, killJob_args> {
      public killJob() {
        super("killJob");
      }

      protected killJob_args getEmptyArgsInstance() {
        return new killJob_args();
      }

      protected killJob_result getResult(I iface, killJob_args args)
          throws org.apache.thrift.TException {
        killJob_result result = new killJob_result();
        try {
          result.success = iface.killJob();
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class configJob<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, configJob_args> {
      public configJob() {
        super("configJob");
      }

      protected configJob_args getEmptyArgsInstance() {
        return new configJob_args();
      }

      protected configJob_result getResult(I iface, configJob_args args)
          throws org.apache.thrift.TException {
        configJob_result result = new configJob_result();
        try {
          result.success = iface.configJob(args.config);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getJobStatus<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
      public getJobStatus() {
        super("getJobStatus");
      }

      protected getJobStatus_args getEmptyArgsInstance() {
        return new getJobStatus_args();
      }

      protected getJobStatus_result getResult(I iface, getJobStatus_args args)
          throws org.apache.thrift.TException {
        getJobStatus_result result = new getJobStatus_result();
        try {
          result.success = iface.getJobStatus(args.jobid);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getEnv<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getEnv_args> {
      public getEnv() {
        super("getEnv");
      }

      protected getEnv_args getEmptyArgsInstance() {
        return new getEnv_args();
      }

      protected getEnv_result getResult(I iface, getEnv_args args)
          throws org.apache.thrift.TException {
        getEnv_result result = new getEnv_result();
        try {
          result.success = iface.getEnv();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class audit<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, audit_args> {
      public audit() {
        super("audit");
      }

      protected audit_args getEmptyArgsInstance() {
        return new audit_args();
      }

      protected audit_result getResult(I iface, audit_args args)
          throws org.apache.thrift.TException {
        audit_result result = new audit_result();
        try {
          result.success = iface.audit(args.user, args.passwd, args.dbname);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class setHistory<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, setHistory_args> {
      public setHistory() {
        super("setHistory");
      }

      protected setHistory_args getEmptyArgsInstance() {
        return new setHistory_args();
      }

      protected setHistory_result getResult(I iface, setHistory_args args)
          throws org.apache.thrift.TException {
        setHistory_result result = new setHistory_result();
        try {
          iface.setHistory(args.sid, args.jobid);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getHistory<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getHistory_args> {
      public getHistory() {
        super("getHistory");
      }

      protected getHistory_args getEmptyArgsInstance() {
        return new getHistory_args();
      }

      protected getHistory_result getResult(I iface, getHistory_args args)
          throws org.apache.thrift.TException {
        getHistory_result result = new getHistory_result();
        try {
          result.success = iface.getHistory(args.jobid);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class compile<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, compile_args> {
      public compile() {
        super("compile");
      }

      protected compile_args getEmptyArgsInstance() {
        return new compile_args();
      }

      protected compile_result getResult(I iface, compile_args args)
          throws org.apache.thrift.TException {
        compile_result result = new compile_result();
        try {
          result.success = iface.compile(args.query);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class upload<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, upload_args> {
      public upload() {
        super("upload");
      }

      protected upload_args getEmptyArgsInstance() {
        return new upload_args();
      }

      protected upload_result getResult(I iface, upload_args args)
          throws org.apache.thrift.TException {
        upload_result result = new upload_result();
        try {
          result.success = iface.upload(args.rtype, args.user, args.fileName,
              args.data);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class makejar<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, makejar_args> {
      public makejar() {
        super("makejar");
      }

      protected makejar_args getEmptyArgsInstance() {
        return new makejar_args();
      }

      protected makejar_result getResult(I iface, makejar_args args)
          throws org.apache.thrift.TException {
        makejar_result result = new makejar_result();
        try {
          result.success = iface.makejar(args.dbname, args.tblname,
              args.filename, args.username);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class clean<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, clean_args> {
      public clean() {
        super("clean");
      }

      protected clean_args getEmptyArgsInstance() {
        return new clean_args();
      }

      protected clean_result getResult(I iface, clean_args args)
          throws org.apache.thrift.TException {
        clean_result result = new clean_result();
        iface.clean();
        return result;
      }
    }

    private static class preproto<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, preproto_args> {
      public preproto() {
        super("preproto");
      }

      protected preproto_args getEmptyArgsInstance() {
        return new preproto_args();
      }

      protected preproto_result getResult(I iface, preproto_args args)
          throws org.apache.thrift.TException {
        preproto_result result = new preproto_result();
        try {
          result.success = iface.preproto(args.dbname, args.tblname,
              args.filename, args.username);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class genjar<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, genjar_args> {
      public genjar() {
        super("genjar");
      }

      protected genjar_args getEmptyArgsInstance() {
        return new genjar_args();
      }

      protected genjar_result getResult(I iface, genjar_args args)
          throws org.apache.thrift.TException {
        genjar_result result = new genjar_result();
        try {
          result.success = iface.genjar(args.dbname, args.tblname,
              args.filename);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class uploadModule<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, uploadModule_args> {
      public uploadModule() {
        super("uploadModule");
      }

      protected uploadModule_args getEmptyArgsInstance() {
        return new uploadModule_args();
      }

      protected uploadModule_result getResult(I iface, uploadModule_args args)
          throws org.apache.thrift.TException {
        uploadModule_result result = new uploadModule_result();
        try {
          result.success = iface.uploadModule(args.user, args.moduleName,
              args.module1);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class downloadModule<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, downloadModule_args> {
      public downloadModule() {
        super("downloadModule");
      }

      protected downloadModule_args getEmptyArgsInstance() {
        return new downloadModule_args();
      }

      protected downloadModule_result getResult(I iface,
          downloadModule_args args) throws org.apache.thrift.TException {
        downloadModule_result result = new downloadModule_result();
        try {
          result.success = iface.downloadModule(args.user, args.moduleName);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class listModule<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, listModule_args> {
      public listModule() {
        super("listModule");
      }

      protected listModule_args getEmptyArgsInstance() {
        return new listModule_args();
      }

      protected listModule_result getResult(I iface, listModule_args args)
          throws org.apache.thrift.TException {
        listModule_result result = new listModule_result();
        try {
          result.success = iface.listModule(args.user);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getRowCount<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getRowCount_args> {
      public getRowCount() {
        super("getRowCount");
      }

      protected getRowCount_args getEmptyArgsInstance() {
        return new getRowCount_args();
      }

      protected getRowCount_result getResult(I iface, getRowCount_args args)
          throws org.apache.thrift.TException {
        getRowCount_result result = new getRowCount_result();
        try {
          result.success = iface.getRowCount();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getSQLProcess<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getSQLProcess_args> {
      public getSQLProcess() {
        super("getSQLProcess");
      }

      protected getSQLProcess_args getEmptyArgsInstance() {
        return new getSQLProcess_args();
      }

      protected getSQLProcess_result getResult(I iface, getSQLProcess_args args)
          throws org.apache.thrift.TException {
        getSQLProcess_result result = new getSQLProcess_result();
        try {
          result.success = iface.getSQLProcess(args.sqlID);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class killSQLQuery<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, killSQLQuery_args> {
      public killSQLQuery() {
        super("killSQLQuery");
      }

      protected killSQLQuery_args getEmptyArgsInstance() {
        return new killSQLQuery_args();
      }

      protected killSQLQuery_result getResult(I iface, killSQLQuery_args args)
          throws org.apache.thrift.TException {
        killSQLQuery_result result = new killSQLQuery_result();
        try {
          result.success = iface.killSQLQuery(args.sqlID);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class dataSync<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, dataSync_args> {
      public dataSync() {
        super("dataSync");
      }

      protected dataSync_args getEmptyArgsInstance() {
        return new dataSync_args();
      }

      protected dataSync_result getResult(I iface, dataSync_args args)
          throws org.apache.thrift.TException {
        dataSync_result result = new dataSync_result();
        try {
          result.success = iface.dataSync(args.createSQL, args.tableName,
              args.data, args.partName, args.subPartName, args.mode);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getLoader<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getLoader_args> {
      public getLoader() {
        super("getLoader");
      }

      protected getLoader_args getEmptyArgsInstance() {
        return new getLoader_args();
      }

      protected getLoader_result getResult(I iface, getLoader_args args)
          throws org.apache.thrift.TException {
        getLoader_result result = new getLoader_result();
        try {
          result.success = iface.getLoader(args.destDB, args.destTable,
              args.mode);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class releaseLoader<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, releaseLoader_args> {
      public releaseLoader() {
        super("releaseLoader");
      }

      protected releaseLoader_args getEmptyArgsInstance() {
        return new releaseLoader_args();
      }

      protected releaseLoader_result getResult(I iface, releaseLoader_args args)
          throws org.apache.thrift.TException {
        releaseLoader_result result = new releaseLoader_result();
        try {
          result.success = iface.releaseLoader(args.loaderID);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class uploadData<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, uploadData_args> {
      public uploadData() {
        super("uploadData");
      }

      protected uploadData_args getEmptyArgsInstance() {
        return new uploadData_args();
      }

      protected uploadData_result getResult(I iface, uploadData_args args)
          throws org.apache.thrift.TException {
        uploadData_result result = new uploadData_result();
        try {
          result.success = iface.uploadData(args.loaderID, args.data);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class completeUploadData<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, completeUploadData_args> {
      public completeUploadData() {
        super("completeUploadData");
      }

      protected completeUploadData_args getEmptyArgsInstance() {
        return new completeUploadData_args();
      }

      protected completeUploadData_result getResult(I iface,
          completeUploadData_args args) throws org.apache.thrift.TException {
        completeUploadData_result result = new completeUploadData_result();
        try {
          result.success = iface.completeUploadData(args.loaderID);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class querySQLState<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, querySQLState_args> {
      public querySQLState() {
        super("querySQLState");
      }

      protected querySQLState_args getEmptyArgsInstance() {
        return new querySQLState_args();
      }

      protected querySQLState_result getResult(I iface, querySQLState_args args)
          throws org.apache.thrift.TException {
        querySQLState_result result = new querySQLState_result();
        try {
          result.success = iface.querySQLState(args.sqlID);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getJobID<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getJobID_args> {
      public getJobID() {
        super("getJobID");
      }

      protected getJobID_args getEmptyArgsInstance() {
        return new getJobID_args();
      }

      protected getJobID_result getResult(I iface, getJobID_args args)
          throws org.apache.thrift.TException {
        getJobID_result result = new getJobID_result();
        try {
          result.success = iface.getJobID(args.sqlID);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getJobCounts<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getJobCounts_args> {
      public getJobCounts() {
        super("getJobCounts");
      }

      protected getJobCounts_args getEmptyArgsInstance() {
        return new getJobCounts_args();
      }

      protected getJobCounts_result getResult(I iface, getJobCounts_args args)
          throws org.apache.thrift.TException {
        getJobCounts_result result = new getJobCounts_result();
        try {
          result.success = iface.getJobCounts(args.sqlID);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getHiveLoad<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getHiveLoad_args> {
      public getHiveLoad() {
        super("getHiveLoad");
      }

      protected getHiveLoad_args getEmptyArgsInstance() {
        return new getHiveLoad_args();
      }

      protected getHiveLoad_result getResult(I iface, getHiveLoad_args args)
          throws org.apache.thrift.TException {
        getHiveLoad_result result = new getHiveLoad_result();
        try {
          result.success = iface.getHiveLoad();
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getSchemaForExplain<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, getSchemaForExplain_args> {
      public getSchemaForExplain() {
        super("getSchemaForExplain");
      }

      protected getSchemaForExplain_args getEmptyArgsInstance() {
        return new getSchemaForExplain_args();
      }

      protected getSchemaForExplain_result getResult(I iface,
          getSchemaForExplain_args args) throws org.apache.thrift.TException {
        getSchemaForExplain_result result = new getSchemaForExplain_result();
        try {
          result.success = iface.getSchemaForExplain(args.sql);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class replaceJar<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, replaceJar_args> {
      public replaceJar() {
        super("replaceJar");
      }

      protected replaceJar_args getEmptyArgsInstance() {
        return new replaceJar_args();
      }

      protected replaceJar_result getResult(I iface, replaceJar_args args)
          throws org.apache.thrift.TException {
        replaceJar_result result = new replaceJar_result();
        try {
          result.success = iface.replaceJar(args.dbname, args.tablename,
              args.user);
          result.setSuccessIsSet(true);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class uploadProto<I extends Iface> extends
        org.apache.thrift.ProcessFunction<I, uploadProto_args> {
      public uploadProto() {
        super("uploadProto");
      }

      protected uploadProto_args getEmptyArgsInstance() {
        return new uploadProto_args();
      }

      protected uploadProto_result getResult(I iface, uploadProto_args args)
          throws org.apache.thrift.TException {
        uploadProto_result result = new uploadProto_result();
        try {
          result.success = iface.uploadProto(args.user, args.fileName,
              args.data);
        } catch (HiveServerException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class execute_args implements
      org.apache.thrift.TBase<execute_args, execute_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "execute_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "query", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new execute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execute_argsTupleSchemeFactory());
    }

    private String query;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return QUERY;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData(
          "query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          execute_args.class, metaDataMap);
    }

    public execute_args() {
    }

    public execute_args(String query) {
      this();
      this.query = query;
    }

    public execute_args(execute_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public execute_args deepCopy() {
      return new execute_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public String getQuery() {
      return this.query;
    }

    public void setQuery(String query) {
      this.query = query;
    }

    public void unsetQuery() {
      this.query = null;
    }

    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_args)
        return this.equals((execute_args) that);
      return false;
    }

    public boolean equals(execute_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(execute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      execute_args typedOther = (execute_args) other;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(
          typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query,
            typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execute_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execute_argsStandardSchemeFactory implements
        SchemeFactory {
      public execute_argsStandardScheme getScheme() {
        return new execute_argsStandardScheme();
      }
    }

    private static class execute_argsStandardScheme extends
        StandardScheme<execute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          execute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execute_argsTupleSchemeFactory implements
        SchemeFactory {
      public execute_argsTupleScheme getScheme() {
        return new execute_argsTupleScheme();
      }
    }

    private static class execute_argsTupleScheme extends
        TupleScheme<execute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class execute_result implements
      org.apache.thrift.TBase<execute_result, execute_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "execute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new execute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new execute_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          execute_result.class, metaDataMap);
    }

    public execute_result() {
    }

    public execute_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public execute_result(execute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public execute_result deepCopy() {
      return new execute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_result)
        return this.equals((execute_result) that);
      return false;
    }

    public boolean equals(execute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(execute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      execute_result typedOther = (execute_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execute_resultStandardSchemeFactory implements
        SchemeFactory {
      public execute_resultStandardScheme getScheme() {
        return new execute_resultStandardScheme();
      }
    }

    private static class execute_resultStandardScheme extends
        StandardScheme<execute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          execute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execute_resultTupleSchemeFactory implements
        SchemeFactory {
      public execute_resultTupleScheme getScheme() {
        return new execute_resultTupleScheme();
      }
    }

    private static class execute_resultTupleScheme extends
        TupleScheme<execute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class jdbc_execute_args implements
      org.apache.thrift.TBase<jdbc_execute_args, jdbc_execute_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "jdbc_execute_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "query", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "queryID", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new jdbc_execute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new jdbc_execute_argsTupleSchemeFactory());
    }

    private String query;
    private String queryID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query"), QUERY_ID((short) 2, "queryID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return QUERY;
        case 2:
          return QUERY_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData(
          "query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUERY_ID,
          new org.apache.thrift.meta_data.FieldMetaData("queryID",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          jdbc_execute_args.class, metaDataMap);
    }

    public jdbc_execute_args() {
    }

    public jdbc_execute_args(String query, String queryID) {
      this();
      this.query = query;
      this.queryID = queryID;
    }

    public jdbc_execute_args(jdbc_execute_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetQueryID()) {
        this.queryID = other.queryID;
      }
    }

    public jdbc_execute_args deepCopy() {
      return new jdbc_execute_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.queryID = null;
    }

    public String getQuery() {
      return this.query;
    }

    public void setQuery(String query) {
      this.query = query;
    }

    public void unsetQuery() {
      this.query = null;
    }

    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public String getQueryID() {
      return this.queryID;
    }

    public void setQueryID(String queryID) {
      this.queryID = queryID;
    }

    public void unsetQueryID() {
      this.queryID = null;
    }

    public boolean isSetQueryID() {
      return this.queryID != null;
    }

    public void setQueryIDIsSet(boolean value) {
      if (!value) {
        this.queryID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String) value);
        }
        break;

      case QUERY_ID:
        if (value == null) {
          unsetQueryID();
        } else {
          setQueryID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case QUERY_ID:
        return getQueryID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case QUERY_ID:
        return isSetQueryID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jdbc_execute_args)
        return this.equals((jdbc_execute_args) that);
      return false;
    }

    public boolean equals(jdbc_execute_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_queryID = true && this.isSetQueryID();
      boolean that_present_queryID = true && that.isSetQueryID();
      if (this_present_queryID || that_present_queryID) {
        if (!(this_present_queryID && that_present_queryID))
          return false;
        if (!this.queryID.equals(that.queryID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jdbc_execute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jdbc_execute_args typedOther = (jdbc_execute_args) other;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(
          typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query,
            typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueryID()).compareTo(
          typedOther.isSetQueryID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryID,
            typedOther.queryID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jdbc_execute_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("queryID:");
      if (this.queryID == null) {
        sb.append("null");
      } else {
        sb.append(this.queryID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jdbc_execute_argsStandardSchemeFactory implements
        SchemeFactory {
      public jdbc_execute_argsStandardScheme getScheme() {
        return new jdbc_execute_argsStandardScheme();
      }
    }

    private static class jdbc_execute_argsStandardScheme extends
        StandardScheme<jdbc_execute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          jdbc_execute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryID = iprot.readString();
              struct.setQueryIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          jdbc_execute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.queryID != null) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.queryID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jdbc_execute_argsTupleSchemeFactory implements
        SchemeFactory {
      public jdbc_execute_argsTupleScheme getScheme() {
        return new jdbc_execute_argsTupleScheme();
      }
    }

    private static class jdbc_execute_argsTupleScheme extends
        TupleScheme<jdbc_execute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          jdbc_execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetQueryID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetQueryID()) {
          oprot.writeString(struct.queryID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          jdbc_execute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queryID = iprot.readString();
          struct.setQueryIDIsSet(true);
        }
      }
    }

  }

  public static class jdbc_execute_result
      implements
      org.apache.thrift.TBase<jdbc_execute_result, jdbc_execute_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "jdbc_execute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new jdbc_execute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new jdbc_execute_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          jdbc_execute_result.class, metaDataMap);
    }

    public jdbc_execute_result() {
    }

    public jdbc_execute_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public jdbc_execute_result(jdbc_execute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public jdbc_execute_result deepCopy() {
      return new jdbc_execute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jdbc_execute_result)
        return this.equals((jdbc_execute_result) that);
      return false;
    }

    public boolean equals(jdbc_execute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jdbc_execute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jdbc_execute_result typedOther = (jdbc_execute_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jdbc_execute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jdbc_execute_resultStandardSchemeFactory implements
        SchemeFactory {
      public jdbc_execute_resultStandardScheme getScheme() {
        return new jdbc_execute_resultStandardScheme();
      }
    }

    private static class jdbc_execute_resultStandardScheme extends
        StandardScheme<jdbc_execute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          jdbc_execute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          jdbc_execute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jdbc_execute_resultTupleSchemeFactory implements
        SchemeFactory {
      public jdbc_execute_resultTupleScheme getScheme() {
        return new jdbc_execute_resultTupleScheme();
      }
    }

    private static class jdbc_execute_resultTupleScheme extends
        TupleScheme<jdbc_execute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          jdbc_execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          jdbc_execute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class fetchOne_args implements
      org.apache.thrift.TBase<fetchOne_args, fetchOne_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchOne_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new fetchOne_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchOne_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchOne_args.class, metaDataMap);
    }

    public fetchOne_args() {
    }

    public fetchOne_args(fetchOne_args other) {
    }

    public fetchOne_args deepCopy() {
      return new fetchOne_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOne_args)
        return this.equals((fetchOne_args) that);
      return false;
    }

    public boolean equals(fetchOne_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchOne_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchOne_args typedOther = (fetchOne_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchOne_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchOne_argsStandardSchemeFactory implements
        SchemeFactory {
      public fetchOne_argsStandardScheme getScheme() {
        return new fetchOne_argsStandardScheme();
      }
    }

    private static class fetchOne_argsStandardScheme extends
        StandardScheme<fetchOne_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchOne_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchOne_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchOne_argsTupleSchemeFactory implements
        SchemeFactory {
      public fetchOne_argsTupleScheme getScheme() {
        return new fetchOne_argsTupleScheme();
      }
    }

    private static class fetchOne_argsTupleScheme extends
        TupleScheme<fetchOne_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchOne_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchOne_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class fetchOne_result implements
      org.apache.thrift.TBase<fetchOne_result, fetchOne_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchOne_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new fetchOne_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchOne_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchOne_result.class, metaDataMap);
    }

    public fetchOne_result() {
    }

    public fetchOne_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public fetchOne_result(fetchOne_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public fetchOne_result deepCopy() {
      return new fetchOne_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOne_result)
        return this.equals((fetchOne_result) that);
      return false;
    }

    public boolean equals(fetchOne_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchOne_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchOne_result typedOther = (fetchOne_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchOne_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchOne_resultStandardSchemeFactory implements
        SchemeFactory {
      public fetchOne_resultStandardScheme getScheme() {
        return new fetchOne_resultStandardScheme();
      }
    }

    private static class fetchOne_resultStandardScheme extends
        StandardScheme<fetchOne_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchOne_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchOne_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchOne_resultTupleSchemeFactory implements
        SchemeFactory {
      public fetchOne_resultTupleScheme getScheme() {
        return new fetchOne_resultTupleScheme();
      }
    }

    private static class fetchOne_resultTupleScheme extends
        TupleScheme<fetchOne_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchOne_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchOne_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class fetchN_args implements
      org.apache.thrift.TBase<fetchN_args, fetchN_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchN_args");

    private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "numRows", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchN_argsTupleSchemeFactory());
    }

    private int numRows;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM_ROWS((short) 1, "numRows");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return NUM_ROWS;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __NUMROWS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.NUM_ROWS,
          new org.apache.thrift.meta_data.FieldMetaData("numRows",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchN_args.class, metaDataMap);
    }

    public fetchN_args() {
    }

    public fetchN_args(int numRows) {
      this();
      this.numRows = numRows;
      setNumRowsIsSet(true);
    }

    public fetchN_args(fetchN_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.numRows = other.numRows;
    }

    public fetchN_args deepCopy() {
      return new fetchN_args(this);
    }

    @Override
    public void clear() {
      setNumRowsIsSet(false);
      this.numRows = 0;
    }

    public int getNumRows() {
      return this.numRows;
    }

    public void setNumRows(int numRows) {
      this.numRows = numRows;
      setNumRowsIsSet(true);
    }

    public void unsetNumRows() {
      __isset_bit_vector.clear(__NUMROWS_ISSET_ID);
    }

    public boolean isSetNumRows() {
      return __isset_bit_vector.get(__NUMROWS_ISSET_ID);
    }

    public void setNumRowsIsSet(boolean value) {
      __isset_bit_vector.set(__NUMROWS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM_ROWS:
        if (value == null) {
          unsetNumRows();
        } else {
          setNumRows((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM_ROWS:
        return Integer.valueOf(getNumRows());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM_ROWS:
        return isSetNumRows();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchN_args)
        return this.equals((fetchN_args) that);
      return false;
    }

    public boolean equals(fetchN_args that) {
      if (that == null)
        return false;

      boolean this_present_numRows = true;
      boolean that_present_numRows = true;
      if (this_present_numRows || that_present_numRows) {
        if (!(this_present_numRows && that_present_numRows))
          return false;
        if (this.numRows != that.numRows)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchN_args typedOther = (fetchN_args) other;

      lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(
          typedOther.isSetNumRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumRows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows,
            typedOther.numRows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchN_args(");
      boolean first = true;

      sb.append("numRows:");
      sb.append(this.numRows);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchN_argsStandardSchemeFactory implements
        SchemeFactory {
      public fetchN_argsStandardScheme getScheme() {
        return new fetchN_argsStandardScheme();
      }
    }

    private static class fetchN_argsStandardScheme extends
        StandardScheme<fetchN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numRows = iprot.readI32();
              struct.setNumRowsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
        oprot.writeI32(struct.numRows);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchN_argsTupleSchemeFactory implements SchemeFactory {
      public fetchN_argsTupleScheme getScheme() {
        return new fetchN_argsTupleScheme();
      }
    }

    private static class fetchN_argsTupleScheme extends
        TupleScheme<fetchN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumRows()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNumRows()) {
          oprot.writeI32(struct.numRows);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.numRows = iprot.readI32();
          struct.setNumRowsIsSet(true);
        }
      }
    }

  }

  public static class fetchN_result implements
      org.apache.thrift.TBase<fetchN_result, fetchN_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchN_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new fetchN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchN_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchN_result.class, metaDataMap);
    }

    public fetchN_result() {
    }

    public fetchN_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public fetchN_result(fetchN_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public fetchN_result deepCopy() {
      return new fetchN_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchN_result)
        return this.equals((fetchN_result) that);
      return false;
    }

    public boolean equals(fetchN_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchN_result typedOther = (fetchN_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchN_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchN_resultStandardSchemeFactory implements
        SchemeFactory {
      public fetchN_resultStandardScheme getScheme() {
        return new fetchN_resultStandardScheme();
      }
    }

    private static class fetchN_resultStandardScheme extends
        StandardScheme<fetchN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.success = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.success.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter3 : struct.success) {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchN_resultTupleSchemeFactory implements
        SchemeFactory {
      public fetchN_resultTupleScheme getScheme() {
        return new fetchN_resultTupleScheme();
      }
    }

    private static class fetchN_resultTupleScheme extends
        TupleScheme<fetchN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success) {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
              String _elem7;
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class fetchAll_args implements
      org.apache.thrift.TBase<fetchAll_args, fetchAll_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchAll_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new fetchAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchAll_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchAll_args.class, metaDataMap);
    }

    public fetchAll_args() {
    }

    public fetchAll_args(fetchAll_args other) {
    }

    public fetchAll_args deepCopy() {
      return new fetchAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAll_args)
        return this.equals((fetchAll_args) that);
      return false;
    }

    public boolean equals(fetchAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchAll_args typedOther = (fetchAll_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchAll_argsStandardSchemeFactory implements
        SchemeFactory {
      public fetchAll_argsStandardScheme getScheme() {
        return new fetchAll_argsStandardScheme();
      }
    }

    private static class fetchAll_argsStandardScheme extends
        StandardScheme<fetchAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchAll_argsTupleSchemeFactory implements
        SchemeFactory {
      public fetchAll_argsTupleScheme getScheme() {
        return new fetchAll_argsTupleScheme();
      }
    }

    private static class fetchAll_argsTupleScheme extends
        TupleScheme<fetchAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class fetchAll_result implements
      org.apache.thrift.TBase<fetchAll_result, fetchAll_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "fetchAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new fetchAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchAll_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          fetchAll_result.class, metaDataMap);
    }

    public fetchAll_result() {
    }

    public fetchAll_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public fetchAll_result(fetchAll_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public fetchAll_result deepCopy() {
      return new fetchAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAll_result)
        return this.equals((fetchAll_result) that);
      return false;
    }

    public boolean equals(fetchAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchAll_result typedOther = (fetchAll_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchAll_resultStandardSchemeFactory implements
        SchemeFactory {
      public fetchAll_resultStandardScheme getScheme() {
        return new fetchAll_resultStandardScheme();
      }
    }

    private static class fetchAll_resultStandardScheme extends
        StandardScheme<fetchAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          fetchAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.success = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.success.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          fetchAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter11 : struct.success) {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchAll_resultTupleSchemeFactory implements
        SchemeFactory {
      public fetchAll_resultTupleScheme getScheme() {
        return new fetchAll_resultTupleScheme();
      }
    }

    private static class fetchAll_resultTupleScheme extends
        TupleScheme<fetchAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          fetchAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success) {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          fetchAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14) {
              String _elem15;
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSchema_args implements
      org.apache.thrift.TBase<getSchema_args, getSchema_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchema_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchema_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSchema_args.class, metaDataMap);
    }

    public getSchema_args() {
    }

    public getSchema_args(getSchema_args other) {
    }

    public getSchema_args deepCopy() {
      return new getSchema_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_args)
        return this.equals((getSchema_args) that);
      return false;
    }

    public boolean equals(getSchema_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSchema_args typedOther = (getSchema_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchema_argsStandardSchemeFactory implements
        SchemeFactory {
      public getSchema_argsStandardScheme getScheme() {
        return new getSchema_argsStandardScheme();
      }
    }

    private static class getSchema_argsStandardScheme extends
        StandardScheme<getSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_argsTupleSchemeFactory implements
        SchemeFactory {
      public getSchema_argsTupleScheme getScheme() {
        return new getSchema_argsTupleScheme();
      }
    }

    private static class getSchema_argsTupleScheme extends
        TupleScheme<getSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSchema_result implements
      org.apache.thrift.TBase<getSchema_result, getSchema_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSchema_resultTupleSchemeFactory());
    }

    private org.apache.hadoop.hive.metastore.api.Schema success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.hadoop.hive.metastore.api.Schema.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSchema_result.class, metaDataMap);
    }

    public getSchema_result() {
    }

    public getSchema_result(
        org.apache.hadoop.hive.metastore.api.Schema success,
        HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getSchema_result(getSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.hadoop.hive.metastore.api.Schema(
            other.success);
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getSchema_result deepCopy() {
      return new getSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public org.apache.hadoop.hive.metastore.api.Schema getSuccess() {
      return this.success;
    }

    public void setSuccess(org.apache.hadoop.hive.metastore.api.Schema success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.hadoop.hive.metastore.api.Schema) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_result)
        return this.equals((getSchema_result) that);
      return false;
    }

    public boolean equals(getSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSchema_result typedOther = (getSchema_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchema_resultStandardSchemeFactory implements
        SchemeFactory {
      public getSchema_resultStandardScheme getScheme() {
        return new getSchema_resultStandardScheme();
      }
    }

    private static class getSchema_resultStandardScheme extends
        StandardScheme<getSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.success = new org.apache.hadoop.hive.metastore.api.Schema();
              struct.success.read(iprot);
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_resultTupleSchemeFactory implements
        SchemeFactory {
      public getSchema_resultTupleScheme getScheme() {
        return new getSchema_resultTupleScheme();
      }
    }

    private static class getSchema_resultTupleScheme extends
        TupleScheme<getSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.apache.hadoop.hive.metastore.api.Schema();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getThriftSchema_args
      implements
      org.apache.thrift.TBase<getThriftSchema_args, getThriftSchema_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getThriftSchema_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getThriftSchema_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getThriftSchema_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getThriftSchema_args.class, metaDataMap);
    }

    public getThriftSchema_args() {
    }

    public getThriftSchema_args(getThriftSchema_args other) {
    }

    public getThriftSchema_args deepCopy() {
      return new getThriftSchema_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThriftSchema_args)
        return this.equals((getThriftSchema_args) that);
      return false;
    }

    public boolean equals(getThriftSchema_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getThriftSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getThriftSchema_args typedOther = (getThriftSchema_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThriftSchema_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThriftSchema_argsStandardSchemeFactory implements
        SchemeFactory {
      public getThriftSchema_argsStandardScheme getScheme() {
        return new getThriftSchema_argsStandardScheme();
      }
    }

    private static class getThriftSchema_argsStandardScheme extends
        StandardScheme<getThriftSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getThriftSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getThriftSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThriftSchema_argsTupleSchemeFactory implements
        SchemeFactory {
      public getThriftSchema_argsTupleScheme getScheme() {
        return new getThriftSchema_argsTupleScheme();
      }
    }

    private static class getThriftSchema_argsTupleScheme extends
        TupleScheme<getThriftSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getThriftSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getThriftSchema_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getThriftSchema_result
      implements
      org.apache.thrift.TBase<getThriftSchema_result, getThriftSchema_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getThriftSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getThriftSchema_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getThriftSchema_resultTupleSchemeFactory());
    }

    private org.apache.hadoop.hive.metastore.api.Schema success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  org.apache.hadoop.hive.metastore.api.Schema.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getThriftSchema_result.class, metaDataMap);
    }

    public getThriftSchema_result() {
    }

    public getThriftSchema_result(
        org.apache.hadoop.hive.metastore.api.Schema success,
        HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getThriftSchema_result(getThriftSchema_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.hadoop.hive.metastore.api.Schema(
            other.success);
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getThriftSchema_result deepCopy() {
      return new getThriftSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public org.apache.hadoop.hive.metastore.api.Schema getSuccess() {
      return this.success;
    }

    public void setSuccess(org.apache.hadoop.hive.metastore.api.Schema success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.hadoop.hive.metastore.api.Schema) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getThriftSchema_result)
        return this.equals((getThriftSchema_result) that);
      return false;
    }

    public boolean equals(getThriftSchema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getThriftSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getThriftSchema_result typedOther = (getThriftSchema_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getThriftSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getThriftSchema_resultStandardSchemeFactory implements
        SchemeFactory {
      public getThriftSchema_resultStandardScheme getScheme() {
        return new getThriftSchema_resultStandardScheme();
      }
    }

    private static class getThriftSchema_resultStandardScheme extends
        StandardScheme<getThriftSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getThriftSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.success = new org.apache.hadoop.hive.metastore.api.Schema();
              struct.success.read(iprot);
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getThriftSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getThriftSchema_resultTupleSchemeFactory implements
        SchemeFactory {
      public getThriftSchema_resultTupleScheme getScheme() {
        return new getThriftSchema_resultTupleScheme();
      }
    }

    private static class getThriftSchema_resultTupleScheme extends
        TupleScheme<getThriftSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getThriftSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getThriftSchema_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.apache.hadoop.hive.metastore.api.Schema();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getClusterStatus_args
      implements
      org.apache.thrift.TBase<getClusterStatus_args, getClusterStatus_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getClusterStatus_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getClusterStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getClusterStatus_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getClusterStatus_args.class, metaDataMap);
    }

    public getClusterStatus_args() {
    }

    public getClusterStatus_args(getClusterStatus_args other) {
    }

    public getClusterStatus_args deepCopy() {
      return new getClusterStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterStatus_args)
        return this.equals((getClusterStatus_args) that);
      return false;
    }

    public boolean equals(getClusterStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getClusterStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getClusterStatus_args typedOther = (getClusterStatus_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClusterStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterStatus_argsStandardSchemeFactory implements
        SchemeFactory {
      public getClusterStatus_argsStandardScheme getScheme() {
        return new getClusterStatus_argsStandardScheme();
      }
    }

    private static class getClusterStatus_argsStandardScheme extends
        StandardScheme<getClusterStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getClusterStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getClusterStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterStatus_argsTupleSchemeFactory implements
        SchemeFactory {
      public getClusterStatus_argsTupleScheme getScheme() {
        return new getClusterStatus_argsTupleScheme();
      }
    }

    private static class getClusterStatus_argsTupleScheme extends
        TupleScheme<getClusterStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getClusterStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getClusterStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getClusterStatus_result
      implements
      org.apache.thrift.TBase<getClusterStatus_result, getClusterStatus_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getClusterStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getClusterStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getClusterStatus_resultTupleSchemeFactory());
    }

    private HiveClusterStatus success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT,
                  HiveClusterStatus.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getClusterStatus_result.class, metaDataMap);
    }

    public getClusterStatus_result() {
    }

    public getClusterStatus_result(HiveClusterStatus success,
        HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getClusterStatus_result(getClusterStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new HiveClusterStatus(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getClusterStatus_result deepCopy() {
      return new getClusterStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public HiveClusterStatus getSuccess() {
      return this.success;
    }

    public void setSuccess(HiveClusterStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HiveClusterStatus) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterStatus_result)
        return this.equals((getClusterStatus_result) that);
      return false;
    }

    public boolean equals(getClusterStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getClusterStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getClusterStatus_result typedOther = (getClusterStatus_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClusterStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterStatus_resultStandardSchemeFactory implements
        SchemeFactory {
      public getClusterStatus_resultStandardScheme getScheme() {
        return new getClusterStatus_resultStandardScheme();
      }
    }

    private static class getClusterStatus_resultStandardScheme extends
        StandardScheme<getClusterStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getClusterStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.success = new HiveClusterStatus();
              struct.success.read(iprot);
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getClusterStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterStatus_resultTupleSchemeFactory implements
        SchemeFactory {
      public getClusterStatus_resultTupleScheme getScheme() {
        return new getClusterStatus_resultTupleScheme();
      }
    }

    private static class getClusterStatus_resultTupleScheme extends
        TupleScheme<getClusterStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getClusterStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getClusterStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HiveClusterStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class createSession_args implements
      org.apache.thrift.TBase<createSession_args, createSession_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "createSession_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "name", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new createSession_argsStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new createSession_argsTupleSchemeFactory());
    }

    private String name;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short) 1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return NAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData(
          "name", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          createSession_args.class, metaDataMap);
    }

    public createSession_args() {
    }

    public createSession_args(String name) {
      this();
      this.name = name;
    }

    public createSession_args(createSession_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public createSession_args deepCopy() {
      return new createSession_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSession_args)
        return this.equals((createSession_args) that);
      return false;
    }

    public boolean equals(createSession_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSession_args typedOther = (createSession_args) other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(
          typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name,
            typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSession_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSession_argsStandardSchemeFactory implements
        SchemeFactory {
      public createSession_argsStandardScheme getScheme() {
        return new createSession_argsStandardScheme();
      }
    }

    private static class createSession_argsStandardScheme extends
        StandardScheme<createSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          createSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          createSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSession_argsTupleSchemeFactory implements
        SchemeFactory {
      public createSession_argsTupleScheme getScheme() {
        return new createSession_argsTupleScheme();
      }
    }

    private static class createSession_argsTupleScheme extends
        TupleScheme<createSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          createSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          createSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class createSession_result
      implements
      org.apache.thrift.TBase<createSession_result, createSession_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "createSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new createSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new createSession_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          createSession_result.class, metaDataMap);
    }

    public createSession_result() {
    }

    public createSession_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public createSession_result(createSession_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public createSession_result deepCopy() {
      return new createSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSession_result)
        return this.equals((createSession_result) that);
      return false;
    }

    public boolean equals(createSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSession_result typedOther = (createSession_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSession_resultStandardSchemeFactory implements
        SchemeFactory {
      public createSession_resultStandardScheme getScheme() {
        return new createSession_resultStandardScheme();
      }
    }

    private static class createSession_resultStandardScheme extends
        StandardScheme<createSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          createSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17) {
                  String _elem18;
                  _elem18 = iprot.readString();
                  struct.success.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          createSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter19 : struct.success) {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSession_resultTupleSchemeFactory implements
        SchemeFactory {
      public createSession_resultTupleScheme getScheme() {
        return new createSession_resultTupleScheme();
      }
    }

    private static class createSession_resultTupleScheme extends
        TupleScheme<createSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          createSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success) {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          createSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22) {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class requireSession_args
      implements
      org.apache.thrift.TBase<requireSession_args, requireSession_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "requireSession_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SVID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "svid", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new requireSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new requireSession_argsTupleSchemeFactory());
    }

    private String sid;
    private String svid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short) 1, "sid"), SVID((short) 2, "svid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SID;
        case 2:
          return SVID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData(
          "sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SVID, new org.apache.thrift.meta_data.FieldMetaData(
          "svid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          requireSession_args.class, metaDataMap);
    }

    public requireSession_args() {
    }

    public requireSession_args(String sid, String svid) {
      this();
      this.sid = sid;
      this.svid = svid;
    }

    public requireSession_args(requireSession_args other) {
      if (other.isSetSid()) {
        this.sid = other.sid;
      }
      if (other.isSetSvid()) {
        this.svid = other.svid;
      }
    }

    public requireSession_args deepCopy() {
      return new requireSession_args(this);
    }

    @Override
    public void clear() {
      this.sid = null;
      this.svid = null;
    }

    public String getSid() {
      return this.sid;
    }

    public void setSid(String sid) {
      this.sid = sid;
    }

    public void unsetSid() {
      this.sid = null;
    }

    public boolean isSetSid() {
      return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
      if (!value) {
        this.sid = null;
      }
    }

    public String getSvid() {
      return this.svid;
    }

    public void setSvid(String svid) {
      this.svid = svid;
    }

    public void unsetSvid() {
      this.svid = null;
    }

    public boolean isSetSvid() {
      return this.svid != null;
    }

    public void setSvidIsSet(boolean value) {
      if (!value) {
        this.svid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((String) value);
        }
        break;

      case SVID:
        if (value == null) {
          unsetSvid();
        } else {
          setSvid((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case SVID:
        return getSvid();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case SVID:
        return isSetSvid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requireSession_args)
        return this.equals((requireSession_args) that);
      return false;
    }

    public boolean equals(requireSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true && this.isSetSid();
      boolean that_present_sid = true && that.isSetSid();
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (!this.sid.equals(that.sid))
          return false;
      }

      boolean this_present_svid = true && this.isSetSvid();
      boolean that_present_svid = true && that.isSetSvid();
      if (this_present_svid || that_present_svid) {
        if (!(this_present_svid && that_present_svid))
          return false;
        if (!this.svid.equals(that.svid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requireSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requireSession_args typedOther = (requireSession_args) other;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(
          typedOther.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid,
            typedOther.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvid()).compareTo(
          typedOther.isSetSvid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svid,
            typedOther.svid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requireSession_args(");
      boolean first = true;

      sb.append("sid:");
      if (this.sid == null) {
        sb.append("null");
      } else {
        sb.append(this.sid);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("svid:");
      if (this.svid == null) {
        sb.append("null");
      } else {
        sb.append(this.svid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requireSession_argsStandardSchemeFactory implements
        SchemeFactory {
      public requireSession_argsStandardScheme getScheme() {
        return new requireSession_argsStandardScheme();
      }
    }

    private static class requireSession_argsStandardScheme extends
        StandardScheme<requireSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          requireSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.svid = iprot.readString();
              struct.setSvidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          requireSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sid != null) {
          oprot.writeFieldBegin(SID_FIELD_DESC);
          oprot.writeString(struct.sid);
          oprot.writeFieldEnd();
        }
        if (struct.svid != null) {
          oprot.writeFieldBegin(SVID_FIELD_DESC);
          oprot.writeString(struct.svid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requireSession_argsTupleSchemeFactory implements
        SchemeFactory {
      public requireSession_argsTupleScheme getScheme() {
        return new requireSession_argsTupleScheme();
      }
    }

    private static class requireSession_argsTupleScheme extends
        TupleScheme<requireSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          requireSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetSvid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSid()) {
          oprot.writeString(struct.sid);
        }
        if (struct.isSetSvid()) {
          oprot.writeString(struct.svid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          requireSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sid = iprot.readString();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svid = iprot.readString();
          struct.setSvidIsSet(true);
        }
      }
    }

  }

  public static class requireSession_result
      implements
      org.apache.thrift.TBase<requireSession_result, requireSession_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "requireSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new requireSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new requireSession_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          requireSession_result.class, metaDataMap);
    }

    public requireSession_result() {
    }

    public requireSession_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public requireSession_result(requireSession_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public requireSession_result deepCopy() {
      return new requireSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requireSession_result)
        return this.equals((requireSession_result) that);
      return false;
    }

    public boolean equals(requireSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requireSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requireSession_result typedOther = (requireSession_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requireSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requireSession_resultStandardSchemeFactory implements
        SchemeFactory {
      public requireSession_resultStandardScheme getScheme() {
        return new requireSession_resultStandardScheme();
      }
    }

    private static class requireSession_resultStandardScheme extends
        StandardScheme<requireSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          requireSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          requireSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requireSession_resultTupleSchemeFactory implements
        SchemeFactory {
      public requireSession_resultTupleScheme getScheme() {
        return new requireSession_resultTupleScheme();
      }
    }

    private static class requireSession_resultTupleScheme extends
        TupleScheme<requireSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          requireSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          requireSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class detachSession_args implements
      org.apache.thrift.TBase<detachSession_args, detachSession_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "detachSession_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SVID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "svid", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new detachSession_argsStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new detachSession_argsTupleSchemeFactory());
    }

    private String sid;
    private String svid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short) 1, "sid"), SVID((short) 2, "svid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SID;
        case 2:
          return SVID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData(
          "sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SVID, new org.apache.thrift.meta_data.FieldMetaData(
          "svid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          detachSession_args.class, metaDataMap);
    }

    public detachSession_args() {
    }

    public detachSession_args(String sid, String svid) {
      this();
      this.sid = sid;
      this.svid = svid;
    }

    public detachSession_args(detachSession_args other) {
      if (other.isSetSid()) {
        this.sid = other.sid;
      }
      if (other.isSetSvid()) {
        this.svid = other.svid;
      }
    }

    public detachSession_args deepCopy() {
      return new detachSession_args(this);
    }

    @Override
    public void clear() {
      this.sid = null;
      this.svid = null;
    }

    public String getSid() {
      return this.sid;
    }

    public void setSid(String sid) {
      this.sid = sid;
    }

    public void unsetSid() {
      this.sid = null;
    }

    public boolean isSetSid() {
      return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
      if (!value) {
        this.sid = null;
      }
    }

    public String getSvid() {
      return this.svid;
    }

    public void setSvid(String svid) {
      this.svid = svid;
    }

    public void unsetSvid() {
      this.svid = null;
    }

    public boolean isSetSvid() {
      return this.svid != null;
    }

    public void setSvidIsSet(boolean value) {
      if (!value) {
        this.svid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((String) value);
        }
        break;

      case SVID:
        if (value == null) {
          unsetSvid();
        } else {
          setSvid((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case SVID:
        return getSvid();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case SVID:
        return isSetSvid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detachSession_args)
        return this.equals((detachSession_args) that);
      return false;
    }

    public boolean equals(detachSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true && this.isSetSid();
      boolean that_present_sid = true && that.isSetSid();
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (!this.sid.equals(that.sid))
          return false;
      }

      boolean this_present_svid = true && this.isSetSvid();
      boolean that_present_svid = true && that.isSetSvid();
      if (this_present_svid || that_present_svid) {
        if (!(this_present_svid && that_present_svid))
          return false;
        if (!this.svid.equals(that.svid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(detachSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      detachSession_args typedOther = (detachSession_args) other;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(
          typedOther.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid,
            typedOther.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvid()).compareTo(
          typedOther.isSetSvid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svid,
            typedOther.svid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detachSession_args(");
      boolean first = true;

      sb.append("sid:");
      if (this.sid == null) {
        sb.append("null");
      } else {
        sb.append(this.sid);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("svid:");
      if (this.svid == null) {
        sb.append("null");
      } else {
        sb.append(this.svid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detachSession_argsStandardSchemeFactory implements
        SchemeFactory {
      public detachSession_argsStandardScheme getScheme() {
        return new detachSession_argsStandardScheme();
      }
    }

    private static class detachSession_argsStandardScheme extends
        StandardScheme<detachSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          detachSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.svid = iprot.readString();
              struct.setSvidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          detachSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sid != null) {
          oprot.writeFieldBegin(SID_FIELD_DESC);
          oprot.writeString(struct.sid);
          oprot.writeFieldEnd();
        }
        if (struct.svid != null) {
          oprot.writeFieldBegin(SVID_FIELD_DESC);
          oprot.writeString(struct.svid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detachSession_argsTupleSchemeFactory implements
        SchemeFactory {
      public detachSession_argsTupleScheme getScheme() {
        return new detachSession_argsTupleScheme();
      }
    }

    private static class detachSession_argsTupleScheme extends
        TupleScheme<detachSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          detachSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetSvid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSid()) {
          oprot.writeString(struct.sid);
        }
        if (struct.isSetSvid()) {
          oprot.writeString(struct.svid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          detachSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sid = iprot.readString();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svid = iprot.readString();
          struct.setSvidIsSet(true);
        }
      }
    }

  }

  public static class detachSession_result
      implements
      org.apache.thrift.TBase<detachSession_result, detachSession_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "detachSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new detachSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new detachSession_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          detachSession_result.class, metaDataMap);
    }

    public detachSession_result() {
    }

    public detachSession_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public detachSession_result(detachSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public detachSession_result deepCopy() {
      return new detachSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof detachSession_result)
        return this.equals((detachSession_result) that);
      return false;
    }

    public boolean equals(detachSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(detachSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      detachSession_result typedOther = (detachSession_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("detachSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class detachSession_resultStandardSchemeFactory implements
        SchemeFactory {
      public detachSession_resultStandardScheme getScheme() {
        return new detachSession_resultStandardScheme();
      }
    }

    private static class detachSession_resultStandardScheme extends
        StandardScheme<detachSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          detachSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          detachSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class detachSession_resultTupleSchemeFactory implements
        SchemeFactory {
      public detachSession_resultTupleScheme getScheme() {
        return new detachSession_resultTupleScheme();
      }
    }

    private static class detachSession_resultTupleScheme extends
        TupleScheme<detachSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          detachSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          detachSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class dropSession_args implements
      org.apache.thrift.TBase<dropSession_args, dropSession_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "dropSession_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField SVID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "svid", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new dropSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dropSession_argsTupleSchemeFactory());
    }

    private String sid;
    private String svid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short) 1, "sid"), SVID((short) 2, "svid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SID;
        case 2:
          return SVID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData(
          "sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SVID, new org.apache.thrift.meta_data.FieldMetaData(
          "svid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          dropSession_args.class, metaDataMap);
    }

    public dropSession_args() {
    }

    public dropSession_args(String sid, String svid) {
      this();
      this.sid = sid;
      this.svid = svid;
    }

    public dropSession_args(dropSession_args other) {
      if (other.isSetSid()) {
        this.sid = other.sid;
      }
      if (other.isSetSvid()) {
        this.svid = other.svid;
      }
    }

    public dropSession_args deepCopy() {
      return new dropSession_args(this);
    }

    @Override
    public void clear() {
      this.sid = null;
      this.svid = null;
    }

    public String getSid() {
      return this.sid;
    }

    public void setSid(String sid) {
      this.sid = sid;
    }

    public void unsetSid() {
      this.sid = null;
    }

    public boolean isSetSid() {
      return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
      if (!value) {
        this.sid = null;
      }
    }

    public String getSvid() {
      return this.svid;
    }

    public void setSvid(String svid) {
      this.svid = svid;
    }

    public void unsetSvid() {
      this.svid = null;
    }

    public boolean isSetSvid() {
      return this.svid != null;
    }

    public void setSvidIsSet(boolean value) {
      if (!value) {
        this.svid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((String) value);
        }
        break;

      case SVID:
        if (value == null) {
          unsetSvid();
        } else {
          setSvid((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case SVID:
        return getSvid();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case SVID:
        return isSetSvid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropSession_args)
        return this.equals((dropSession_args) that);
      return false;
    }

    public boolean equals(dropSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true && this.isSetSid();
      boolean that_present_sid = true && that.isSetSid();
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (!this.sid.equals(that.sid))
          return false;
      }

      boolean this_present_svid = true && this.isSetSvid();
      boolean that_present_svid = true && that.isSetSvid();
      if (this_present_svid || that_present_svid) {
        if (!(this_present_svid && that_present_svid))
          return false;
        if (!this.svid.equals(that.svid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dropSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dropSession_args typedOther = (dropSession_args) other;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(
          typedOther.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid,
            typedOther.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvid()).compareTo(
          typedOther.isSetSvid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svid,
            typedOther.svid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropSession_args(");
      boolean first = true;

      sb.append("sid:");
      if (this.sid == null) {
        sb.append("null");
      } else {
        sb.append(this.sid);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("svid:");
      if (this.svid == null) {
        sb.append("null");
      } else {
        sb.append(this.svid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropSession_argsStandardSchemeFactory implements
        SchemeFactory {
      public dropSession_argsStandardScheme getScheme() {
        return new dropSession_argsStandardScheme();
      }
    }

    private static class dropSession_argsStandardScheme extends
        StandardScheme<dropSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          dropSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.svid = iprot.readString();
              struct.setSvidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          dropSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sid != null) {
          oprot.writeFieldBegin(SID_FIELD_DESC);
          oprot.writeString(struct.sid);
          oprot.writeFieldEnd();
        }
        if (struct.svid != null) {
          oprot.writeFieldBegin(SVID_FIELD_DESC);
          oprot.writeString(struct.svid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropSession_argsTupleSchemeFactory implements
        SchemeFactory {
      public dropSession_argsTupleScheme getScheme() {
        return new dropSession_argsTupleScheme();
      }
    }

    private static class dropSession_argsTupleScheme extends
        TupleScheme<dropSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          dropSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetSvid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSid()) {
          oprot.writeString(struct.sid);
        }
        if (struct.isSetSvid()) {
          oprot.writeString(struct.svid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          dropSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sid = iprot.readString();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svid = iprot.readString();
          struct.setSvidIsSet(true);
        }
      }
    }

  }

  public static class dropSession_result implements
      org.apache.thrift.TBase<dropSession_result, dropSession_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "dropSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new dropSession_resultStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new dropSession_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          dropSession_result.class, metaDataMap);
    }

    public dropSession_result() {
    }

    public dropSession_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public dropSession_result(dropSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public dropSession_result deepCopy() {
      return new dropSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropSession_result)
        return this.equals((dropSession_result) that);
      return false;
    }

    public boolean equals(dropSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dropSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dropSession_result typedOther = (dropSession_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropSession_resultStandardSchemeFactory implements
        SchemeFactory {
      public dropSession_resultStandardScheme getScheme() {
        return new dropSession_resultStandardScheme();
      }
    }

    private static class dropSession_resultStandardScheme extends
        StandardScheme<dropSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          dropSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          dropSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropSession_resultTupleSchemeFactory implements
        SchemeFactory {
      public dropSession_resultTupleScheme getScheme() {
        return new dropSession_resultTupleScheme();
      }
    }

    private static class dropSession_resultTupleScheme extends
        TupleScheme<dropSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          dropSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          dropSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class showSessions_args implements
      org.apache.thrift.TBase<showSessions_args, showSessions_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "showSessions_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new showSessions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new showSessions_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          showSessions_args.class, metaDataMap);
    }

    public showSessions_args() {
    }

    public showSessions_args(showSessions_args other) {
    }

    public showSessions_args deepCopy() {
      return new showSessions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showSessions_args)
        return this.equals((showSessions_args) that);
      return false;
    }

    public boolean equals(showSessions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(showSessions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      showSessions_args typedOther = (showSessions_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showSessions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showSessions_argsStandardSchemeFactory implements
        SchemeFactory {
      public showSessions_argsStandardScheme getScheme() {
        return new showSessions_argsStandardScheme();
      }
    }

    private static class showSessions_argsStandardScheme extends
        StandardScheme<showSessions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          showSessions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          showSessions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showSessions_argsTupleSchemeFactory implements
        SchemeFactory {
      public showSessions_argsTupleScheme getScheme() {
        return new showSessions_argsTupleScheme();
      }
    }

    private static class showSessions_argsTupleScheme extends
        TupleScheme<showSessions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          showSessions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          showSessions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class showSessions_result
      implements
      org.apache.thrift.TBase<showSessions_result, showSessions_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "showSessions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new showSessions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new showSessions_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          showSessions_result.class, metaDataMap);
    }

    public showSessions_result() {
    }

    public showSessions_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public showSessions_result(showSessions_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public showSessions_result deepCopy() {
      return new showSessions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showSessions_result)
        return this.equals((showSessions_result) that);
      return false;
    }

    public boolean equals(showSessions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(showSessions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      showSessions_result typedOther = (showSessions_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showSessions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showSessions_resultStandardSchemeFactory implements
        SchemeFactory {
      public showSessions_resultStandardScheme getScheme() {
        return new showSessions_resultStandardScheme();
      }
    }

    private static class showSessions_resultStandardScheme extends
        StandardScheme<showSessions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          showSessions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25) {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.success.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          showSessions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter27 : struct.success) {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showSessions_resultTupleSchemeFactory implements
        SchemeFactory {
      public showSessions_resultTupleScheme getScheme() {
        return new showSessions_resultTupleScheme();
      }
    }

    private static class showSessions_resultTupleScheme extends
        TupleScheme<showSessions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          showSessions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success) {
              oprot.writeString(_iter28);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          showSessions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30) {
              String _elem31;
              _elem31 = iprot.readString();
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class uploadJob_args implements
      org.apache.thrift.TBase<uploadJob_args, uploadJob_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadJob_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "job", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadJob_argsTupleSchemeFactory());
    }

    private String job;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short) 1, "job");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return JOB;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData(
          "job", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadJob_args.class, metaDataMap);
    }

    public uploadJob_args() {
    }

    public uploadJob_args(String job) {
      this();
      this.job = job;
    }

    public uploadJob_args(uploadJob_args other) {
      if (other.isSetJob()) {
        this.job = other.job;
      }
    }

    public uploadJob_args deepCopy() {
      return new uploadJob_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
    }

    public String getJob() {
      return this.job;
    }

    public void setJob(String job) {
      this.job = job;
    }

    public void unsetJob() {
      this.job = null;
    }

    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadJob_args)
        return this.equals((uploadJob_args) that);
      return false;
    }

    public boolean equals(uploadJob_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadJob_args typedOther = (uploadJob_args) other;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(
          typedOther.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job,
            typedOther.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadJob_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadJob_argsStandardSchemeFactory implements
        SchemeFactory {
      public uploadJob_argsStandardScheme getScheme() {
        return new uploadJob_argsStandardScheme();
      }
    }

    private static class uploadJob_argsStandardScheme extends
        StandardScheme<uploadJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job = iprot.readString();
              struct.setJobIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          oprot.writeString(struct.job);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadJob_argsTupleSchemeFactory implements
        SchemeFactory {
      public uploadJob_argsTupleScheme getScheme() {
        return new uploadJob_argsTupleScheme();
      }
    }

    private static class uploadJob_argsTupleScheme extends
        TupleScheme<uploadJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJob()) {
          oprot.writeString(struct.job);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.job = iprot.readString();
          struct.setJobIsSet(true);
        }
      }
    }

  }

  public static class uploadJob_result implements
      org.apache.thrift.TBase<uploadJob_result, uploadJob_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadJob_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadJob_result.class, metaDataMap);
    }

    public uploadJob_result() {
    }

    public uploadJob_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public uploadJob_result(uploadJob_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public uploadJob_result deepCopy() {
      return new uploadJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadJob_result)
        return this.equals((uploadJob_result) that);
      return false;
    }

    public boolean equals(uploadJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadJob_result typedOther = (uploadJob_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadJob_resultStandardSchemeFactory implements
        SchemeFactory {
      public uploadJob_resultStandardScheme getScheme() {
        return new uploadJob_resultStandardScheme();
      }
    }

    private static class uploadJob_resultStandardScheme extends
        StandardScheme<uploadJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadJob_resultTupleSchemeFactory implements
        SchemeFactory {
      public uploadJob_resultTupleScheme getScheme() {
        return new uploadJob_resultTupleScheme();
      }
    }

    private static class uploadJob_resultTupleScheme extends
        TupleScheme<uploadJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class killJob_args implements
      org.apache.thrift.TBase<killJob_args, killJob_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "killJob_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new killJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killJob_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          killJob_args.class, metaDataMap);
    }

    public killJob_args() {
    }

    public killJob_args(killJob_args other) {
    }

    public killJob_args deepCopy() {
      return new killJob_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killJob_args)
        return this.equals((killJob_args) that);
      return false;
    }

    public boolean equals(killJob_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(killJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      killJob_args typedOther = (killJob_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killJob_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killJob_argsStandardSchemeFactory implements
        SchemeFactory {
      public killJob_argsStandardScheme getScheme() {
        return new killJob_argsStandardScheme();
      }
    }

    private static class killJob_argsStandardScheme extends
        StandardScheme<killJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          killJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          killJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killJob_argsTupleSchemeFactory implements
        SchemeFactory {
      public killJob_argsTupleScheme getScheme() {
        return new killJob_argsTupleScheme();
      }
    }

    private static class killJob_argsTupleScheme extends
        TupleScheme<killJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          killJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          killJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class killJob_result implements
      org.apache.thrift.TBase<killJob_result, killJob_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "killJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new killJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killJob_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          killJob_result.class, metaDataMap);
    }

    public killJob_result() {
    }

    public killJob_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public killJob_result(killJob_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public killJob_result deepCopy() {
      return new killJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killJob_result)
        return this.equals((killJob_result) that);
      return false;
    }

    public boolean equals(killJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(killJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      killJob_result typedOther = (killJob_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killJob_resultStandardSchemeFactory implements
        SchemeFactory {
      public killJob_resultStandardScheme getScheme() {
        return new killJob_resultStandardScheme();
      }
    }

    private static class killJob_resultStandardScheme extends
        StandardScheme<killJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          killJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          killJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killJob_resultTupleSchemeFactory implements
        SchemeFactory {
      public killJob_resultTupleScheme getScheme() {
        return new killJob_resultTupleScheme();
      }
    }

    private static class killJob_resultTupleScheme extends
        TupleScheme<killJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          killJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          killJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class configJob_args implements
      org.apache.thrift.TBase<configJob_args, configJob_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "configJob_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "config", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new configJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configJob_argsTupleSchemeFactory());
    }

    private String config;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG((short) 1, "config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return CONFIG;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData(
          "config", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          configJob_args.class, metaDataMap);
    }

    public configJob_args() {
    }

    public configJob_args(String config) {
      this();
      this.config = config;
    }

    public configJob_args(configJob_args other) {
      if (other.isSetConfig()) {
        this.config = other.config;
      }
    }

    public configJob_args deepCopy() {
      return new configJob_args(this);
    }

    @Override
    public void clear() {
      this.config = null;
    }

    public String getConfig() {
      return this.config;
    }

    public void setConfig(String config) {
      this.config = config;
    }

    public void unsetConfig() {
      this.config = null;
    }

    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG:
        return getConfig();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG:
        return isSetConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configJob_args)
        return this.equals((configJob_args) that);
      return false;
    }

    public boolean equals(configJob_args that) {
      if (that == null)
        return false;

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(configJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      configJob_args typedOther = (configJob_args) other;

      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(
          typedOther.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config,
            typedOther.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configJob_args(");
      boolean first = true;

      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configJob_argsStandardSchemeFactory implements
        SchemeFactory {
      public configJob_argsStandardScheme getScheme() {
        return new configJob_argsStandardScheme();
      }
    }

    private static class configJob_argsStandardScheme extends
        StandardScheme<configJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          configJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.config = iprot.readString();
              struct.setConfigIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          configJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          oprot.writeString(struct.config);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configJob_argsTupleSchemeFactory implements
        SchemeFactory {
      public configJob_argsTupleScheme getScheme() {
        return new configJob_argsTupleScheme();
      }
    }

    private static class configJob_argsTupleScheme extends
        TupleScheme<configJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          configJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfig()) {
          oprot.writeString(struct.config);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          configJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.config = iprot.readString();
          struct.setConfigIsSet(true);
        }
      }
    }

  }

  public static class configJob_result implements
      org.apache.thrift.TBase<configJob_result, configJob_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "configJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new configJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configJob_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          configJob_result.class, metaDataMap);
    }

    public configJob_result() {
    }

    public configJob_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public configJob_result(configJob_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public configJob_result deepCopy() {
      return new configJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configJob_result)
        return this.equals((configJob_result) that);
      return false;
    }

    public boolean equals(configJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(configJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      configJob_result typedOther = (configJob_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configJob_resultStandardSchemeFactory implements
        SchemeFactory {
      public configJob_resultStandardScheme getScheme() {
        return new configJob_resultStandardScheme();
      }
    }

    private static class configJob_resultStandardScheme extends
        StandardScheme<configJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          configJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          configJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configJob_resultTupleSchemeFactory implements
        SchemeFactory {
      public configJob_resultTupleScheme getScheme() {
        return new configJob_resultTupleScheme();
      }
    }

    private static class configJob_resultTupleScheme extends
        TupleScheme<configJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          configJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          configJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_args implements
      org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobStatus_args");

    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "jobid", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
    }

    private int jobid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOBID((short) 1, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return JOBID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __JOBID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData(
          "jobid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobStatus_args.class, metaDataMap);
    }

    public getJobStatus_args() {
    }

    public getJobStatus_args(int jobid) {
      this();
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public getJobStatus_args(getJobStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.jobid = other.jobid;
    }

    public getJobStatus_args deepCopy() {
      return new getJobStatus_args(this);
    }

    @Override
    public void clear() {
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public int getJobid() {
      return this.jobid;
    }

    public void setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_args)
        return this.equals((getJobStatus_args) that);
      return false;
    }

    public boolean equals(getJobStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_args typedOther = (getJobStatus_args) other;

      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(
          typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid,
            typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_args(");
      boolean first = true;

      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_argsStandardSchemeFactory implements
        SchemeFactory {
      public getJobStatus_argsStandardScheme getScheme() {
        return new getJobStatus_argsStandardScheme();
      }
    }

    private static class getJobStatus_argsStandardScheme extends
        StandardScheme<getJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobid = iprot.readI32();
              struct.setJobidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(JOBID_FIELD_DESC);
        oprot.writeI32(struct.jobid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_argsTupleSchemeFactory implements
        SchemeFactory {
      public getJobStatus_argsTupleScheme getScheme() {
        return new getJobStatus_argsTupleScheme();
      }
    }

    private static class getJobStatus_argsTupleScheme extends
        TupleScheme<getJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobid()) {
          oprot.writeI32(struct.jobid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobid = iprot.readI32();
          struct.setJobidIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_result
      implements
      org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getJobStatus_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobStatus_result.class, metaDataMap);
    }

    public getJobStatus_result() {
    }

    public getJobStatus_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getJobStatus_result(getJobStatus_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getJobStatus_result deepCopy() {
      return new getJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_result)
        return this.equals((getJobStatus_result) that);
      return false;
    }

    public boolean equals(getJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_result typedOther = (getJobStatus_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_resultStandardSchemeFactory implements
        SchemeFactory {
      public getJobStatus_resultStandardScheme getScheme() {
        return new getJobStatus_resultStandardScheme();
      }
    }

    private static class getJobStatus_resultStandardScheme extends
        StandardScheme<getJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33) {
                  String _elem34;
                  _elem34 = iprot.readString();
                  struct.success.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter35 : struct.success) {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_resultTupleSchemeFactory implements
        SchemeFactory {
      public getJobStatus_resultTupleScheme getScheme() {
        return new getJobStatus_resultTupleScheme();
      }
    }

    private static class getJobStatus_resultTupleScheme extends
        TupleScheme<getJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success) {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38) {
              String _elem39;
              _elem39 = iprot.readString();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getEnv_args implements
      org.apache.thrift.TBase<getEnv_args, getEnv_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getEnv_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEnv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnv_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnv_args.class, metaDataMap);
    }

    public getEnv_args() {
    }

    public getEnv_args(getEnv_args other) {
    }

    public getEnv_args deepCopy() {
      return new getEnv_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnv_args)
        return this.equals((getEnv_args) that);
      return false;
    }

    public boolean equals(getEnv_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEnv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEnv_args typedOther = (getEnv_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnv_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnv_argsStandardSchemeFactory implements
        SchemeFactory {
      public getEnv_argsStandardScheme getScheme() {
        return new getEnv_argsStandardScheme();
      }
    }

    private static class getEnv_argsStandardScheme extends
        StandardScheme<getEnv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getEnv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getEnv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnv_argsTupleSchemeFactory implements SchemeFactory {
      public getEnv_argsTupleScheme getScheme() {
        return new getEnv_argsTupleScheme();
      }
    }

    private static class getEnv_argsTupleScheme extends
        TupleScheme<getEnv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getEnv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getEnv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getEnv_result implements
      org.apache.thrift.TBase<getEnv_result, getEnv_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getEnv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getEnv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnv_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnv_result.class, metaDataMap);
    }

    public getEnv_result() {
    }

    public getEnv_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getEnv_result(getEnv_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getEnv_result deepCopy() {
      return new getEnv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEnv_result)
        return this.equals((getEnv_result) that);
      return false;
    }

    public boolean equals(getEnv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEnv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEnv_result typedOther = (getEnv_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnv_resultStandardSchemeFactory implements
        SchemeFactory {
      public getEnv_resultStandardScheme getScheme() {
        return new getEnv_resultStandardScheme();
      }
    }

    private static class getEnv_resultStandardScheme extends
        StandardScheme<getEnv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getEnv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41) {
                  String _elem42;
                  _elem42 = iprot.readString();
                  struct.success.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getEnv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter43 : struct.success) {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEnv_resultTupleSchemeFactory implements
        SchemeFactory {
      public getEnv_resultTupleScheme getScheme() {
        return new getEnv_resultTupleScheme();
      }
    }

    private static class getEnv_resultTupleScheme extends
        TupleScheme<getEnv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getEnv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter44 : struct.success) {
              oprot.writeString(_iter44);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getEnv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46) {
              String _elem47;
              _elem47 = iprot.readString();
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class audit_args implements
      org.apache.thrift.TBase<audit_args, audit_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "audit_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "passwd", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "dbname", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new audit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new audit_argsTupleSchemeFactory());
    }

    private String user;
    private String passwd;
    private String dbname;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user"), PASSWD((short) 2, "passwd"), DBNAME((short) 3,
          "dbname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return USER;
        case 2:
          return PASSWD;
        case 3:
          return DBNAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData(
          "passwd", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData(
          "dbname", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          audit_args.class, metaDataMap);
    }

    public audit_args() {
    }

    public audit_args(String user, String passwd, String dbname) {
      this();
      this.user = user;
      this.passwd = passwd;
      this.dbname = dbname;
    }

    public audit_args(audit_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
    }

    public audit_args deepCopy() {
      return new audit_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.passwd = null;
      this.dbname = null;
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getPasswd() {
      return this.passwd;
    }

    public void setPasswd(String passwd) {
      this.passwd = passwd;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((String) value);
        }
        break;

      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case PASSWD:
        return getPasswd();

      case DBNAME:
        return getDbname();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case PASSWD:
        return isSetPasswd();
      case DBNAME:
        return isSetDbname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof audit_args)
        return this.equals((audit_args) that);
      return false;
    }

    public boolean equals(audit_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(audit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      audit_args typedOther = (audit_args) other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(
          typedOther.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd,
            typedOther.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(
          typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname,
            typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("audit_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class audit_argsStandardSchemeFactory implements
        SchemeFactory {
      public audit_argsStandardScheme getScheme() {
        return new audit_argsStandardScheme();
      }
    }

    private static class audit_argsStandardScheme extends
        StandardScheme<audit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          audit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          audit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class audit_argsTupleSchemeFactory implements SchemeFactory {
      public audit_argsTupleScheme getScheme() {
        return new audit_argsTupleScheme();
      }
    }

    private static class audit_argsTupleScheme extends TupleScheme<audit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          audit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetPasswd()) {
          optionals.set(1);
        }
        if (struct.isSetDbname()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          audit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
      }
    }

  }

  public static class audit_result implements
      org.apache.thrift.TBase<audit_result, audit_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "audit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new audit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new audit_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          audit_result.class, metaDataMap);
    }

    public audit_result() {
    }

    public audit_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public audit_result(audit_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public audit_result deepCopy() {
      return new audit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof audit_result)
        return this.equals((audit_result) that);
      return false;
    }

    public boolean equals(audit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(audit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      audit_result typedOther = (audit_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("audit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class audit_resultStandardSchemeFactory implements
        SchemeFactory {
      public audit_resultStandardScheme getScheme() {
        return new audit_resultStandardScheme();
      }
    }

    private static class audit_resultStandardScheme extends
        StandardScheme<audit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          audit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          audit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class audit_resultTupleSchemeFactory implements
        SchemeFactory {
      public audit_resultTupleScheme getScheme() {
        return new audit_resultTupleScheme();
      }
    }

    private static class audit_resultTupleScheme extends
        TupleScheme<audit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          audit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          audit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class setHistory_args implements
      org.apache.thrift.TBase<setHistory_args, setHistory_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "setHistory_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sid", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "jobid", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new setHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHistory_argsTupleSchemeFactory());
    }

    private String sid;
    private int jobid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short) 1, "sid"), JOBID((short) 2, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SID;
        case 2:
          return JOBID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __JOBID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData(
          "sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData(
          "jobid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          setHistory_args.class, metaDataMap);
    }

    public setHistory_args() {
    }

    public setHistory_args(String sid, int jobid) {
      this();
      this.sid = sid;
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public setHistory_args(setHistory_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSid()) {
        this.sid = other.sid;
      }
      this.jobid = other.jobid;
    }

    public setHistory_args deepCopy() {
      return new setHistory_args(this);
    }

    @Override
    public void clear() {
      this.sid = null;
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public String getSid() {
      return this.sid;
    }

    public void setSid(String sid) {
      this.sid = sid;
    }

    public void unsetSid() {
      this.sid = null;
    }

    public boolean isSetSid() {
      return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
      if (!value) {
        this.sid = null;
      }
    }

    public int getJobid() {
      return this.jobid;
    }

    public void setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((String) value);
        }
        break;

      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHistory_args)
        return this.equals((setHistory_args) that);
      return false;
    }

    public boolean equals(setHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true && this.isSetSid();
      boolean that_present_sid = true && that.isSetSid();
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (!this.sid.equals(that.sid))
          return false;
      }

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHistory_args typedOther = (setHistory_args) other;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(
          typedOther.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid,
            typedOther.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(
          typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid,
            typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHistory_args(");
      boolean first = true;

      sb.append("sid:");
      if (this.sid == null) {
        sb.append("null");
      } else {
        sb.append(this.sid);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHistory_argsStandardSchemeFactory implements
        SchemeFactory {
      public setHistory_argsStandardScheme getScheme() {
        return new setHistory_argsStandardScheme();
      }
    }

    private static class setHistory_argsStandardScheme extends
        StandardScheme<setHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          setHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobid = iprot.readI32();
              struct.setJobidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          setHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sid != null) {
          oprot.writeFieldBegin(SID_FIELD_DESC);
          oprot.writeString(struct.sid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(JOBID_FIELD_DESC);
        oprot.writeI32(struct.jobid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHistory_argsTupleSchemeFactory implements
        SchemeFactory {
      public setHistory_argsTupleScheme getScheme() {
        return new setHistory_argsTupleScheme();
      }
    }

    private static class setHistory_argsTupleScheme extends
        TupleScheme<setHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          setHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetJobid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSid()) {
          oprot.writeString(struct.sid);
        }
        if (struct.isSetJobid()) {
          oprot.writeI32(struct.jobid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          setHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sid = iprot.readString();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jobid = iprot.readI32();
          struct.setJobidIsSet(true);
        }
      }
    }

  }

  public static class setHistory_result implements
      org.apache.thrift.TBase<setHistory_result, setHistory_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "setHistory_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new setHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHistory_resultTupleSchemeFactory());
    }

    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          setHistory_result.class, metaDataMap);
    }

    public setHistory_result() {
    }

    public setHistory_result(HiveServerException ex) {
      this();
      this.ex = ex;
    }

    public setHistory_result(setHistory_result other) {
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public setHistory_result deepCopy() {
      return new setHistory_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHistory_result)
        return this.equals((setHistory_result) that);
      return false;
    }

    public boolean equals(setHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHistory_result typedOther = (setHistory_result) other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHistory_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHistory_resultStandardSchemeFactory implements
        SchemeFactory {
      public setHistory_resultStandardScheme getScheme() {
        return new setHistory_resultStandardScheme();
      }
    }

    private static class setHistory_resultStandardScheme extends
        StandardScheme<setHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          setHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          setHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHistory_resultTupleSchemeFactory implements
        SchemeFactory {
      public setHistory_resultTupleScheme getScheme() {
        return new setHistory_resultTupleScheme();
      }
    }

    private static class setHistory_resultTupleScheme extends
        TupleScheme<setHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          setHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          setHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getHistory_args implements
      org.apache.thrift.TBase<getHistory_args, getHistory_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getHistory_args");

    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "jobid", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistory_argsTupleSchemeFactory());
    }

    private int jobid;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOBID((short) 1, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return JOBID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __JOBID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData(
          "jobid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getHistory_args.class, metaDataMap);
    }

    public getHistory_args() {
    }

    public getHistory_args(int jobid) {
      this();
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public getHistory_args(getHistory_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.jobid = other.jobid;
    }

    public getHistory_args deepCopy() {
      return new getHistory_args(this);
    }

    @Override
    public void clear() {
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public int getJobid() {
      return this.jobid;
    }

    public void setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistory_args)
        return this.equals((getHistory_args) that);
      return false;
    }

    public boolean equals(getHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHistory_args typedOther = (getHistory_args) other;

      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(
          typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid,
            typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistory_args(");
      boolean first = true;

      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistory_argsStandardSchemeFactory implements
        SchemeFactory {
      public getHistory_argsStandardScheme getScheme() {
        return new getHistory_argsStandardScheme();
      }
    }

    private static class getHistory_argsStandardScheme extends
        StandardScheme<getHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobid = iprot.readI32();
              struct.setJobidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(JOBID_FIELD_DESC);
        oprot.writeI32(struct.jobid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistory_argsTupleSchemeFactory implements
        SchemeFactory {
      public getHistory_argsTupleScheme getScheme() {
        return new getHistory_argsTupleScheme();
      }
    }

    private static class getHistory_argsTupleScheme extends
        TupleScheme<getHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobid()) {
          oprot.writeI32(struct.jobid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobid = iprot.readI32();
          struct.setJobidIsSet(true);
        }
      }
    }

  }

  public static class getHistory_result implements
      org.apache.thrift.TBase<getHistory_result, getHistory_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistory_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getHistory_result.class, metaDataMap);
    }

    public getHistory_result() {
    }

    public getHistory_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getHistory_result(getHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getHistory_result deepCopy() {
      return new getHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistory_result)
        return this.equals((getHistory_result) that);
      return false;
    }

    public boolean equals(getHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHistory_result typedOther = (getHistory_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistory_resultStandardSchemeFactory implements
        SchemeFactory {
      public getHistory_resultStandardScheme getScheme() {
        return new getHistory_resultStandardScheme();
      }
    }

    private static class getHistory_resultStandardScheme extends
        StandardScheme<getHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistory_resultTupleSchemeFactory implements
        SchemeFactory {
      public getHistory_resultTupleScheme getScheme() {
        return new getHistory_resultTupleScheme();
      }
    }

    private static class getHistory_resultTupleScheme extends
        TupleScheme<getHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class compile_args implements
      org.apache.thrift.TBase<compile_args, compile_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "compile_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "query", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new compile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compile_argsTupleSchemeFactory());
    }

    private String query;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return QUERY;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData(
          "query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          compile_args.class, metaDataMap);
    }

    public compile_args() {
    }

    public compile_args(String query) {
      this();
      this.query = query;
    }

    public compile_args(compile_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
    }

    public compile_args deepCopy() {
      return new compile_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public String getQuery() {
      return this.query;
    }

    public void setQuery(String query) {
      this.query = query;
    }

    public void unsetQuery() {
      this.query = null;
    }

    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compile_args)
        return this.equals((compile_args) that);
      return false;
    }

    public boolean equals(compile_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compile_args typedOther = (compile_args) other;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(
          typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query,
            typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compile_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compile_argsStandardSchemeFactory implements
        SchemeFactory {
      public compile_argsStandardScheme getScheme() {
        return new compile_argsStandardScheme();
      }
    }

    private static class compile_argsStandardScheme extends
        StandardScheme<compile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          compile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          compile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compile_argsTupleSchemeFactory implements
        SchemeFactory {
      public compile_argsTupleScheme getScheme() {
        return new compile_argsTupleScheme();
      }
    }

    private static class compile_argsTupleScheme extends
        TupleScheme<compile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          compile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          compile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class compile_result implements
      org.apache.thrift.TBase<compile_result, compile_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "compile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new compile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compile_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          compile_result.class, metaDataMap);
    }

    public compile_result() {
    }

    public compile_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public compile_result(compile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public compile_result deepCopy() {
      return new compile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compile_result)
        return this.equals((compile_result) that);
      return false;
    }

    public boolean equals(compile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compile_result typedOther = (compile_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compile_resultStandardSchemeFactory implements
        SchemeFactory {
      public compile_resultStandardScheme getScheme() {
        return new compile_resultStandardScheme();
      }
    }

    private static class compile_resultStandardScheme extends
        StandardScheme<compile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          compile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          compile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compile_resultTupleSchemeFactory implements
        SchemeFactory {
      public compile_resultTupleScheme getScheme() {
        return new compile_resultTupleScheme();
      }
    }

    private static class compile_resultTupleScheme extends
        TupleScheme<compile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          compile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          compile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class upload_args implements
      org.apache.thrift.TBase<upload_args, upload_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "upload_args");

    private static final org.apache.thrift.protocol.TField RTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "rtype", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "fileName", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "data", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upload_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upload_argsTupleSchemeFactory());
    }

    private String rtype;
    private String user;
    private String fileName;
    private String data;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RTYPE((short) 1, "rtype"), USER((short) 2, "user"), FILE_NAME((short) 3,
          "fileName"), DATA((short) 4, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return RTYPE;
        case 2:
          return USER;
        case 3:
          return FILE_NAME;
        case 4:
          return DATA;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.RTYPE, new org.apache.thrift.meta_data.FieldMetaData(
          "rtype", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("fileName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
          "data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          upload_args.class, metaDataMap);
    }

    public upload_args() {
    }

    public upload_args(String rtype, String user, String fileName, String data) {
      this();
      this.rtype = rtype;
      this.user = user;
      this.fileName = fileName;
      this.data = data;
    }

    public upload_args(upload_args other) {
      if (other.isSetRtype()) {
        this.rtype = other.rtype;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public upload_args deepCopy() {
      return new upload_args(this);
    }

    @Override
    public void clear() {
      this.rtype = null;
      this.user = null;
      this.fileName = null;
      this.data = null;
    }

    public String getRtype() {
      return this.rtype;
    }

    public void setRtype(String rtype) {
      this.rtype = rtype;
    }

    public void unsetRtype() {
      this.rtype = null;
    }

    public boolean isSetRtype() {
      return this.rtype != null;
    }

    public void setRtypeIsSet(boolean value) {
      if (!value) {
        this.rtype = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public void setFileName(String fileName) {
      this.fileName = fileName;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public String getData() {
      return this.data;
    }

    public void setData(String data) {
      this.data = data;
    }

    public void unsetData() {
      this.data = null;
    }

    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RTYPE:
        if (value == null) {
          unsetRtype();
        } else {
          setRtype((String) value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String) value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RTYPE:
        return getRtype();

      case USER:
        return getUser();

      case FILE_NAME:
        return getFileName();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RTYPE:
        return isSetRtype();
      case USER:
        return isSetUser();
      case FILE_NAME:
        return isSetFileName();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upload_args)
        return this.equals((upload_args) that);
      return false;
    }

    public boolean equals(upload_args that) {
      if (that == null)
        return false;

      boolean this_present_rtype = true && this.isSetRtype();
      boolean that_present_rtype = true && that.isSetRtype();
      if (this_present_rtype || that_present_rtype) {
        if (!(this_present_rtype && that_present_rtype))
          return false;
        if (!this.rtype.equals(that.rtype))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(upload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      upload_args typedOther = (upload_args) other;

      lastComparison = Boolean.valueOf(isSetRtype()).compareTo(
          typedOther.isSetRtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtype,
            typedOther.rtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(
          typedOther.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName,
            typedOther.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(
          typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
            typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upload_args(");
      boolean first = true;

      sb.append("rtype:");
      if (this.rtype == null) {
        sb.append("null");
      } else {
        sb.append(this.rtype);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upload_argsStandardSchemeFactory implements
        SchemeFactory {
      public upload_argsStandardScheme getScheme() {
        return new upload_argsStandardScheme();
      }
    }

    private static class upload_argsStandardScheme extends
        StandardScheme<upload_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          upload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtype = iprot.readString();
              struct.setRtypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 4:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          upload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rtype != null) {
          oprot.writeFieldBegin(RTYPE_FIELD_DESC);
          oprot.writeString(struct.rtype);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upload_argsTupleSchemeFactory implements SchemeFactory {
      public upload_argsTupleScheme getScheme() {
        return new upload_argsTupleScheme();
      }
    }

    private static class upload_argsTupleScheme extends
        TupleScheme<upload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          upload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRtype()) {
          optionals.set(0);
        }
        if (struct.isSetUser()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetData()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRtype()) {
          oprot.writeString(struct.rtype);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          upload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rtype = iprot.readString();
          struct.setRtypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class upload_result implements
      org.apache.thrift.TBase<upload_result, upload_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "upload_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new upload_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upload_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          upload_result.class, metaDataMap);
    }

    public upload_result() {
    }

    public upload_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public upload_result(upload_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public upload_result deepCopy() {
      return new upload_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upload_result)
        return this.equals((upload_result) that);
      return false;
    }

    public boolean equals(upload_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(upload_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      upload_result typedOther = (upload_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upload_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upload_resultStandardSchemeFactory implements
        SchemeFactory {
      public upload_resultStandardScheme getScheme() {
        return new upload_resultStandardScheme();
      }
    }

    private static class upload_resultStandardScheme extends
        StandardScheme<upload_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          upload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          upload_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upload_resultTupleSchemeFactory implements
        SchemeFactory {
      public upload_resultTupleScheme getScheme() {
        return new upload_resultTupleScheme();
      }
    }

    private static class upload_resultTupleScheme extends
        TupleScheme<upload_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          upload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          upload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class makejar_args implements
      org.apache.thrift.TBase<makejar_args, makejar_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "makejar_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "dbname", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TBLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "tblname", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "filename", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "username", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new makejar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makejar_argsTupleSchemeFactory());
    }

    private String dbname;
    private String tblname;
    private String filename;
    private String username;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short) 1, "dbname"), TBLNAME((short) 2, "tblname"), FILENAME(
          (short) 3, "filename"), USERNAME((short) 4, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return DBNAME;
        case 2:
          return TBLNAME;
        case 3:
          return FILENAME;
        case 4:
          return USERNAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData(
          "dbname", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TBLNAME,
          new org.apache.thrift.meta_data.FieldMetaData("tblname",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME,
          new org.apache.thrift.meta_data.FieldMetaData("filename",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME,
          new org.apache.thrift.meta_data.FieldMetaData("username",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          makejar_args.class, metaDataMap);
    }

    public makejar_args() {
    }

    public makejar_args(String dbname, String tblname, String filename,
        String username) {
      this();
      this.dbname = dbname;
      this.tblname = tblname;
      this.filename = filename;
      this.username = username;
    }

    public makejar_args(makejar_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTblname()) {
        this.tblname = other.tblname;
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public makejar_args deepCopy() {
      return new makejar_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.tblname = null;
      this.filename = null;
      this.username = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTblname() {
      return this.tblname;
    }

    public void setTblname(String tblname) {
      this.tblname = tblname;
    }

    public void unsetTblname() {
      this.tblname = null;
    }

    public boolean isSetTblname() {
      return this.tblname != null;
    }

    public void setTblnameIsSet(boolean value) {
      if (!value) {
        this.tblname = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public void setFilename(String filename) {
      this.filename = filename;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String) value);
        }
        break;

      case TBLNAME:
        if (value == null) {
          unsetTblname();
        } else {
          setTblname((String) value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String) value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TBLNAME:
        return getTblname();

      case FILENAME:
        return getFilename();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TBLNAME:
        return isSetTblname();
      case FILENAME:
        return isSetFilename();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makejar_args)
        return this.equals((makejar_args) that);
      return false;
    }

    public boolean equals(makejar_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tblname = true && this.isSetTblname();
      boolean that_present_tblname = true && that.isSetTblname();
      if (this_present_tblname || that_present_tblname) {
        if (!(this_present_tblname && that_present_tblname))
          return false;
        if (!this.tblname.equals(that.tblname))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makejar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makejar_args typedOther = (makejar_args) other;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(
          typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname,
            typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTblname()).compareTo(
          typedOther.isSetTblname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTblname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblname,
            typedOther.tblname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(
          typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename,
            typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(
          typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username,
            typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makejar_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("tblname:");
      if (this.tblname == null) {
        sb.append("null");
      } else {
        sb.append(this.tblname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makejar_argsStandardSchemeFactory implements
        SchemeFactory {
      public makejar_argsStandardScheme getScheme() {
        return new makejar_argsStandardScheme();
      }
    }

    private static class makejar_argsStandardScheme extends
        StandardScheme<makejar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          makejar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tblname = iprot.readString();
              struct.setTblnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 4:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          makejar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.tblname != null) {
          oprot.writeFieldBegin(TBLNAME_FIELD_DESC);
          oprot.writeString(struct.tblname);
          oprot.writeFieldEnd();
        }
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makejar_argsTupleSchemeFactory implements
        SchemeFactory {
      public makejar_argsTupleScheme getScheme() {
        return new makejar_argsTupleScheme();
      }
    }

    private static class makejar_argsTupleScheme extends
        TupleScheme<makejar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          makejar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTblname()) {
          optionals.set(1);
        }
        if (struct.isSetFilename()) {
          optionals.set(2);
        }
        if (struct.isSetUsername()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTblname()) {
          oprot.writeString(struct.tblname);
        }
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          makejar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tblname = iprot.readString();
          struct.setTblnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class makejar_result implements
      org.apache.thrift.TBase<makejar_result, makejar_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "makejar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new makejar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makejar_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          makejar_result.class, metaDataMap);
    }

    public makejar_result() {
    }

    public makejar_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public makejar_result(makejar_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public makejar_result deepCopy() {
      return new makejar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makejar_result)
        return this.equals((makejar_result) that);
      return false;
    }

    public boolean equals(makejar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makejar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makejar_result typedOther = (makejar_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makejar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makejar_resultStandardSchemeFactory implements
        SchemeFactory {
      public makejar_resultStandardScheme getScheme() {
        return new makejar_resultStandardScheme();
      }
    }

    private static class makejar_resultStandardScheme extends
        StandardScheme<makejar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          makejar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          makejar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makejar_resultTupleSchemeFactory implements
        SchemeFactory {
      public makejar_resultTupleScheme getScheme() {
        return new makejar_resultTupleScheme();
      }
    }

    private static class makejar_resultTupleScheme extends
        TupleScheme<makejar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          makejar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          makejar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class clean_args implements
      org.apache.thrift.TBase<clean_args, clean_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "clean_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clean_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clean_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          clean_args.class, metaDataMap);
    }

    public clean_args() {
    }

    public clean_args(clean_args other) {
    }

    public clean_args deepCopy() {
      return new clean_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clean_args)
        return this.equals((clean_args) that);
      return false;
    }

    public boolean equals(clean_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clean_args typedOther = (clean_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clean_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clean_argsStandardSchemeFactory implements
        SchemeFactory {
      public clean_argsStandardScheme getScheme() {
        return new clean_argsStandardScheme();
      }
    }

    private static class clean_argsStandardScheme extends
        StandardScheme<clean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          clean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          clean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clean_argsTupleSchemeFactory implements SchemeFactory {
      public clean_argsTupleScheme getScheme() {
        return new clean_argsTupleScheme();
      }
    }

    private static class clean_argsTupleScheme extends TupleScheme<clean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          clean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          clean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class clean_result implements
      org.apache.thrift.TBase<clean_result, clean_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "clean_result");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes
          .put(StandardScheme.class, new clean_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clean_resultTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          clean_result.class, metaDataMap);
    }

    public clean_result() {
    }

    public clean_result(clean_result other) {
    }

    public clean_result deepCopy() {
      return new clean_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clean_result)
        return this.equals((clean_result) that);
      return false;
    }

    public boolean equals(clean_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clean_result typedOther = (clean_result) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clean_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clean_resultStandardSchemeFactory implements
        SchemeFactory {
      public clean_resultStandardScheme getScheme() {
        return new clean_resultStandardScheme();
      }
    }

    private static class clean_resultStandardScheme extends
        StandardScheme<clean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          clean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          clean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clean_resultTupleSchemeFactory implements
        SchemeFactory {
      public clean_resultTupleScheme getScheme() {
        return new clean_resultTupleScheme();
      }
    }

    private static class clean_resultTupleScheme extends
        TupleScheme<clean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          clean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          clean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class preproto_args implements
      org.apache.thrift.TBase<preproto_args, preproto_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "preproto_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "dbname", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TBLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "tblname", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "filename", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "username", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new preproto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new preproto_argsTupleSchemeFactory());
    }

    private String dbname;
    private String tblname;
    private String filename;
    private String username;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short) 1, "dbname"), TBLNAME((short) 2, "tblname"), FILENAME(
          (short) 3, "filename"), USERNAME((short) 4, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return DBNAME;
        case 2:
          return TBLNAME;
        case 3:
          return FILENAME;
        case 4:
          return USERNAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData(
          "dbname", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TBLNAME,
          new org.apache.thrift.meta_data.FieldMetaData("tblname",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME,
          new org.apache.thrift.meta_data.FieldMetaData("filename",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME,
          new org.apache.thrift.meta_data.FieldMetaData("username",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          preproto_args.class, metaDataMap);
    }

    public preproto_args() {
    }

    public preproto_args(String dbname, String tblname, String filename,
        String username) {
      this();
      this.dbname = dbname;
      this.tblname = tblname;
      this.filename = filename;
      this.username = username;
    }

    public preproto_args(preproto_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTblname()) {
        this.tblname = other.tblname;
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public preproto_args deepCopy() {
      return new preproto_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.tblname = null;
      this.filename = null;
      this.username = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTblname() {
      return this.tblname;
    }

    public void setTblname(String tblname) {
      this.tblname = tblname;
    }

    public void unsetTblname() {
      this.tblname = null;
    }

    public boolean isSetTblname() {
      return this.tblname != null;
    }

    public void setTblnameIsSet(boolean value) {
      if (!value) {
        this.tblname = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public void setFilename(String filename) {
      this.filename = filename;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String) value);
        }
        break;

      case TBLNAME:
        if (value == null) {
          unsetTblname();
        } else {
          setTblname((String) value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String) value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TBLNAME:
        return getTblname();

      case FILENAME:
        return getFilename();

      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TBLNAME:
        return isSetTblname();
      case FILENAME:
        return isSetFilename();
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof preproto_args)
        return this.equals((preproto_args) that);
      return false;
    }

    public boolean equals(preproto_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tblname = true && this.isSetTblname();
      boolean that_present_tblname = true && that.isSetTblname();
      if (this_present_tblname || that_present_tblname) {
        if (!(this_present_tblname && that_present_tblname))
          return false;
        if (!this.tblname.equals(that.tblname))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(preproto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      preproto_args typedOther = (preproto_args) other;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(
          typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname,
            typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTblname()).compareTo(
          typedOther.isSetTblname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTblname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblname,
            typedOther.tblname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(
          typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename,
            typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(
          typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username,
            typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("preproto_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("tblname:");
      if (this.tblname == null) {
        sb.append("null");
      } else {
        sb.append(this.tblname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class preproto_argsStandardSchemeFactory implements
        SchemeFactory {
      public preproto_argsStandardScheme getScheme() {
        return new preproto_argsStandardScheme();
      }
    }

    private static class preproto_argsStandardScheme extends
        StandardScheme<preproto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          preproto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tblname = iprot.readString();
              struct.setTblnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 4:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          preproto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.tblname != null) {
          oprot.writeFieldBegin(TBLNAME_FIELD_DESC);
          oprot.writeString(struct.tblname);
          oprot.writeFieldEnd();
        }
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class preproto_argsTupleSchemeFactory implements
        SchemeFactory {
      public preproto_argsTupleScheme getScheme() {
        return new preproto_argsTupleScheme();
      }
    }

    private static class preproto_argsTupleScheme extends
        TupleScheme<preproto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          preproto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTblname()) {
          optionals.set(1);
        }
        if (struct.isSetFilename()) {
          optionals.set(2);
        }
        if (struct.isSetUsername()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTblname()) {
          oprot.writeString(struct.tblname);
        }
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          preproto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tblname = iprot.readString();
          struct.setTblnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class preproto_result implements
      org.apache.thrift.TBase<preproto_result, preproto_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "preproto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new preproto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new preproto_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          preproto_result.class, metaDataMap);
    }

    public preproto_result() {
    }

    public preproto_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public preproto_result(preproto_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public preproto_result deepCopy() {
      return new preproto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof preproto_result)
        return this.equals((preproto_result) that);
      return false;
    }

    public boolean equals(preproto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(preproto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      preproto_result typedOther = (preproto_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("preproto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class preproto_resultStandardSchemeFactory implements
        SchemeFactory {
      public preproto_resultStandardScheme getScheme() {
        return new preproto_resultStandardScheme();
      }
    }

    private static class preproto_resultStandardScheme extends
        StandardScheme<preproto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          preproto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          preproto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class preproto_resultTupleSchemeFactory implements
        SchemeFactory {
      public preproto_resultTupleScheme getScheme() {
        return new preproto_resultTupleScheme();
      }
    }

    private static class preproto_resultTupleScheme extends
        TupleScheme<preproto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          preproto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          preproto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class genjar_args implements
      org.apache.thrift.TBase<genjar_args, genjar_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "genjar_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "dbname", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TBLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "tblname", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "filename", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new genjar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new genjar_argsTupleSchemeFactory());
    }

    private String dbname;
    private String tblname;
    private String filename;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short) 1, "dbname"), TBLNAME((short) 2, "tblname"), FILENAME(
          (short) 3, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return DBNAME;
        case 2:
          return TBLNAME;
        case 3:
          return FILENAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData(
          "dbname", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TBLNAME,
          new org.apache.thrift.meta_data.FieldMetaData("tblname",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME,
          new org.apache.thrift.meta_data.FieldMetaData("filename",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          genjar_args.class, metaDataMap);
    }

    public genjar_args() {
    }

    public genjar_args(String dbname, String tblname, String filename) {
      this();
      this.dbname = dbname;
      this.tblname = tblname;
      this.filename = filename;
    }

    public genjar_args(genjar_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTblname()) {
        this.tblname = other.tblname;
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public genjar_args deepCopy() {
      return new genjar_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.tblname = null;
      this.filename = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTblname() {
      return this.tblname;
    }

    public void setTblname(String tblname) {
      this.tblname = tblname;
    }

    public void unsetTblname() {
      this.tblname = null;
    }

    public boolean isSetTblname() {
      return this.tblname != null;
    }

    public void setTblnameIsSet(boolean value) {
      if (!value) {
        this.tblname = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public void setFilename(String filename) {
      this.filename = filename;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String) value);
        }
        break;

      case TBLNAME:
        if (value == null) {
          unsetTblname();
        } else {
          setTblname((String) value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TBLNAME:
        return getTblname();

      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TBLNAME:
        return isSetTblname();
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof genjar_args)
        return this.equals((genjar_args) that);
      return false;
    }

    public boolean equals(genjar_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tblname = true && this.isSetTblname();
      boolean that_present_tblname = true && that.isSetTblname();
      if (this_present_tblname || that_present_tblname) {
        if (!(this_present_tblname && that_present_tblname))
          return false;
        if (!this.tblname.equals(that.tblname))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(genjar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      genjar_args typedOther = (genjar_args) other;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(
          typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname,
            typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTblname()).compareTo(
          typedOther.isSetTblname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTblname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblname,
            typedOther.tblname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(
          typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename,
            typedOther.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("genjar_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("tblname:");
      if (this.tblname == null) {
        sb.append("null");
      } else {
        sb.append(this.tblname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genjar_argsStandardSchemeFactory implements
        SchemeFactory {
      public genjar_argsStandardScheme getScheme() {
        return new genjar_argsStandardScheme();
      }
    }

    private static class genjar_argsStandardScheme extends
        StandardScheme<genjar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          genjar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tblname = iprot.readString();
              struct.setTblnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          genjar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.tblname != null) {
          oprot.writeFieldBegin(TBLNAME_FIELD_DESC);
          oprot.writeString(struct.tblname);
          oprot.writeFieldEnd();
        }
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genjar_argsTupleSchemeFactory implements SchemeFactory {
      public genjar_argsTupleScheme getScheme() {
        return new genjar_argsTupleScheme();
      }
    }

    private static class genjar_argsTupleScheme extends
        TupleScheme<genjar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          genjar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTblname()) {
          optionals.set(1);
        }
        if (struct.isSetFilename()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTblname()) {
          oprot.writeString(struct.tblname);
        }
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          genjar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tblname = iprot.readString();
          struct.setTblnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
      }
    }

  }

  public static class genjar_result implements
      org.apache.thrift.TBase<genjar_result, genjar_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "genjar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new genjar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new genjar_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          genjar_result.class, metaDataMap);
    }

    public genjar_result() {
    }

    public genjar_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public genjar_result(genjar_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public genjar_result deepCopy() {
      return new genjar_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof genjar_result)
        return this.equals((genjar_result) that);
      return false;
    }

    public boolean equals(genjar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(genjar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      genjar_result typedOther = (genjar_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("genjar_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genjar_resultStandardSchemeFactory implements
        SchemeFactory {
      public genjar_resultStandardScheme getScheme() {
        return new genjar_resultStandardScheme();
      }
    }

    private static class genjar_resultStandardScheme extends
        StandardScheme<genjar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          genjar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          genjar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genjar_resultTupleSchemeFactory implements
        SchemeFactory {
      public genjar_resultTupleScheme getScheme() {
        return new genjar_resultTupleScheme();
      }
    }

    private static class genjar_resultTupleScheme extends
        TupleScheme<genjar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          genjar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          genjar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class uploadModule_args implements
      org.apache.thrift.TBase<uploadModule_args, uploadModule_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadModule_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField MODULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "moduleName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField MODULE1_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "module1", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadModule_argsTupleSchemeFactory());
    }

    private String user;
    private String moduleName;
    private ByteBuffer module1;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user"), MODULE_NAME((short) 2, "moduleName"), MODULE1(
          (short) 3, "module1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return USER;
        case 2:
          return MODULE_NAME;
        case 3:
          return MODULE1;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULE_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("moduleName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULE1,
          new org.apache.thrift.meta_data.FieldMetaData("module1",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING, true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadModule_args.class, metaDataMap);
    }

    public uploadModule_args() {
    }

    public uploadModule_args(String user, String moduleName, ByteBuffer module1) {
      this();
      this.user = user;
      this.moduleName = moduleName;
      this.module1 = module1;
    }

    public uploadModule_args(uploadModule_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetModuleName()) {
        this.moduleName = other.moduleName;
      }
      if (other.isSetModule1()) {
        this.module1 = org.apache.thrift.TBaseHelper.copyBinary(other.module1);
        ;
      }
    }

    public uploadModule_args deepCopy() {
      return new uploadModule_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.moduleName = null;
      this.module1 = null;
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getModuleName() {
      return this.moduleName;
    }

    public void setModuleName(String moduleName) {
      this.moduleName = moduleName;
    }

    public void unsetModuleName() {
      this.moduleName = null;
    }

    public boolean isSetModuleName() {
      return this.moduleName != null;
    }

    public void setModuleNameIsSet(boolean value) {
      if (!value) {
        this.moduleName = null;
      }
    }

    public byte[] getModule1() {
      setModule1(org.apache.thrift.TBaseHelper.rightSize(module1));
      return module1 == null ? null : module1.array();
    }

    public ByteBuffer bufferForModule1() {
      return module1;
    }

    public void setModule1(byte[] module1) {
      setModule1(module1 == null ? (ByteBuffer) null : ByteBuffer.wrap(module1));
    }

    public void setModule1(ByteBuffer module1) {
      this.module1 = module1;
    }

    public void unsetModule1() {
      this.module1 = null;
    }

    public boolean isSetModule1() {
      return this.module1 != null;
    }

    public void setModule1IsSet(boolean value) {
      if (!value) {
        this.module1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      case MODULE_NAME:
        if (value == null) {
          unsetModuleName();
        } else {
          setModuleName((String) value);
        }
        break;

      case MODULE1:
        if (value == null) {
          unsetModule1();
        } else {
          setModule1((ByteBuffer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case MODULE_NAME:
        return getModuleName();

      case MODULE1:
        return getModule1();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case MODULE_NAME:
        return isSetModuleName();
      case MODULE1:
        return isSetModule1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadModule_args)
        return this.equals((uploadModule_args) that);
      return false;
    }

    public boolean equals(uploadModule_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_moduleName = true && this.isSetModuleName();
      boolean that_present_moduleName = true && that.isSetModuleName();
      if (this_present_moduleName || that_present_moduleName) {
        if (!(this_present_moduleName && that_present_moduleName))
          return false;
        if (!this.moduleName.equals(that.moduleName))
          return false;
      }

      boolean this_present_module1 = true && this.isSetModule1();
      boolean that_present_module1 = true && that.isSetModule1();
      if (this_present_module1 || that_present_module1) {
        if (!(this_present_module1 && that_present_module1))
          return false;
        if (!this.module1.equals(that.module1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadModule_args typedOther = (uploadModule_args) other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleName()).compareTo(
          typedOther.isSetModuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.moduleName, typedOther.moduleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModule1()).compareTo(
          typedOther.isSetModule1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModule1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.module1,
            typedOther.module1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadModule_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("moduleName:");
      if (this.moduleName == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("module1:");
      if (this.module1 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.module1, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadModule_argsStandardSchemeFactory implements
        SchemeFactory {
      public uploadModule_argsStandardScheme getScheme() {
        return new uploadModule_argsStandardScheme();
      }
    }

    private static class uploadModule_argsStandardScheme extends
        StandardScheme<uploadModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moduleName = iprot.readString();
              struct.setModuleNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.module1 = iprot.readBinary();
              struct.setModule1IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.moduleName != null) {
          oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
          oprot.writeString(struct.moduleName);
          oprot.writeFieldEnd();
        }
        if (struct.module1 != null) {
          oprot.writeFieldBegin(MODULE1_FIELD_DESC);
          oprot.writeBinary(struct.module1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadModule_argsTupleSchemeFactory implements
        SchemeFactory {
      public uploadModule_argsTupleScheme getScheme() {
        return new uploadModule_argsTupleScheme();
      }
    }

    private static class uploadModule_argsTupleScheme extends
        TupleScheme<uploadModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetModuleName()) {
          optionals.set(1);
        }
        if (struct.isSetModule1()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetModuleName()) {
          oprot.writeString(struct.moduleName);
        }
        if (struct.isSetModule1()) {
          oprot.writeBinary(struct.module1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleName = iprot.readString();
          struct.setModuleNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.module1 = iprot.readBinary();
          struct.setModule1IsSet(true);
        }
      }
    }

  }

  public static class uploadModule_result
      implements
      org.apache.thrift.TBase<uploadModule_result, uploadModule_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new uploadModule_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadModule_result.class, metaDataMap);
    }

    public uploadModule_result() {
    }

    public uploadModule_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public uploadModule_result(uploadModule_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public uploadModule_result deepCopy() {
      return new uploadModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadModule_result)
        return this.equals((uploadModule_result) that);
      return false;
    }

    public boolean equals(uploadModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadModule_result typedOther = (uploadModule_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadModule_resultStandardSchemeFactory implements
        SchemeFactory {
      public uploadModule_resultStandardScheme getScheme() {
        return new uploadModule_resultStandardScheme();
      }
    }

    private static class uploadModule_resultStandardScheme extends
        StandardScheme<uploadModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadModule_resultTupleSchemeFactory implements
        SchemeFactory {
      public uploadModule_resultTupleScheme getScheme() {
        return new uploadModule_resultTupleScheme();
      }
    }

    private static class uploadModule_resultTupleScheme extends
        TupleScheme<uploadModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class downloadModule_args
      implements
      org.apache.thrift.TBase<downloadModule_args, downloadModule_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "downloadModule_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField MODULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "moduleName", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new downloadModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new downloadModule_argsTupleSchemeFactory());
    }

    private String user;
    private String moduleName;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user"), MODULE_NAME((short) 2, "moduleName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return USER;
        case 2:
          return MODULE_NAME;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULE_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("moduleName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          downloadModule_args.class, metaDataMap);
    }

    public downloadModule_args() {
    }

    public downloadModule_args(String user, String moduleName) {
      this();
      this.user = user;
      this.moduleName = moduleName;
    }

    public downloadModule_args(downloadModule_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetModuleName()) {
        this.moduleName = other.moduleName;
      }
    }

    public downloadModule_args deepCopy() {
      return new downloadModule_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.moduleName = null;
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getModuleName() {
      return this.moduleName;
    }

    public void setModuleName(String moduleName) {
      this.moduleName = moduleName;
    }

    public void unsetModuleName() {
      this.moduleName = null;
    }

    public boolean isSetModuleName() {
      return this.moduleName != null;
    }

    public void setModuleNameIsSet(boolean value) {
      if (!value) {
        this.moduleName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      case MODULE_NAME:
        if (value == null) {
          unsetModuleName();
        } else {
          setModuleName((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case MODULE_NAME:
        return getModuleName();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case MODULE_NAME:
        return isSetModuleName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadModule_args)
        return this.equals((downloadModule_args) that);
      return false;
    }

    public boolean equals(downloadModule_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_moduleName = true && this.isSetModuleName();
      boolean that_present_moduleName = true && that.isSetModuleName();
      if (this_present_moduleName || that_present_moduleName) {
        if (!(this_present_moduleName && that_present_moduleName))
          return false;
        if (!this.moduleName.equals(that.moduleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(downloadModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      downloadModule_args typedOther = (downloadModule_args) other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleName()).compareTo(
          typedOther.isSetModuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.moduleName, typedOther.moduleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("downloadModule_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("moduleName:");
      if (this.moduleName == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downloadModule_argsStandardSchemeFactory implements
        SchemeFactory {
      public downloadModule_argsStandardScheme getScheme() {
        return new downloadModule_argsStandardScheme();
      }
    }

    private static class downloadModule_argsStandardScheme extends
        StandardScheme<downloadModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          downloadModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moduleName = iprot.readString();
              struct.setModuleNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          downloadModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.moduleName != null) {
          oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
          oprot.writeString(struct.moduleName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downloadModule_argsTupleSchemeFactory implements
        SchemeFactory {
      public downloadModule_argsTupleScheme getScheme() {
        return new downloadModule_argsTupleScheme();
      }
    }

    private static class downloadModule_argsTupleScheme extends
        TupleScheme<downloadModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          downloadModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetModuleName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetModuleName()) {
          oprot.writeString(struct.moduleName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          downloadModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleName = iprot.readString();
          struct.setModuleNameIsSet(true);
        }
      }
    }

  }

  public static class downloadModule_result
      implements
      org.apache.thrift.TBase<downloadModule_result, downloadModule_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "downloadModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new downloadModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new downloadModule_resultTupleSchemeFactory());
    }

    private ByteBuffer success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING, true)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          downloadModule_result.class, metaDataMap);
    }

    public downloadModule_result() {
    }

    public downloadModule_result(ByteBuffer success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public downloadModule_result(downloadModule_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
        ;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public downloadModule_result deepCopy() {
      return new downloadModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public void setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer) null : ByteBuffer.wrap(success));
    }

    public void setSuccess(ByteBuffer success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadModule_result)
        return this.equals((downloadModule_result) that);
      return false;
    }

    public boolean equals(downloadModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(downloadModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      downloadModule_result typedOther = (downloadModule_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("downloadModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downloadModule_resultStandardSchemeFactory implements
        SchemeFactory {
      public downloadModule_resultStandardScheme getScheme() {
        return new downloadModule_resultStandardScheme();
      }
    }

    private static class downloadModule_resultStandardScheme extends
        StandardScheme<downloadModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          downloadModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readBinary();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          downloadModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downloadModule_resultTupleSchemeFactory implements
        SchemeFactory {
      public downloadModule_resultTupleScheme getScheme() {
        return new downloadModule_resultTupleScheme();
      }
    }

    private static class downloadModule_resultTupleScheme extends
        TupleScheme<downloadModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          downloadModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          downloadModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class listModule_args implements
      org.apache.thrift.TBase<listModule_args, listModule_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "listModule_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new listModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listModule_argsTupleSchemeFactory());
    }

    private String user;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return USER;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          listModule_args.class, metaDataMap);
    }

    public listModule_args() {
    }

    public listModule_args(String user) {
      this();
      this.user = user;
    }

    public listModule_args(listModule_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }

    public listModule_args deepCopy() {
      return new listModule_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listModule_args)
        return this.equals((listModule_args) that);
      return false;
    }

    public boolean equals(listModule_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listModule_args typedOther = (listModule_args) other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listModule_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listModule_argsStandardSchemeFactory implements
        SchemeFactory {
      public listModule_argsStandardScheme getScheme() {
        return new listModule_argsStandardScheme();
      }
    }

    private static class listModule_argsStandardScheme extends
        StandardScheme<listModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          listModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          listModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listModule_argsTupleSchemeFactory implements
        SchemeFactory {
      public listModule_argsTupleScheme getScheme() {
        return new listModule_argsTupleScheme();
      }
    }

    private static class listModule_argsTupleScheme extends
        TupleScheme<listModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          listModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          listModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class listModule_result implements
      org.apache.thrift.TBase<listModule_result, listModule_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "listModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new listModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listModule_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          listModule_result.class, metaDataMap);
    }

    public listModule_result() {
    }

    public listModule_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public listModule_result(listModule_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public listModule_result deepCopy() {
      return new listModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listModule_result)
        return this.equals((listModule_result) that);
      return false;
    }

    public boolean equals(listModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listModule_result typedOther = (listModule_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listModule_resultStandardSchemeFactory implements
        SchemeFactory {
      public listModule_resultStandardScheme getScheme() {
        return new listModule_resultStandardScheme();
      }
    }

    private static class listModule_resultStandardScheme extends
        StandardScheme<listModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          listModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49) {
                  String _elem50;
                  _elem50 = iprot.readString();
                  struct.success.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          listModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter51 : struct.success) {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listModule_resultTupleSchemeFactory implements
        SchemeFactory {
      public listModule_resultTupleScheme getScheme() {
        return new listModule_resultTupleScheme();
      }
    }

    private static class listModule_resultTupleScheme extends
        TupleScheme<listModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          listModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter52 : struct.success) {
              oprot.writeString(_iter52);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          listModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54) {
              String _elem55;
              _elem55 = iprot.readString();
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getRowCount_args implements
      org.apache.thrift.TBase<getRowCount_args, getRowCount_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getRowCount_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getRowCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRowCount_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getRowCount_args.class, metaDataMap);
    }

    public getRowCount_args() {
    }

    public getRowCount_args(getRowCount_args other) {
    }

    public getRowCount_args deepCopy() {
      return new getRowCount_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRowCount_args)
        return this.equals((getRowCount_args) that);
      return false;
    }

    public boolean equals(getRowCount_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRowCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRowCount_args typedOther = (getRowCount_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRowCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRowCount_argsStandardSchemeFactory implements
        SchemeFactory {
      public getRowCount_argsStandardScheme getScheme() {
        return new getRowCount_argsStandardScheme();
      }
    }

    private static class getRowCount_argsStandardScheme extends
        StandardScheme<getRowCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getRowCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getRowCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRowCount_argsTupleSchemeFactory implements
        SchemeFactory {
      public getRowCount_argsTupleScheme getScheme() {
        return new getRowCount_argsTupleScheme();
      }
    }

    private static class getRowCount_argsTupleScheme extends
        TupleScheme<getRowCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getRowCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getRowCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRowCount_result implements
      org.apache.thrift.TBase<getRowCount_result, getRowCount_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getRowCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getRowCount_resultStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new getRowCount_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getRowCount_result.class, metaDataMap);
    }

    public getRowCount_result() {
    }

    public getRowCount_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getRowCount_result(getRowCount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getRowCount_result deepCopy() {
      return new getRowCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRowCount_result)
        return this.equals((getRowCount_result) that);
      return false;
    }

    public boolean equals(getRowCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRowCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRowCount_result typedOther = (getRowCount_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRowCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRowCount_resultStandardSchemeFactory implements
        SchemeFactory {
      public getRowCount_resultStandardScheme getScheme() {
        return new getRowCount_resultStandardScheme();
      }
    }

    private static class getRowCount_resultStandardScheme extends
        StandardScheme<getRowCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getRowCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getRowCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRowCount_resultTupleSchemeFactory implements
        SchemeFactory {
      public getRowCount_resultTupleScheme getScheme() {
        return new getRowCount_resultTupleScheme();
      }
    }

    private static class getRowCount_resultTupleScheme extends
        TupleScheme<getRowCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getRowCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getRowCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSQLProcess_args implements
      org.apache.thrift.TBase<getSQLProcess_args, getSQLProcess_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSQLProcess_args");

    private static final org.apache.thrift.protocol.TField SQL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sqlID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSQLProcess_argsStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new getSQLProcess_argsTupleSchemeFactory());
    }

    private String sqlID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ID((short) 1, "sqlID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL_ID, new org.apache.thrift.meta_data.FieldMetaData(
          "sqlID", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSQLProcess_args.class, metaDataMap);
    }

    public getSQLProcess_args() {
    }

    public getSQLProcess_args(String sqlID) {
      this();
      this.sqlID = sqlID;
    }

    public getSQLProcess_args(getSQLProcess_args other) {
      if (other.isSetSqlID()) {
        this.sqlID = other.sqlID;
      }
    }

    public getSQLProcess_args deepCopy() {
      return new getSQLProcess_args(this);
    }

    @Override
    public void clear() {
      this.sqlID = null;
    }

    public String getSqlID() {
      return this.sqlID;
    }

    public void setSqlID(String sqlID) {
      this.sqlID = sqlID;
    }

    public void unsetSqlID() {
      this.sqlID = null;
    }

    public boolean isSetSqlID() {
      return this.sqlID != null;
    }

    public void setSqlIDIsSet(boolean value) {
      if (!value) {
        this.sqlID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ID:
        if (value == null) {
          unsetSqlID();
        } else {
          setSqlID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ID:
        return getSqlID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ID:
        return isSetSqlID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSQLProcess_args)
        return this.equals((getSQLProcess_args) that);
      return false;
    }

    public boolean equals(getSQLProcess_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlID = true && this.isSetSqlID();
      boolean that_present_sqlID = true && that.isSetSqlID();
      if (this_present_sqlID || that_present_sqlID) {
        if (!(this_present_sqlID && that_present_sqlID))
          return false;
        if (!this.sqlID.equals(that.sqlID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSQLProcess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSQLProcess_args typedOther = (getSQLProcess_args) other;

      lastComparison = Boolean.valueOf(isSetSqlID()).compareTo(
          typedOther.isSetSqlID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlID,
            typedOther.sqlID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSQLProcess_args(");
      boolean first = true;

      sb.append("sqlID:");
      if (this.sqlID == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSQLProcess_argsStandardSchemeFactory implements
        SchemeFactory {
      public getSQLProcess_argsStandardScheme getScheme() {
        return new getSQLProcess_argsStandardScheme();
      }
    }

    private static class getSQLProcess_argsStandardScheme extends
        StandardScheme<getSQLProcess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSQLProcess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlID = iprot.readString();
              struct.setSqlIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSQLProcess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlID != null) {
          oprot.writeFieldBegin(SQL_ID_FIELD_DESC);
          oprot.writeString(struct.sqlID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSQLProcess_argsTupleSchemeFactory implements
        SchemeFactory {
      public getSQLProcess_argsTupleScheme getScheme() {
        return new getSQLProcess_argsTupleScheme();
      }
    }

    private static class getSQLProcess_argsTupleScheme extends
        TupleScheme<getSQLProcess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSQLProcess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlID()) {
          oprot.writeString(struct.sqlID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSQLProcess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlID = iprot.readString();
          struct.setSqlIDIsSet(true);
        }
      }
    }

  }

  public static class getSQLProcess_result
      implements
      org.apache.thrift.TBase<getSQLProcess_result, getSQLProcess_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSQLProcess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSQLProcess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getSQLProcess_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSQLProcess_result.class, metaDataMap);
    }

    public getSQLProcess_result() {
    }

    public getSQLProcess_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public getSQLProcess_result(getSQLProcess_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getSQLProcess_result deepCopy() {
      return new getSQLProcess_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSQLProcess_result)
        return this.equals((getSQLProcess_result) that);
      return false;
    }

    public boolean equals(getSQLProcess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSQLProcess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSQLProcess_result typedOther = (getSQLProcess_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSQLProcess_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSQLProcess_resultStandardSchemeFactory implements
        SchemeFactory {
      public getSQLProcess_resultStandardScheme getScheme() {
        return new getSQLProcess_resultStandardScheme();
      }
    }

    private static class getSQLProcess_resultStandardScheme extends
        StandardScheme<getSQLProcess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSQLProcess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSQLProcess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSQLProcess_resultTupleSchemeFactory implements
        SchemeFactory {
      public getSQLProcess_resultTupleScheme getScheme() {
        return new getSQLProcess_resultTupleScheme();
      }
    }

    private static class getSQLProcess_resultTupleScheme extends
        TupleScheme<getSQLProcess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSQLProcess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSQLProcess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class killSQLQuery_args implements
      org.apache.thrift.TBase<killSQLQuery_args, killSQLQuery_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "killSQLQuery_args");

    private static final org.apache.thrift.protocol.TField SQL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sqlID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new killSQLQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killSQLQuery_argsTupleSchemeFactory());
    }

    private String sqlID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ID((short) 1, "sqlID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL_ID, new org.apache.thrift.meta_data.FieldMetaData(
          "sqlID", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          killSQLQuery_args.class, metaDataMap);
    }

    public killSQLQuery_args() {
    }

    public killSQLQuery_args(String sqlID) {
      this();
      this.sqlID = sqlID;
    }

    public killSQLQuery_args(killSQLQuery_args other) {
      if (other.isSetSqlID()) {
        this.sqlID = other.sqlID;
      }
    }

    public killSQLQuery_args deepCopy() {
      return new killSQLQuery_args(this);
    }

    @Override
    public void clear() {
      this.sqlID = null;
    }

    public String getSqlID() {
      return this.sqlID;
    }

    public void setSqlID(String sqlID) {
      this.sqlID = sqlID;
    }

    public void unsetSqlID() {
      this.sqlID = null;
    }

    public boolean isSetSqlID() {
      return this.sqlID != null;
    }

    public void setSqlIDIsSet(boolean value) {
      if (!value) {
        this.sqlID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ID:
        if (value == null) {
          unsetSqlID();
        } else {
          setSqlID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ID:
        return getSqlID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ID:
        return isSetSqlID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killSQLQuery_args)
        return this.equals((killSQLQuery_args) that);
      return false;
    }

    public boolean equals(killSQLQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlID = true && this.isSetSqlID();
      boolean that_present_sqlID = true && that.isSetSqlID();
      if (this_present_sqlID || that_present_sqlID) {
        if (!(this_present_sqlID && that_present_sqlID))
          return false;
        if (!this.sqlID.equals(that.sqlID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(killSQLQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      killSQLQuery_args typedOther = (killSQLQuery_args) other;

      lastComparison = Boolean.valueOf(isSetSqlID()).compareTo(
          typedOther.isSetSqlID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlID,
            typedOther.sqlID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killSQLQuery_args(");
      boolean first = true;

      sb.append("sqlID:");
      if (this.sqlID == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killSQLQuery_argsStandardSchemeFactory implements
        SchemeFactory {
      public killSQLQuery_argsStandardScheme getScheme() {
        return new killSQLQuery_argsStandardScheme();
      }
    }

    private static class killSQLQuery_argsStandardScheme extends
        StandardScheme<killSQLQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          killSQLQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlID = iprot.readString();
              struct.setSqlIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          killSQLQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlID != null) {
          oprot.writeFieldBegin(SQL_ID_FIELD_DESC);
          oprot.writeString(struct.sqlID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killSQLQuery_argsTupleSchemeFactory implements
        SchemeFactory {
      public killSQLQuery_argsTupleScheme getScheme() {
        return new killSQLQuery_argsTupleScheme();
      }
    }

    private static class killSQLQuery_argsTupleScheme extends
        TupleScheme<killSQLQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          killSQLQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlID()) {
          oprot.writeString(struct.sqlID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          killSQLQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlID = iprot.readString();
          struct.setSqlIDIsSet(true);
        }
      }
    }

  }

  public static class killSQLQuery_result
      implements
      org.apache.thrift.TBase<killSQLQuery_result, killSQLQuery_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "killSQLQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new killSQLQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new killSQLQuery_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          killSQLQuery_result.class, metaDataMap);
    }

    public killSQLQuery_result() {
    }

    public killSQLQuery_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public killSQLQuery_result(killSQLQuery_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public killSQLQuery_result deepCopy() {
      return new killSQLQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killSQLQuery_result)
        return this.equals((killSQLQuery_result) that);
      return false;
    }

    public boolean equals(killSQLQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(killSQLQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      killSQLQuery_result typedOther = (killSQLQuery_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killSQLQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killSQLQuery_resultStandardSchemeFactory implements
        SchemeFactory {
      public killSQLQuery_resultStandardScheme getScheme() {
        return new killSQLQuery_resultStandardScheme();
      }
    }

    private static class killSQLQuery_resultStandardScheme extends
        StandardScheme<killSQLQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          killSQLQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          killSQLQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killSQLQuery_resultTupleSchemeFactory implements
        SchemeFactory {
      public killSQLQuery_resultTupleScheme getScheme() {
        return new killSQLQuery_resultTupleScheme();
      }
    }

    private static class killSQLQuery_resultTupleScheme extends
        TupleScheme<killSQLQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          killSQLQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          killSQLQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class dataSync_args implements
      org.apache.thrift.TBase<dataSync_args, dataSync_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "dataSync_args");

    private static final org.apache.thrift.protocol.TField CREATE_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "createSQL", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "tableName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "data", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField PART_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "partName", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField SUB_PART_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "subPartName", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "mode", org.apache.thrift.protocol.TType.I32, (short) 6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new dataSync_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSync_argsTupleSchemeFactory());
    }

    private String createSQL;
    private String tableName;
    private String data;
    private String partName;
    private String subPartName;
    private int mode;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_SQL((short) 1, "createSQL"), TABLE_NAME((short) 2, "tableName"), DATA(
          (short) 3, "data"), PART_NAME((short) 4, "partName"), SUB_PART_NAME(
          (short) 5, "subPartName"), MODE((short) 6, "mode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return CREATE_SQL;
        case 2:
          return TABLE_NAME;
        case 3:
          return DATA;
        case 4:
          return PART_NAME;
        case 5:
          return SUB_PART_NAME;
        case 6:
          return MODE;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __MODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.CREATE_SQL,
          new org.apache.thrift.meta_data.FieldMetaData("createSQL",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("tableName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
          "data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PART_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("partName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_PART_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("subPartName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData(
          "mode", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          dataSync_args.class, metaDataMap);
    }

    public dataSync_args() {
    }

    public dataSync_args(String createSQL, String tableName, String data,
        String partName, String subPartName, int mode) {
      this();
      this.createSQL = createSQL;
      this.tableName = tableName;
      this.data = data;
      this.partName = partName;
      this.subPartName = subPartName;
      this.mode = mode;
      setModeIsSet(true);
    }

    public dataSync_args(dataSync_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCreateSQL()) {
        this.createSQL = other.createSQL;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
      if (other.isSetPartName()) {
        this.partName = other.partName;
      }
      if (other.isSetSubPartName()) {
        this.subPartName = other.subPartName;
      }
      this.mode = other.mode;
    }

    public dataSync_args deepCopy() {
      return new dataSync_args(this);
    }

    @Override
    public void clear() {
      this.createSQL = null;
      this.tableName = null;
      this.data = null;
      this.partName = null;
      this.subPartName = null;
      setModeIsSet(false);
      this.mode = 0;
    }

    public String getCreateSQL() {
      return this.createSQL;
    }

    public void setCreateSQL(String createSQL) {
      this.createSQL = createSQL;
    }

    public void unsetCreateSQL() {
      this.createSQL = null;
    }

    public boolean isSetCreateSQL() {
      return this.createSQL != null;
    }

    public void setCreateSQLIsSet(boolean value) {
      if (!value) {
        this.createSQL = null;
      }
    }

    public String getTableName() {
      return this.tableName;
    }

    public void setTableName(String tableName) {
      this.tableName = tableName;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public String getData() {
      return this.data;
    }

    public void setData(String data) {
      this.data = data;
    }

    public void unsetData() {
      this.data = null;
    }

    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getPartName() {
      return this.partName;
    }

    public void setPartName(String partName) {
      this.partName = partName;
    }

    public void unsetPartName() {
      this.partName = null;
    }

    public boolean isSetPartName() {
      return this.partName != null;
    }

    public void setPartNameIsSet(boolean value) {
      if (!value) {
        this.partName = null;
      }
    }

    public String getSubPartName() {
      return this.subPartName;
    }

    public void setSubPartName(String subPartName) {
      this.subPartName = subPartName;
    }

    public void unsetSubPartName() {
      this.subPartName = null;
    }

    public boolean isSetSubPartName() {
      return this.subPartName != null;
    }

    public void setSubPartNameIsSet(boolean value) {
      if (!value) {
        this.subPartName = null;
      }
    }

    public int getMode() {
      return this.mode;
    }

    public void setMode(int mode) {
      this.mode = mode;
      setModeIsSet(true);
    }

    public void unsetMode() {
      __isset_bit_vector.clear(__MODE_ISSET_ID);
    }

    public boolean isSetMode() {
      return __isset_bit_vector.get(__MODE_ISSET_ID);
    }

    public void setModeIsSet(boolean value) {
      __isset_bit_vector.set(__MODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREATE_SQL:
        if (value == null) {
          unsetCreateSQL();
        } else {
          setCreateSQL((String) value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((String) value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String) value);
        }
        break;

      case PART_NAME:
        if (value == null) {
          unsetPartName();
        } else {
          setPartName((String) value);
        }
        break;

      case SUB_PART_NAME:
        if (value == null) {
          unsetSubPartName();
        } else {
          setSubPartName((String) value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_SQL:
        return getCreateSQL();

      case TABLE_NAME:
        return getTableName();

      case DATA:
        return getData();

      case PART_NAME:
        return getPartName();

      case SUB_PART_NAME:
        return getSubPartName();

      case MODE:
        return Integer.valueOf(getMode());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREATE_SQL:
        return isSetCreateSQL();
      case TABLE_NAME:
        return isSetTableName();
      case DATA:
        return isSetData();
      case PART_NAME:
        return isSetPartName();
      case SUB_PART_NAME:
        return isSetSubPartName();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSync_args)
        return this.equals((dataSync_args) that);
      return false;
    }

    public boolean equals(dataSync_args that) {
      if (that == null)
        return false;

      boolean this_present_createSQL = true && this.isSetCreateSQL();
      boolean that_present_createSQL = true && that.isSetCreateSQL();
      if (this_present_createSQL || that_present_createSQL) {
        if (!(this_present_createSQL && that_present_createSQL))
          return false;
        if (!this.createSQL.equals(that.createSQL))
          return false;
      }

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_partName = true && this.isSetPartName();
      boolean that_present_partName = true && that.isSetPartName();
      if (this_present_partName || that_present_partName) {
        if (!(this_present_partName && that_present_partName))
          return false;
        if (!this.partName.equals(that.partName))
          return false;
      }

      boolean this_present_subPartName = true && this.isSetSubPartName();
      boolean that_present_subPartName = true && that.isSetSubPartName();
      if (this_present_subPartName || that_present_subPartName) {
        if (!(this_present_subPartName && that_present_subPartName))
          return false;
        if (!this.subPartName.equals(that.subPartName))
          return false;
      }

      boolean this_present_mode = true;
      boolean that_present_mode = true;
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (this.mode != that.mode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dataSync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dataSync_args typedOther = (dataSync_args) other;

      lastComparison = Boolean.valueOf(isSetCreateSQL()).compareTo(
          typedOther.isSetCreateSQL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateSQL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.createSQL, typedOther.createSQL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(
          typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(
          typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
            typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartName()).compareTo(
          typedOther.isSetPartName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partName,
            typedOther.partName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubPartName()).compareTo(
          typedOther.isSetSubPartName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubPartName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.subPartName, typedOther.subPartName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(
          typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode,
            typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSync_args(");
      boolean first = true;

      sb.append("createSQL:");
      if (this.createSQL == null) {
        sb.append("null");
      } else {
        sb.append(this.createSQL);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("partName:");
      if (this.partName == null) {
        sb.append("null");
      } else {
        sb.append(this.partName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("subPartName:");
      if (this.subPartName == null) {
        sb.append("null");
      } else {
        sb.append(this.subPartName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSync_argsStandardSchemeFactory implements
        SchemeFactory {
      public dataSync_argsStandardScheme getScheme() {
        return new dataSync_argsStandardScheme();
      }
    }

    private static class dataSync_argsStandardScheme extends
        StandardScheme<dataSync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          dataSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSQL = iprot.readString();
              struct.setCreateSQLIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 4:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partName = iprot.readString();
              struct.setPartNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 5:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subPartName = iprot.readString();
              struct.setSubPartNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 6:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = iprot.readI32();
              struct.setModeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          dataSync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.createSQL != null) {
          oprot.writeFieldBegin(CREATE_SQL_FIELD_DESC);
          oprot.writeString(struct.createSQL);
          oprot.writeFieldEnd();
        }
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.partName != null) {
          oprot.writeFieldBegin(PART_NAME_FIELD_DESC);
          oprot.writeString(struct.partName);
          oprot.writeFieldEnd();
        }
        if (struct.subPartName != null) {
          oprot.writeFieldBegin(SUB_PART_NAME_FIELD_DESC);
          oprot.writeString(struct.subPartName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSync_argsTupleSchemeFactory implements
        SchemeFactory {
      public dataSync_argsTupleScheme getScheme() {
        return new dataSync_argsTupleScheme();
      }
    }

    private static class dataSync_argsTupleScheme extends
        TupleScheme<dataSync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          dataSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCreateSQL()) {
          optionals.set(0);
        }
        if (struct.isSetTableName()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        if (struct.isSetPartName()) {
          optionals.set(3);
        }
        if (struct.isSetSubPartName()) {
          optionals.set(4);
        }
        if (struct.isSetMode()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetCreateSQL()) {
          oprot.writeString(struct.createSQL);
        }
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetPartName()) {
          oprot.writeString(struct.partName);
        }
        if (struct.isSetSubPartName()) {
          oprot.writeString(struct.subPartName);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          dataSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.createSQL = iprot.readString();
          struct.setCreateSQLIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.partName = iprot.readString();
          struct.setPartNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.subPartName = iprot.readString();
          struct.setSubPartNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.mode = iprot.readI32();
          struct.setModeIsSet(true);
        }
      }
    }

  }

  public static class dataSync_result implements
      org.apache.thrift.TBase<dataSync_result, dataSync_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "dataSync_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new dataSync_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSync_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          dataSync_result.class, metaDataMap);
    }

    public dataSync_result() {
    }

    public dataSync_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public dataSync_result(dataSync_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public dataSync_result deepCopy() {
      return new dataSync_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSync_result)
        return this.equals((dataSync_result) that);
      return false;
    }

    public boolean equals(dataSync_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dataSync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dataSync_result typedOther = (dataSync_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSync_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSync_resultStandardSchemeFactory implements
        SchemeFactory {
      public dataSync_resultStandardScheme getScheme() {
        return new dataSync_resultStandardScheme();
      }
    }

    private static class dataSync_resultStandardScheme extends
        StandardScheme<dataSync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          dataSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          dataSync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSync_resultTupleSchemeFactory implements
        SchemeFactory {
      public dataSync_resultTupleScheme getScheme() {
        return new dataSync_resultTupleScheme();
      }
    }

    private static class dataSync_resultTupleScheme extends
        TupleScheme<dataSync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          dataSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          dataSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getLoader_args implements
      org.apache.thrift.TBase<getLoader_args, getLoader_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getLoader_args");

    private static final org.apache.thrift.protocol.TField DEST_DB_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "destDB", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField DEST_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "destTable", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "mode", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getLoader_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoader_argsTupleSchemeFactory());
    }

    private String destDB;
    private String destTable;
    private int mode;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEST_DB((short) 1, "destDB"), DEST_TABLE((short) 2, "destTable"), MODE(
          (short) 3, "mode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return DEST_DB;
        case 2:
          return DEST_TABLE;
        case 3:
          return MODE;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __MODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.DEST_DB,
          new org.apache.thrift.meta_data.FieldMetaData("destDB",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEST_TABLE,
          new org.apache.thrift.meta_data.FieldMetaData("destTable",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData(
          "mode", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getLoader_args.class, metaDataMap);
    }

    public getLoader_args() {
    }

    public getLoader_args(String destDB, String destTable, int mode) {
      this();
      this.destDB = destDB;
      this.destTable = destTable;
      this.mode = mode;
      setModeIsSet(true);
    }

    public getLoader_args(getLoader_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetDestDB()) {
        this.destDB = other.destDB;
      }
      if (other.isSetDestTable()) {
        this.destTable = other.destTable;
      }
      this.mode = other.mode;
    }

    public getLoader_args deepCopy() {
      return new getLoader_args(this);
    }

    @Override
    public void clear() {
      this.destDB = null;
      this.destTable = null;
      setModeIsSet(false);
      this.mode = 0;
    }

    public String getDestDB() {
      return this.destDB;
    }

    public void setDestDB(String destDB) {
      this.destDB = destDB;
    }

    public void unsetDestDB() {
      this.destDB = null;
    }

    public boolean isSetDestDB() {
      return this.destDB != null;
    }

    public void setDestDBIsSet(boolean value) {
      if (!value) {
        this.destDB = null;
      }
    }

    public String getDestTable() {
      return this.destTable;
    }

    public void setDestTable(String destTable) {
      this.destTable = destTable;
    }

    public void unsetDestTable() {
      this.destTable = null;
    }

    public boolean isSetDestTable() {
      return this.destTable != null;
    }

    public void setDestTableIsSet(boolean value) {
      if (!value) {
        this.destTable = null;
      }
    }

    public int getMode() {
      return this.mode;
    }

    public void setMode(int mode) {
      this.mode = mode;
      setModeIsSet(true);
    }

    public void unsetMode() {
      __isset_bit_vector.clear(__MODE_ISSET_ID);
    }

    public boolean isSetMode() {
      return __isset_bit_vector.get(__MODE_ISSET_ID);
    }

    public void setModeIsSet(boolean value) {
      __isset_bit_vector.set(__MODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEST_DB:
        if (value == null) {
          unsetDestDB();
        } else {
          setDestDB((String) value);
        }
        break;

      case DEST_TABLE:
        if (value == null) {
          unsetDestTable();
        } else {
          setDestTable((String) value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Integer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEST_DB:
        return getDestDB();

      case DEST_TABLE:
        return getDestTable();

      case MODE:
        return Integer.valueOf(getMode());

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEST_DB:
        return isSetDestDB();
      case DEST_TABLE:
        return isSetDestTable();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoader_args)
        return this.equals((getLoader_args) that);
      return false;
    }

    public boolean equals(getLoader_args that) {
      if (that == null)
        return false;

      boolean this_present_destDB = true && this.isSetDestDB();
      boolean that_present_destDB = true && that.isSetDestDB();
      if (this_present_destDB || that_present_destDB) {
        if (!(this_present_destDB && that_present_destDB))
          return false;
        if (!this.destDB.equals(that.destDB))
          return false;
      }

      boolean this_present_destTable = true && this.isSetDestTable();
      boolean that_present_destTable = true && that.isSetDestTable();
      if (this_present_destTable || that_present_destTable) {
        if (!(this_present_destTable && that_present_destTable))
          return false;
        if (!this.destTable.equals(that.destTable))
          return false;
      }

      boolean this_present_mode = true;
      boolean that_present_mode = true;
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (this.mode != that.mode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLoader_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLoader_args typedOther = (getLoader_args) other;

      lastComparison = Boolean.valueOf(isSetDestDB()).compareTo(
          typedOther.isSetDestDB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestDB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destDB,
            typedOther.destDB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestTable()).compareTo(
          typedOther.isSetDestTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.destTable, typedOther.destTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(
          typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode,
            typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoader_args(");
      boolean first = true;

      sb.append("destDB:");
      if (this.destDB == null) {
        sb.append("null");
      } else {
        sb.append(this.destDB);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("destTable:");
      if (this.destTable == null) {
        sb.append("null");
      } else {
        sb.append(this.destTable);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoader_argsStandardSchemeFactory implements
        SchemeFactory {
      public getLoader_argsStandardScheme getScheme() {
        return new getLoader_argsStandardScheme();
      }
    }

    private static class getLoader_argsStandardScheme extends
        StandardScheme<getLoader_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getLoader_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destDB = iprot.readString();
              struct.setDestDBIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destTable = iprot.readString();
              struct.setDestTableIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = iprot.readI32();
              struct.setModeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getLoader_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.destDB != null) {
          oprot.writeFieldBegin(DEST_DB_FIELD_DESC);
          oprot.writeString(struct.destDB);
          oprot.writeFieldEnd();
        }
        if (struct.destTable != null) {
          oprot.writeFieldBegin(DEST_TABLE_FIELD_DESC);
          oprot.writeString(struct.destTable);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoader_argsTupleSchemeFactory implements
        SchemeFactory {
      public getLoader_argsTupleScheme getScheme() {
        return new getLoader_argsTupleScheme();
      }
    }

    private static class getLoader_argsTupleScheme extends
        TupleScheme<getLoader_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getLoader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDestDB()) {
          optionals.set(0);
        }
        if (struct.isSetDestTable()) {
          optionals.set(1);
        }
        if (struct.isSetMode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDestDB()) {
          oprot.writeString(struct.destDB);
        }
        if (struct.isSetDestTable()) {
          oprot.writeString(struct.destTable);
        }
        if (struct.isSetMode()) {
          oprot.writeI32(struct.mode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getLoader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.destDB = iprot.readString();
          struct.setDestDBIsSet(true);
        }
        if (incoming.get(1)) {
          struct.destTable = iprot.readString();
          struct.setDestTableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mode = iprot.readI32();
          struct.setModeIsSet(true);
        }
      }
    }

  }

  public static class getLoader_result implements
      org.apache.thrift.TBase<getLoader_result, getLoader_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getLoader_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getLoader_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoader_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getLoader_result.class, metaDataMap);
    }

    public getLoader_result() {
    }

    public getLoader_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getLoader_result(getLoader_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getLoader_result deepCopy() {
      return new getLoader_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoader_result)
        return this.equals((getLoader_result) that);
      return false;
    }

    public boolean equals(getLoader_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLoader_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLoader_result typedOther = (getLoader_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoader_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoader_resultStandardSchemeFactory implements
        SchemeFactory {
      public getLoader_resultStandardScheme getScheme() {
        return new getLoader_resultStandardScheme();
      }
    }

    private static class getLoader_resultStandardScheme extends
        StandardScheme<getLoader_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getLoader_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getLoader_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoader_resultTupleSchemeFactory implements
        SchemeFactory {
      public getLoader_resultTupleScheme getScheme() {
        return new getLoader_resultTupleScheme();
      }
    }

    private static class getLoader_resultTupleScheme extends
        TupleScheme<getLoader_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getLoader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getLoader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class releaseLoader_args implements
      org.apache.thrift.TBase<releaseLoader_args, releaseLoader_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "releaseLoader_args");

    private static final org.apache.thrift.protocol.TField LOADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "loaderID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new releaseLoader_argsStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new releaseLoader_argsTupleSchemeFactory());
    }

    private String loaderID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOADER_ID((short) 1, "loaderID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return LOADER_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.LOADER_ID,
          new org.apache.thrift.meta_data.FieldMetaData("loaderID",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          releaseLoader_args.class, metaDataMap);
    }

    public releaseLoader_args() {
    }

    public releaseLoader_args(String loaderID) {
      this();
      this.loaderID = loaderID;
    }

    public releaseLoader_args(releaseLoader_args other) {
      if (other.isSetLoaderID()) {
        this.loaderID = other.loaderID;
      }
    }

    public releaseLoader_args deepCopy() {
      return new releaseLoader_args(this);
    }

    @Override
    public void clear() {
      this.loaderID = null;
    }

    public String getLoaderID() {
      return this.loaderID;
    }

    public void setLoaderID(String loaderID) {
      this.loaderID = loaderID;
    }

    public void unsetLoaderID() {
      this.loaderID = null;
    }

    public boolean isSetLoaderID() {
      return this.loaderID != null;
    }

    public void setLoaderIDIsSet(boolean value) {
      if (!value) {
        this.loaderID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOADER_ID:
        if (value == null) {
          unsetLoaderID();
        } else {
          setLoaderID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOADER_ID:
        return getLoaderID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOADER_ID:
        return isSetLoaderID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLoader_args)
        return this.equals((releaseLoader_args) that);
      return false;
    }

    public boolean equals(releaseLoader_args that) {
      if (that == null)
        return false;

      boolean this_present_loaderID = true && this.isSetLoaderID();
      boolean that_present_loaderID = true && that.isSetLoaderID();
      if (this_present_loaderID || that_present_loaderID) {
        if (!(this_present_loaderID && that_present_loaderID))
          return false;
        if (!this.loaderID.equals(that.loaderID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseLoader_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseLoader_args typedOther = (releaseLoader_args) other;

      lastComparison = Boolean.valueOf(isSetLoaderID()).compareTo(
          typedOther.isSetLoaderID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoaderID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaderID,
            typedOther.loaderID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLoader_args(");
      boolean first = true;

      sb.append("loaderID:");
      if (this.loaderID == null) {
        sb.append("null");
      } else {
        sb.append(this.loaderID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLoader_argsStandardSchemeFactory implements
        SchemeFactory {
      public releaseLoader_argsStandardScheme getScheme() {
        return new releaseLoader_argsStandardScheme();
      }
    }

    private static class releaseLoader_argsStandardScheme extends
        StandardScheme<releaseLoader_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          releaseLoader_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loaderID = iprot.readString();
              struct.setLoaderIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          releaseLoader_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loaderID != null) {
          oprot.writeFieldBegin(LOADER_ID_FIELD_DESC);
          oprot.writeString(struct.loaderID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseLoader_argsTupleSchemeFactory implements
        SchemeFactory {
      public releaseLoader_argsTupleScheme getScheme() {
        return new releaseLoader_argsTupleScheme();
      }
    }

    private static class releaseLoader_argsTupleScheme extends
        TupleScheme<releaseLoader_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          releaseLoader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoaderID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoaderID()) {
          oprot.writeString(struct.loaderID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          releaseLoader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loaderID = iprot.readString();
          struct.setLoaderIDIsSet(true);
        }
      }
    }

  }

  public static class releaseLoader_result
      implements
      org.apache.thrift.TBase<releaseLoader_result, releaseLoader_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "releaseLoader_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new releaseLoader_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new releaseLoader_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          releaseLoader_result.class, metaDataMap);
    }

    public releaseLoader_result() {
    }

    public releaseLoader_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public releaseLoader_result(releaseLoader_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public releaseLoader_result deepCopy() {
      return new releaseLoader_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLoader_result)
        return this.equals((releaseLoader_result) that);
      return false;
    }

    public boolean equals(releaseLoader_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseLoader_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseLoader_result typedOther = (releaseLoader_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLoader_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLoader_resultStandardSchemeFactory implements
        SchemeFactory {
      public releaseLoader_resultStandardScheme getScheme() {
        return new releaseLoader_resultStandardScheme();
      }
    }

    private static class releaseLoader_resultStandardScheme extends
        StandardScheme<releaseLoader_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          releaseLoader_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          releaseLoader_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseLoader_resultTupleSchemeFactory implements
        SchemeFactory {
      public releaseLoader_resultTupleScheme getScheme() {
        return new releaseLoader_resultTupleScheme();
      }
    }

    private static class releaseLoader_resultTupleScheme extends
        TupleScheme<releaseLoader_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          releaseLoader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          releaseLoader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class uploadData_args implements
      org.apache.thrift.TBase<uploadData_args, uploadData_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadData_args");

    private static final org.apache.thrift.protocol.TField LOADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "loaderID", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "data", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadData_argsTupleSchemeFactory());
    }

    private String loaderID;
    private String data;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOADER_ID((short) 1, "loaderID"), DATA((short) 2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return LOADER_ID;
        case 2:
          return DATA;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.LOADER_ID,
          new org.apache.thrift.meta_data.FieldMetaData("loaderID",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
          "data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadData_args.class, metaDataMap);
    }

    public uploadData_args() {
    }

    public uploadData_args(String loaderID, String data) {
      this();
      this.loaderID = loaderID;
      this.data = data;
    }

    public uploadData_args(uploadData_args other) {
      if (other.isSetLoaderID()) {
        this.loaderID = other.loaderID;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public uploadData_args deepCopy() {
      return new uploadData_args(this);
    }

    @Override
    public void clear() {
      this.loaderID = null;
      this.data = null;
    }

    public String getLoaderID() {
      return this.loaderID;
    }

    public void setLoaderID(String loaderID) {
      this.loaderID = loaderID;
    }

    public void unsetLoaderID() {
      this.loaderID = null;
    }

    public boolean isSetLoaderID() {
      return this.loaderID != null;
    }

    public void setLoaderIDIsSet(boolean value) {
      if (!value) {
        this.loaderID = null;
      }
    }

    public String getData() {
      return this.data;
    }

    public void setData(String data) {
      this.data = data;
    }

    public void unsetData() {
      this.data = null;
    }

    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOADER_ID:
        if (value == null) {
          unsetLoaderID();
        } else {
          setLoaderID((String) value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOADER_ID:
        return getLoaderID();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOADER_ID:
        return isSetLoaderID();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadData_args)
        return this.equals((uploadData_args) that);
      return false;
    }

    public boolean equals(uploadData_args that) {
      if (that == null)
        return false;

      boolean this_present_loaderID = true && this.isSetLoaderID();
      boolean that_present_loaderID = true && that.isSetLoaderID();
      if (this_present_loaderID || that_present_loaderID) {
        if (!(this_present_loaderID && that_present_loaderID))
          return false;
        if (!this.loaderID.equals(that.loaderID))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadData_args typedOther = (uploadData_args) other;

      lastComparison = Boolean.valueOf(isSetLoaderID()).compareTo(
          typedOther.isSetLoaderID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoaderID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaderID,
            typedOther.loaderID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(
          typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
            typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadData_args(");
      boolean first = true;

      sb.append("loaderID:");
      if (this.loaderID == null) {
        sb.append("null");
      } else {
        sb.append(this.loaderID);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadData_argsStandardSchemeFactory implements
        SchemeFactory {
      public uploadData_argsStandardScheme getScheme() {
        return new uploadData_argsStandardScheme();
      }
    }

    private static class uploadData_argsStandardScheme extends
        StandardScheme<uploadData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loaderID = iprot.readString();
              struct.setLoaderIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loaderID != null) {
          oprot.writeFieldBegin(LOADER_ID_FIELD_DESC);
          oprot.writeString(struct.loaderID);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadData_argsTupleSchemeFactory implements
        SchemeFactory {
      public uploadData_argsTupleScheme getScheme() {
        return new uploadData_argsTupleScheme();
      }
    }

    private static class uploadData_argsTupleScheme extends
        TupleScheme<uploadData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoaderID()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoaderID()) {
          oprot.writeString(struct.loaderID);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loaderID = iprot.readString();
          struct.setLoaderIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class uploadData_result implements
      org.apache.thrift.TBase<uploadData_result, uploadData_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadData_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadData_result.class, metaDataMap);
    }

    public uploadData_result() {
    }

    public uploadData_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public uploadData_result(uploadData_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public uploadData_result deepCopy() {
      return new uploadData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadData_result)
        return this.equals((uploadData_result) that);
      return false;
    }

    public boolean equals(uploadData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadData_result typedOther = (uploadData_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadData_resultStandardSchemeFactory implements
        SchemeFactory {
      public uploadData_resultStandardScheme getScheme() {
        return new uploadData_resultStandardScheme();
      }
    }

    private static class uploadData_resultStandardScheme extends
        StandardScheme<uploadData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadData_resultTupleSchemeFactory implements
        SchemeFactory {
      public uploadData_resultTupleScheme getScheme() {
        return new uploadData_resultTupleScheme();
      }
    }

    private static class uploadData_resultTupleScheme extends
        TupleScheme<uploadData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class completeUploadData_args
      implements
      org.apache.thrift.TBase<completeUploadData_args, completeUploadData_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "completeUploadData_args");

    private static final org.apache.thrift.protocol.TField LOADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "loaderID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new completeUploadData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new completeUploadData_argsTupleSchemeFactory());
    }

    private String loaderID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOADER_ID((short) 1, "loaderID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return LOADER_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.LOADER_ID,
          new org.apache.thrift.meta_data.FieldMetaData("loaderID",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          completeUploadData_args.class, metaDataMap);
    }

    public completeUploadData_args() {
    }

    public completeUploadData_args(String loaderID) {
      this();
      this.loaderID = loaderID;
    }

    public completeUploadData_args(completeUploadData_args other) {
      if (other.isSetLoaderID()) {
        this.loaderID = other.loaderID;
      }
    }

    public completeUploadData_args deepCopy() {
      return new completeUploadData_args(this);
    }

    @Override
    public void clear() {
      this.loaderID = null;
    }

    public String getLoaderID() {
      return this.loaderID;
    }

    public void setLoaderID(String loaderID) {
      this.loaderID = loaderID;
    }

    public void unsetLoaderID() {
      this.loaderID = null;
    }

    public boolean isSetLoaderID() {
      return this.loaderID != null;
    }

    public void setLoaderIDIsSet(boolean value) {
      if (!value) {
        this.loaderID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOADER_ID:
        if (value == null) {
          unsetLoaderID();
        } else {
          setLoaderID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOADER_ID:
        return getLoaderID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOADER_ID:
        return isSetLoaderID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeUploadData_args)
        return this.equals((completeUploadData_args) that);
      return false;
    }

    public boolean equals(completeUploadData_args that) {
      if (that == null)
        return false;

      boolean this_present_loaderID = true && this.isSetLoaderID();
      boolean that_present_loaderID = true && that.isSetLoaderID();
      if (this_present_loaderID || that_present_loaderID) {
        if (!(this_present_loaderID && that_present_loaderID))
          return false;
        if (!this.loaderID.equals(that.loaderID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(completeUploadData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      completeUploadData_args typedOther = (completeUploadData_args) other;

      lastComparison = Boolean.valueOf(isSetLoaderID()).compareTo(
          typedOther.isSetLoaderID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoaderID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaderID,
            typedOther.loaderID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeUploadData_args(");
      boolean first = true;

      sb.append("loaderID:");
      if (this.loaderID == null) {
        sb.append("null");
      } else {
        sb.append(this.loaderID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeUploadData_argsStandardSchemeFactory implements
        SchemeFactory {
      public completeUploadData_argsStandardScheme getScheme() {
        return new completeUploadData_argsStandardScheme();
      }
    }

    private static class completeUploadData_argsStandardScheme extends
        StandardScheme<completeUploadData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          completeUploadData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loaderID = iprot.readString();
              struct.setLoaderIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          completeUploadData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loaderID != null) {
          oprot.writeFieldBegin(LOADER_ID_FIELD_DESC);
          oprot.writeString(struct.loaderID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeUploadData_argsTupleSchemeFactory implements
        SchemeFactory {
      public completeUploadData_argsTupleScheme getScheme() {
        return new completeUploadData_argsTupleScheme();
      }
    }

    private static class completeUploadData_argsTupleScheme extends
        TupleScheme<completeUploadData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          completeUploadData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoaderID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoaderID()) {
          oprot.writeString(struct.loaderID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          completeUploadData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loaderID = iprot.readString();
          struct.setLoaderIDIsSet(true);
        }
      }
    }

  }

  public static class completeUploadData_result
      implements
      org.apache.thrift.TBase<completeUploadData_result, completeUploadData_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "completeUploadData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new completeUploadData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new completeUploadData_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          completeUploadData_result.class, metaDataMap);
    }

    public completeUploadData_result() {
    }

    public completeUploadData_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public completeUploadData_result(completeUploadData_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public completeUploadData_result deepCopy() {
      return new completeUploadData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeUploadData_result)
        return this.equals((completeUploadData_result) that);
      return false;
    }

    public boolean equals(completeUploadData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(completeUploadData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      completeUploadData_result typedOther = (completeUploadData_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeUploadData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeUploadData_resultStandardSchemeFactory
        implements SchemeFactory {
      public completeUploadData_resultStandardScheme getScheme() {
        return new completeUploadData_resultStandardScheme();
      }
    }

    private static class completeUploadData_resultStandardScheme extends
        StandardScheme<completeUploadData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          completeUploadData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          completeUploadData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeUploadData_resultTupleSchemeFactory implements
        SchemeFactory {
      public completeUploadData_resultTupleScheme getScheme() {
        return new completeUploadData_resultTupleScheme();
      }
    }

    private static class completeUploadData_resultTupleScheme extends
        TupleScheme<completeUploadData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          completeUploadData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          completeUploadData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class querySQLState_args implements
      org.apache.thrift.TBase<querySQLState_args, querySQLState_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "querySQLState_args");

    private static final org.apache.thrift.protocol.TField SQL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sqlID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new querySQLState_argsStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new querySQLState_argsTupleSchemeFactory());
    }

    private String sqlID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ID((short) 1, "sqlID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL_ID, new org.apache.thrift.meta_data.FieldMetaData(
          "sqlID", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          querySQLState_args.class, metaDataMap);
    }

    public querySQLState_args() {
    }

    public querySQLState_args(String sqlID) {
      this();
      this.sqlID = sqlID;
    }

    public querySQLState_args(querySQLState_args other) {
      if (other.isSetSqlID()) {
        this.sqlID = other.sqlID;
      }
    }

    public querySQLState_args deepCopy() {
      return new querySQLState_args(this);
    }

    @Override
    public void clear() {
      this.sqlID = null;
    }

    public String getSqlID() {
      return this.sqlID;
    }

    public void setSqlID(String sqlID) {
      this.sqlID = sqlID;
    }

    public void unsetSqlID() {
      this.sqlID = null;
    }

    public boolean isSetSqlID() {
      return this.sqlID != null;
    }

    public void setSqlIDIsSet(boolean value) {
      if (!value) {
        this.sqlID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ID:
        if (value == null) {
          unsetSqlID();
        } else {
          setSqlID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ID:
        return getSqlID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ID:
        return isSetSqlID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySQLState_args)
        return this.equals((querySQLState_args) that);
      return false;
    }

    public boolean equals(querySQLState_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlID = true && this.isSetSqlID();
      boolean that_present_sqlID = true && that.isSetSqlID();
      if (this_present_sqlID || that_present_sqlID) {
        if (!(this_present_sqlID && that_present_sqlID))
          return false;
        if (!this.sqlID.equals(that.sqlID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(querySQLState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      querySQLState_args typedOther = (querySQLState_args) other;

      lastComparison = Boolean.valueOf(isSetSqlID()).compareTo(
          typedOther.isSetSqlID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlID,
            typedOther.sqlID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySQLState_args(");
      boolean first = true;

      sb.append("sqlID:");
      if (this.sqlID == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySQLState_argsStandardSchemeFactory implements
        SchemeFactory {
      public querySQLState_argsStandardScheme getScheme() {
        return new querySQLState_argsStandardScheme();
      }
    }

    private static class querySQLState_argsStandardScheme extends
        StandardScheme<querySQLState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          querySQLState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlID = iprot.readString();
              struct.setSqlIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          querySQLState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlID != null) {
          oprot.writeFieldBegin(SQL_ID_FIELD_DESC);
          oprot.writeString(struct.sqlID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySQLState_argsTupleSchemeFactory implements
        SchemeFactory {
      public querySQLState_argsTupleScheme getScheme() {
        return new querySQLState_argsTupleScheme();
      }
    }

    private static class querySQLState_argsTupleScheme extends
        TupleScheme<querySQLState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          querySQLState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlID()) {
          oprot.writeString(struct.sqlID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          querySQLState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlID = iprot.readString();
          struct.setSqlIDIsSet(true);
        }
      }
    }

  }

  public static class querySQLState_result
      implements
      org.apache.thrift.TBase<querySQLState_result, querySQLState_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "querySQLState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new querySQLState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new querySQLState_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          querySQLState_result.class, metaDataMap);
    }

    public querySQLState_result() {
    }

    public querySQLState_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public querySQLState_result(querySQLState_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public querySQLState_result deepCopy() {
      return new querySQLState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySQLState_result)
        return this.equals((querySQLState_result) that);
      return false;
    }

    public boolean equals(querySQLState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(querySQLState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      querySQLState_result typedOther = (querySQLState_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySQLState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySQLState_resultStandardSchemeFactory implements
        SchemeFactory {
      public querySQLState_resultStandardScheme getScheme() {
        return new querySQLState_resultStandardScheme();
      }
    }

    private static class querySQLState_resultStandardScheme extends
        StandardScheme<querySQLState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          querySQLState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          querySQLState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySQLState_resultTupleSchemeFactory implements
        SchemeFactory {
      public querySQLState_resultTupleScheme getScheme() {
        return new querySQLState_resultTupleScheme();
      }
    }

    private static class querySQLState_resultTupleScheme extends
        TupleScheme<querySQLState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          querySQLState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          querySQLState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getJobID_args implements
      org.apache.thrift.TBase<getJobID_args, getJobID_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobID_args");

    private static final org.apache.thrift.protocol.TField SQL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sqlID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobID_argsTupleSchemeFactory());
    }

    private String sqlID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ID((short) 1, "sqlID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL_ID, new org.apache.thrift.meta_data.FieldMetaData(
          "sqlID", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobID_args.class, metaDataMap);
    }

    public getJobID_args() {
    }

    public getJobID_args(String sqlID) {
      this();
      this.sqlID = sqlID;
    }

    public getJobID_args(getJobID_args other) {
      if (other.isSetSqlID()) {
        this.sqlID = other.sqlID;
      }
    }

    public getJobID_args deepCopy() {
      return new getJobID_args(this);
    }

    @Override
    public void clear() {
      this.sqlID = null;
    }

    public String getSqlID() {
      return this.sqlID;
    }

    public void setSqlID(String sqlID) {
      this.sqlID = sqlID;
    }

    public void unsetSqlID() {
      this.sqlID = null;
    }

    public boolean isSetSqlID() {
      return this.sqlID != null;
    }

    public void setSqlIDIsSet(boolean value) {
      if (!value) {
        this.sqlID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ID:
        if (value == null) {
          unsetSqlID();
        } else {
          setSqlID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ID:
        return getSqlID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ID:
        return isSetSqlID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobID_args)
        return this.equals((getJobID_args) that);
      return false;
    }

    public boolean equals(getJobID_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlID = true && this.isSetSqlID();
      boolean that_present_sqlID = true && that.isSetSqlID();
      if (this_present_sqlID || that_present_sqlID) {
        if (!(this_present_sqlID && that_present_sqlID))
          return false;
        if (!this.sqlID.equals(that.sqlID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobID_args typedOther = (getJobID_args) other;

      lastComparison = Boolean.valueOf(isSetSqlID()).compareTo(
          typedOther.isSetSqlID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlID,
            typedOther.sqlID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobID_args(");
      boolean first = true;

      sb.append("sqlID:");
      if (this.sqlID == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobID_argsStandardSchemeFactory implements
        SchemeFactory {
      public getJobID_argsStandardScheme getScheme() {
        return new getJobID_argsStandardScheme();
      }
    }

    private static class getJobID_argsStandardScheme extends
        StandardScheme<getJobID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlID = iprot.readString();
              struct.setSqlIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlID != null) {
          oprot.writeFieldBegin(SQL_ID_FIELD_DESC);
          oprot.writeString(struct.sqlID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobID_argsTupleSchemeFactory implements
        SchemeFactory {
      public getJobID_argsTupleScheme getScheme() {
        return new getJobID_argsTupleScheme();
      }
    }

    private static class getJobID_argsTupleScheme extends
        TupleScheme<getJobID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlID()) {
          oprot.writeString(struct.sqlID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlID = iprot.readString();
          struct.setSqlIDIsSet(true);
        }
      }
    }

  }

  public static class getJobID_result implements
      org.apache.thrift.TBase<getJobID_result, getJobID_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobID_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobID_result.class, metaDataMap);
    }

    public getJobID_result() {
    }

    public getJobID_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getJobID_result(getJobID_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getJobID_result deepCopy() {
      return new getJobID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobID_result)
        return this.equals((getJobID_result) that);
      return false;
    }

    public boolean equals(getJobID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobID_result typedOther = (getJobID_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobID_resultStandardSchemeFactory implements
        SchemeFactory {
      public getJobID_resultStandardScheme getScheme() {
        return new getJobID_resultStandardScheme();
      }
    }

    private static class getJobID_resultStandardScheme extends
        StandardScheme<getJobID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobID_resultTupleSchemeFactory implements
        SchemeFactory {
      public getJobID_resultTupleScheme getScheme() {
        return new getJobID_resultTupleScheme();
      }
    }

    private static class getJobID_resultTupleScheme extends
        TupleScheme<getJobID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getJobCounts_args implements
      org.apache.thrift.TBase<getJobCounts_args, getJobCounts_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobCounts_args");

    private static final org.apache.thrift.protocol.TField SQL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sqlID", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobCounts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobCounts_argsTupleSchemeFactory());
    }

    private String sqlID;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_ID((short) 1, "sqlID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL_ID;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL_ID, new org.apache.thrift.meta_data.FieldMetaData(
          "sqlID", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobCounts_args.class, metaDataMap);
    }

    public getJobCounts_args() {
    }

    public getJobCounts_args(String sqlID) {
      this();
      this.sqlID = sqlID;
    }

    public getJobCounts_args(getJobCounts_args other) {
      if (other.isSetSqlID()) {
        this.sqlID = other.sqlID;
      }
    }

    public getJobCounts_args deepCopy() {
      return new getJobCounts_args(this);
    }

    @Override
    public void clear() {
      this.sqlID = null;
    }

    public String getSqlID() {
      return this.sqlID;
    }

    public void setSqlID(String sqlID) {
      this.sqlID = sqlID;
    }

    public void unsetSqlID() {
      this.sqlID = null;
    }

    public boolean isSetSqlID() {
      return this.sqlID != null;
    }

    public void setSqlIDIsSet(boolean value) {
      if (!value) {
        this.sqlID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_ID:
        if (value == null) {
          unsetSqlID();
        } else {
          setSqlID((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_ID:
        return getSqlID();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_ID:
        return isSetSqlID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobCounts_args)
        return this.equals((getJobCounts_args) that);
      return false;
    }

    public boolean equals(getJobCounts_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlID = true && this.isSetSqlID();
      boolean that_present_sqlID = true && that.isSetSqlID();
      if (this_present_sqlID || that_present_sqlID) {
        if (!(this_present_sqlID && that_present_sqlID))
          return false;
        if (!this.sqlID.equals(that.sqlID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobCounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobCounts_args typedOther = (getJobCounts_args) other;

      lastComparison = Boolean.valueOf(isSetSqlID()).compareTo(
          typedOther.isSetSqlID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlID,
            typedOther.sqlID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobCounts_args(");
      boolean first = true;

      sb.append("sqlID:");
      if (this.sqlID == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobCounts_argsStandardSchemeFactory implements
        SchemeFactory {
      public getJobCounts_argsStandardScheme getScheme() {
        return new getJobCounts_argsStandardScheme();
      }
    }

    private static class getJobCounts_argsStandardScheme extends
        StandardScheme<getJobCounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobCounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlID = iprot.readString();
              struct.setSqlIDIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobCounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlID != null) {
          oprot.writeFieldBegin(SQL_ID_FIELD_DESC);
          oprot.writeString(struct.sqlID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobCounts_argsTupleSchemeFactory implements
        SchemeFactory {
      public getJobCounts_argsTupleScheme getScheme() {
        return new getJobCounts_argsTupleScheme();
      }
    }

    private static class getJobCounts_argsTupleScheme extends
        TupleScheme<getJobCounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlID()) {
          oprot.writeString(struct.sqlID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlID = iprot.readString();
          struct.setSqlIDIsSet(true);
        }
      }
    }

  }

  public static class getJobCounts_result
      implements
      org.apache.thrift.TBase<getJobCounts_result, getJobCounts_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getJobCounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getJobCounts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getJobCounts_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getJobCounts_result.class, metaDataMap);
    }

    public getJobCounts_result() {
    }

    public getJobCounts_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getJobCounts_result(getJobCounts_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getJobCounts_result deepCopy() {
      return new getJobCounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobCounts_result)
        return this.equals((getJobCounts_result) that);
      return false;
    }

    public boolean equals(getJobCounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobCounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobCounts_result typedOther = (getJobCounts_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobCounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobCounts_resultStandardSchemeFactory implements
        SchemeFactory {
      public getJobCounts_resultStandardScheme getScheme() {
        return new getJobCounts_resultStandardScheme();
      }
    }

    private static class getJobCounts_resultStandardScheme extends
        StandardScheme<getJobCounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getJobCounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57) {
                  String _elem58;
                  _elem58 = iprot.readString();
                  struct.success.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getJobCounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter59 : struct.success) {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobCounts_resultTupleSchemeFactory implements
        SchemeFactory {
      public getJobCounts_resultTupleScheme getScheme() {
        return new getJobCounts_resultTupleScheme();
      }
    }

    private static class getJobCounts_resultTupleScheme extends
        TupleScheme<getJobCounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getJobCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter60 : struct.success) {
              oprot.writeString(_iter60);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getJobCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62) {
              String _elem63;
              _elem63 = iprot.readString();
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getHiveLoad_args implements
      org.apache.thrift.TBase<getHiveLoad_args, getHiveLoad_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getHiveLoad_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getHiveLoad_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHiveLoad_argsTupleSchemeFactory());
    }

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getHiveLoad_args.class, metaDataMap);
    }

    public getHiveLoad_args() {
    }

    public getHiveLoad_args(getHiveLoad_args other) {
    }

    public getHiveLoad_args deepCopy() {
      return new getHiveLoad_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHiveLoad_args)
        return this.equals((getHiveLoad_args) that);
      return false;
    }

    public boolean equals(getHiveLoad_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHiveLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHiveLoad_args typedOther = (getHiveLoad_args) other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHiveLoad_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHiveLoad_argsStandardSchemeFactory implements
        SchemeFactory {
      public getHiveLoad_argsStandardScheme getScheme() {
        return new getHiveLoad_argsStandardScheme();
      }
    }

    private static class getHiveLoad_argsStandardScheme extends
        StandardScheme<getHiveLoad_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getHiveLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getHiveLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHiveLoad_argsTupleSchemeFactory implements
        SchemeFactory {
      public getHiveLoad_argsTupleScheme getScheme() {
        return new getHiveLoad_argsTupleScheme();
      }
    }

    private static class getHiveLoad_argsTupleScheme extends
        TupleScheme<getHiveLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getHiveLoad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getHiveLoad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getHiveLoad_result implements
      org.apache.thrift.TBase<getHiveLoad_result, getHiveLoad_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getHiveLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getHiveLoad_resultStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new getHiveLoad_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getHiveLoad_result.class, metaDataMap);
    }

    public getHiveLoad_result() {
    }

    public getHiveLoad_result(List<String> success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getHiveLoad_result(getHiveLoad_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getHiveLoad_result deepCopy() {
      return new getHiveLoad_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHiveLoad_result)
        return this.equals((getHiveLoad_result) that);
      return false;
    }

    public boolean equals(getHiveLoad_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getHiveLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getHiveLoad_result typedOther = (getHiveLoad_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHiveLoad_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHiveLoad_resultStandardSchemeFactory implements
        SchemeFactory {
      public getHiveLoad_resultStandardScheme getScheme() {
        return new getHiveLoad_resultStandardScheme();
      }
    }

    private static class getHiveLoad_resultStandardScheme extends
        StandardScheme<getHiveLoad_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getHiveLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65) {
                  String _elem66;
                  _elem66 = iprot.readString();
                  struct.success.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getHiveLoad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter67 : struct.success) {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHiveLoad_resultTupleSchemeFactory implements
        SchemeFactory {
      public getHiveLoad_resultTupleScheme getScheme() {
        return new getHiveLoad_resultTupleScheme();
      }
    }

    private static class getHiveLoad_resultTupleScheme extends
        TupleScheme<getHiveLoad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getHiveLoad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter68 : struct.success) {
              oprot.writeString(_iter68);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getHiveLoad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70) {
              String _elem71;
              _elem71 = iprot.readString();
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSchemaForExplain_args
      implements
      org.apache.thrift.TBase<getSchemaForExplain_args, getSchemaForExplain_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchemaForExplain_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sql", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSchemaForExplain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getSchemaForExplain_argsTupleSchemeFactory());
    }

    private String sql;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short) 1, "sql");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return SQL;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData(
          "sql", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSchemaForExplain_args.class, metaDataMap);
    }

    public getSchemaForExplain_args() {
    }

    public getSchemaForExplain_args(String sql) {
      this();
      this.sql = sql;
    }

    public getSchemaForExplain_args(getSchemaForExplain_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public getSchemaForExplain_args deepCopy() {
      return new getSchemaForExplain_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    public String getSql() {
      return this.sql;
    }

    public void setSql(String sql) {
      this.sql = sql;
    }

    public void unsetSql() {
      this.sql = null;
    }

    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemaForExplain_args)
        return this.equals((getSchemaForExplain_args) that);
      return false;
    }

    public boolean equals(getSchemaForExplain_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSchemaForExplain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSchemaForExplain_args typedOther = (getSchemaForExplain_args) other;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(
          typedOther.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql,
            typedOther.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemaForExplain_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemaForExplain_argsStandardSchemeFactory
        implements SchemeFactory {
      public getSchemaForExplain_argsStandardScheme getScheme() {
        return new getSchemaForExplain_argsStandardScheme();
      }
    }

    private static class getSchemaForExplain_argsStandardScheme extends
        StandardScheme<getSchemaForExplain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSchemaForExplain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSchemaForExplain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemaForExplain_argsTupleSchemeFactory implements
        SchemeFactory {
      public getSchemaForExplain_argsTupleScheme getScheme() {
        return new getSchemaForExplain_argsTupleScheme();
      }
    }

    private static class getSchemaForExplain_argsTupleScheme extends
        TupleScheme<getSchemaForExplain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSchemaForExplain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSchemaForExplain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

  }

  public static class getSchemaForExplain_result
      implements
      org.apache.thrift.TBase<getSchemaForExplain_result, getSchemaForExplain_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "getSchemaForExplain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new getSchemaForExplain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class,
          new getSchemaForExplain_resultTupleSchemeFactory());
    }

    private List<String> success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getSchemaForExplain_result.class, metaDataMap);
    }

    public getSchemaForExplain_result() {
    }

    public getSchemaForExplain_result(List<String> success,
        HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public getSchemaForExplain_result(getSchemaForExplain_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public getSchemaForExplain_result deepCopy() {
      return new getSchemaForExplain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchemaForExplain_result)
        return this.equals((getSchemaForExplain_result) that);
      return false;
    }

    public boolean equals(getSchemaForExplain_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSchemaForExplain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSchemaForExplain_result typedOther = (getSchemaForExplain_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSchemaForExplain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchemaForExplain_resultStandardSchemeFactory
        implements SchemeFactory {
      public getSchemaForExplain_resultStandardScheme getScheme() {
        return new getSchemaForExplain_resultStandardScheme();
      }
    }

    private static class getSchemaForExplain_resultStandardScheme extends
        StandardScheme<getSchemaForExplain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          getSchemaForExplain_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot
                    .readListBegin();
                struct.success = new ArrayList<String>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73) {
                  String _elem74;
                  _elem74 = iprot.readString();
                  struct.success.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          getSchemaForExplain_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot
                .writeListBegin(new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success
                        .size()));
            for (String _iter75 : struct.success) {
              oprot.writeString(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchemaForExplain_resultTupleSchemeFactory implements
        SchemeFactory {
      public getSchemaForExplain_resultTupleScheme getScheme() {
        return new getSchemaForExplain_resultTupleScheme();
      }
    }

    private static class getSchemaForExplain_resultTupleScheme extends
        TupleScheme<getSchemaForExplain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          getSchemaForExplain_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter76 : struct.success) {
              oprot.writeString(_iter76);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          getSchemaForExplain_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78) {
              String _elem79;
              _elem79 = iprot.readString();
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class replaceJar_args implements
      org.apache.thrift.TBase<replaceJar_args, replaceJar_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "replaceJar_args");

    private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "dbname", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TABLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "tablename", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new replaceJar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceJar_argsTupleSchemeFactory());
    }

    private String dbname;
    private String tablename;
    private String user;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBNAME((short) 1, "dbname"), TABLENAME((short) 2, "tablename"), USER(
          (short) 3, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return DBNAME;
        case 2:
          return TABLENAME;
        case 3:
          return USER;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData(
          "dbname", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLENAME,
          new org.apache.thrift.meta_data.FieldMetaData("tablename",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          replaceJar_args.class, metaDataMap);
    }

    public replaceJar_args() {
    }

    public replaceJar_args(String dbname, String tablename, String user) {
      this();
      this.dbname = dbname;
      this.tablename = tablename;
      this.user = user;
    }

    public replaceJar_args(replaceJar_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTablename()) {
        this.tablename = other.tablename;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }

    public replaceJar_args deepCopy() {
      return new replaceJar_args(this);
    }

    @Override
    public void clear() {
      this.dbname = null;
      this.tablename = null;
      this.user = null;
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public void setDbnameIsSet(boolean value) {
      if (!value) {
        this.dbname = null;
      }
    }

    public String getTablename() {
      return this.tablename;
    }

    public void setTablename(String tablename) {
      this.tablename = tablename;
    }

    public void unsetTablename() {
      this.tablename = null;
    }

    public boolean isSetTablename() {
      return this.tablename != null;
    }

    public void setTablenameIsSet(boolean value) {
      if (!value) {
        this.tablename = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String) value);
        }
        break;

      case TABLENAME:
        if (value == null) {
          unsetTablename();
        } else {
          setTablename((String) value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DBNAME:
        return getDbname();

      case TABLENAME:
        return getTablename();

      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DBNAME:
        return isSetDbname();
      case TABLENAME:
        return isSetTablename();
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceJar_args)
        return this.equals((replaceJar_args) that);
      return false;
    }

    public boolean equals(replaceJar_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tablename = true && this.isSetTablename();
      boolean that_present_tablename = true && that.isSetTablename();
      if (this_present_tablename || that_present_tablename) {
        if (!(this_present_tablename && that_present_tablename))
          return false;
        if (!this.tablename.equals(that.tablename))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(replaceJar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      replaceJar_args typedOther = (replaceJar_args) other;

      lastComparison = Boolean.valueOf(isSetDbname()).compareTo(
          typedOther.isSetDbname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname,
            typedOther.dbname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTablename()).compareTo(
          typedOther.isSetTablename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTablename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(
            this.tablename, typedOther.tablename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceJar_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("tablename:");
      if (this.tablename == null) {
        sb.append("null");
      } else {
        sb.append(this.tablename);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceJar_argsStandardSchemeFactory implements
        SchemeFactory {
      public replaceJar_argsStandardScheme getScheme() {
        return new replaceJar_argsStandardScheme();
      }
    }

    private static class replaceJar_argsStandardScheme extends
        StandardScheme<replaceJar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          replaceJar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tablename = iprot.readString();
              struct.setTablenameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          replaceJar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbname != null) {
          oprot.writeFieldBegin(DBNAME_FIELD_DESC);
          oprot.writeString(struct.dbname);
          oprot.writeFieldEnd();
        }
        if (struct.tablename != null) {
          oprot.writeFieldBegin(TABLENAME_FIELD_DESC);
          oprot.writeString(struct.tablename);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceJar_argsTupleSchemeFactory implements
        SchemeFactory {
      public replaceJar_argsTupleScheme getScheme() {
        return new replaceJar_argsTupleScheme();
      }
    }

    private static class replaceJar_argsTupleScheme extends
        TupleScheme<replaceJar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          replaceJar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDbname()) {
          optionals.set(0);
        }
        if (struct.isSetTablename()) {
          optionals.set(1);
        }
        if (struct.isSetUser()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDbname()) {
          oprot.writeString(struct.dbname);
        }
        if (struct.isSetTablename()) {
          oprot.writeString(struct.tablename);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          replaceJar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dbname = iprot.readString();
          struct.setDbnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tablename = iprot.readString();
          struct.setTablenameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class replaceJar_result implements
      org.apache.thrift.TBase<replaceJar_result, replaceJar_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "replaceJar_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new replaceJar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceJar_resultTupleSchemeFactory());
    }

    private int success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          replaceJar_result.class, metaDataMap);
    }

    public replaceJar_result() {
    }

    public replaceJar_result(int success, HiveServerException ex) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    public replaceJar_result(replaceJar_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public replaceJar_result deepCopy() {
      return new replaceJar_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceJar_result)
        return this.equals((replaceJar_result) that);
      return false;
    }

    public boolean equals(replaceJar_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(replaceJar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      replaceJar_result typedOther = (replaceJar_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceJar_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceJar_resultStandardSchemeFactory implements
        SchemeFactory {
      public replaceJar_resultStandardScheme getScheme() {
        return new replaceJar_resultStandardScheme();
      }
    }

    private static class replaceJar_resultStandardScheme extends
        StandardScheme<replaceJar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          replaceJar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          replaceJar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceJar_resultTupleSchemeFactory implements
        SchemeFactory {
      public replaceJar_resultTupleScheme getScheme() {
        return new replaceJar_resultTupleScheme();
      }
    }

    private static class replaceJar_resultTupleScheme extends
        TupleScheme<replaceJar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          replaceJar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          replaceJar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class uploadProto_args implements
      org.apache.thrift.TBase<uploadProto_args, uploadProto_args._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadProto_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "user", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "fileName", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "data", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadProto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadProto_argsTupleSchemeFactory());
    }

    private String user;
    private String fileName;
    private ByteBuffer data;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short) 1, "user"), FILE_NAME((short) 2, "fileName"), DATA(
          (short) 3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 1:
          return USER;
        case 2:
          return FILE_NAME;
        case 3:
          return DATA;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData(
          "user", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME,
          new org.apache.thrift.meta_data.FieldMetaData("fileName",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
          "data", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRING, true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadProto_args.class, metaDataMap);
    }

    public uploadProto_args() {
    }

    public uploadProto_args(String user, String fileName, ByteBuffer data) {
      this();
      this.user = user;
      this.fileName = fileName;
      this.data = data;
    }

    public uploadProto_args(uploadProto_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
        ;
      }
    }

    public uploadProto_args deepCopy() {
      return new uploadProto_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.fileName = null;
      this.data = null;
    }

    public String getUser() {
      return this.user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public void unsetUser() {
      this.user = null;
    }

    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public void setFileName(String fileName) {
      this.fileName = fileName;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return data;
    }

    public void setData(byte[] data) {
      setData(data == null ? (ByteBuffer) null : ByteBuffer.wrap(data));
    }

    public void setData(ByteBuffer data) {
      this.data = data;
    }

    public void unsetData() {
      this.data = null;
    }

    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String) value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String) value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case FILE_NAME:
        return getFileName();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case FILE_NAME:
        return isSetFileName();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProto_args)
        return this.equals((uploadProto_args) that);
      return false;
    }

    public boolean equals(uploadProto_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadProto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadProto_args typedOther = (uploadProto_args) other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(
          typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user,
            typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(
          typedOther.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName,
            typedOther.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(
          typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
            typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProto_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProto_argsStandardSchemeFactory implements
        SchemeFactory {
      public uploadProto_argsStandardScheme getScheme() {
        return new uploadProto_argsStandardScheme();
      }
    }

    private static class uploadProto_argsStandardScheme extends
        StandardScheme<uploadProto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadProto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 2:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 3:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadProto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProto_argsTupleSchemeFactory implements
        SchemeFactory {
      public uploadProto_argsTupleScheme getScheme() {
        return new uploadProto_argsTupleScheme();
      }
    }

    private static class uploadProto_argsTupleScheme extends
        TupleScheme<uploadProto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadProto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadProto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class uploadProto_result implements
      org.apache.thrift.TBase<uploadProto_result, uploadProto_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "uploadProto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class,
          new uploadProto_resultStandardSchemeFactory());
      schemes
          .put(TupleScheme.class, new uploadProto_resultTupleSchemeFactory());
    }

    private String success;
    private HiveServerException ex;

    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"), EX((short) 1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
        case 0:
          return SUCCESS;
        case 1:
          return EX;
        default:
          return null;
        }
      }

      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId
              + " doesn't exist!");
        return fields;
      }

      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData(
          "ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(
              org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          uploadProto_result.class, metaDataMap);
    }

    public uploadProto_result() {
    }

    public uploadProto_result(String success, HiveServerException ex) {
      this();
      this.success = success;
      this.ex = ex;
    }

    public uploadProto_result(uploadProto_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new HiveServerException(other.ex);
      }
    }

    public uploadProto_result deepCopy() {
      return new uploadProto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public HiveServerException getEx() {
      return this.ex;
    }

    public void setEx(HiveServerException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String) value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((HiveServerException) value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProto_result)
        return this.equals((uploadProto_result) that);
      return false;
    }

    public boolean equals(uploadProto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadProto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadProto_result typedOther = (uploadProto_result) other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
          typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
            typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(
          typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex,
            typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first)
        sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out)
        throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(
            new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProto_resultStandardSchemeFactory implements
        SchemeFactory {
      public uploadProto_resultStandardScheme getScheme() {
        return new uploadProto_resultStandardScheme();
      }
    }

    private static class uploadProto_resultStandardScheme extends
        StandardScheme<uploadProto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot,
          uploadProto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
          case 0:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.success = iprot.readString();
              struct.setSuccessIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          case 1:
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ex = new HiveServerException();
              struct.ex.read(iprot);
              struct.setExIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                  schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot,
          uploadProto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProto_resultTupleSchemeFactory implements
        SchemeFactory {
      public uploadProto_resultTupleScheme getScheme() {
        return new uploadProto_resultTupleScheme();
      }
    }

    private static class uploadProto_resultTupleScheme extends
        TupleScheme<uploadProto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot,
          uploadProto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot,
          uploadProto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new HiveServerException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
