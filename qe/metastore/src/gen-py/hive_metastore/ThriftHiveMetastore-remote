#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ThriftHiveMetastore
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool create_database(string name, string description)'
  print '  Database get_database(string name)'
  print '  bool drop_database(string name)'
  print '   get_databases()'
  print '  Type get_type(string name)'
  print '  bool create_type(Type type)'
  print '  bool drop_type(string type)'
  print '   get_type_all(string name)'
  print '   get_fields(string db_name, string table_name)'
  print '   get_schema(string db_name, string table_name)'
  print '  void create_table(Table tbl)'
  print '  void drop_table(string dbname, string name, bool deleteData)'
  print '   get_tables(string db_name, string pattern)'
  print '  Table get_table(string dbname, string tbl_name)'
  print '  void alter_table(string dbname, string tbl_name, Table new_tbl)'
  print '  Partition get_partition(string db_name, string tbl_name, i32 level)'
  print '   get_partitions(string db_name, string tbl_name)'
  print '  void alter_partition(string db_name, string tbl_name, Partition new_part)'
  print '  tdw_sys_table_statistics add_table_statistics(tdw_sys_table_statistics new_table_statistics)'
  print '  bool delete_table_statistics(string table_statistics_name, string db_statistics_name)'
  print '  tdw_sys_table_statistics get_table_statistics(string table_statistics_name, string db_statistics_name)'
  print '   get_table_statistics_multi(string db_statistics_name, i32 max_parts)'
  print '   get_table_statistics_names(string db_statistics_name, i32 max_parts)'
  print '  tdw_sys_fields_statistics add_fields_statistics(tdw_sys_fields_statistics new_fields_statistics)'
  print '  bool delete_fields_statistics(string stat_table_name, string db_statistics_name, string stat_field_name)'
  print '  tdw_sys_fields_statistics get_fields_statistics(string stat_table_name, string db_statistics_name, string stat_field_name)'
  print '   get_fields_statistics_multi(string stat_table_name, string db_statistics_name, i32 max_parts)'
  print '   get_fields_statistics_names(string stat_table_name, string db_statistics_name, i32 max_parts)'
  print '  bool add_tdw_query_info(tdw_query_info query_info)'
  print '  bool add_tdw_query_stat(tdw_query_stat query_stat)'
  print '  bool update_tdw_query_info(string qid, string finishtime, string state)'
  print '  bool update_tdw_query_stat(string qid, string finishtime, string state)'
  print '   get_tdw_query_info()'
  print '   get_tdw_query_stat()'
  print '  bool clear_tdw_query_info(i32 days)'
  print '  bool clear_tdw_query_stat(i32 days)'
  print '  tdw_query_info search_tdw_query_info(string serin)'
  print '  bool add_user_group(group newgroup, string user)'
  print '  i32 drop_user_group(string groupname, string user)'
  print '  string get_groupname(string username)'
  print '  i32 revoke_user_group(string groupname, string namelist, string user)'
  print '  i32 grant_user_group(string groupname, string namelist, string user)'
  print '   get_groups(string pattern)'
  print '  bool create_user(string byWho, string newUser, string passwd)'
  print '  bool drop_user(string byWho, string userName)'
  print '  User get_user(string byWho, string userName)'
  print '   get_users_all(string byWho)'
  print '  bool set_passwd(string byWho, string forWho, string newPasswd)'
  print '  bool is_a_user(string userName, string passwd)'
  print '  bool is_a_role(string roleName)'
  print '  bool create_role(string byWho, string roleName)'
  print '  bool drop_role(string byWho, string roleName)'
  print '  Role get_role(string byWho, string roleName)'
  print '   get_roles_all(string byWho)'
  print '  bool grant_auth_sys(string byWho, string userName,  privileges)'
  print '  bool grant_auth_role_sys(string byWho, string roleName,  privileges)'
  print '  bool grant_role_to_user(string byWho, string userName,  roleNames)'
  print '  bool grant_role_to_role(string byWho, string roleName,  roleNames)'
  print '  bool grant_auth_on_db(string byWho, string forWho,  privileges, string db)'
  print '  bool grant_auth_on_tbl(string byWho, string forWho,  privileges, string db, string tbl)'
  print '  DbPriv get_auth_on_db(string byWho, string who, string db)'
  print '   get_auth_on_dbs(string byWho, string who)'
  print '   get_db_auth(string byWho, string db)'
  print '   get_db_auth_all(string byWho)'
  print '  TblPriv get_auth_on_tbl(string byWho, string who, string db, string tbl)'
  print '   get_auth_on_tbls(string byWho, string who)'
  print '   get_tbl_auth(string byWho, string db, string tbl)'
  print '   get_tbl_auth_all(string byWho)'
  print '  bool revoke_auth_sys(string byWho, string userName,  privileges)'
  print '  bool revoke_auth_role_sys(string byWho, string roleName,  privileges)'
  print '  bool revoke_role_from_user(string byWho, string userName,  roleNames)'
  print '  bool revoke_role_from_role(string byWho, string roleName,  roleNames)'
  print '  bool revoke_auth_on_db(string byWho, string who,  privileges, string db)'
  print '  bool revoke_auth_on_tbl(string byWho, string who,  privileges, string db, string tbl)'
  print '  bool drop_auth_on_db(string byWho, string forWho, string db)'
  print '  bool drop_auth_in_db(string byWho, string forWho)'
  print '  bool drop_auth_on_tbl(string byWho, string forWho, string db, string tbl)'
  print '  bool drop_auth_in_tbl(string byWho, string forWho)'
  print '  bool create_index(IndexItem index)'
  print '  bool drop_index(string db, string table, string name)'
  print '  i32 get_index_num(string db, string table)'
  print '  i32 get_index_type(string db, string table, string name)'
  print '  string get_index_field(string db, string table, string name)'
  print '  string get_index_location(string db, string table, string name)'
  print '  bool set_index_location(string db, string table, string name, string location)'
  print '  bool set_index_status(string db, string table, string name, i32 status)'
  print '   get_all_index_table(string db, string table)'
  print '  IndexItem get_index_info(string db, string table, string name)'
  print '   get_all_index_sys()'
  print '   get_fields_jdbc(string db, string tableName)'
  print '   get_part_fields_jdbc(string db, string tableName)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ThriftHiveMetastore.Client(protocol)
transport.open()

if cmd == 'create_database':
  if len(args) != 2:
    print 'create_database requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_database(args[0],args[1],))

elif cmd == 'get_database':
  if len(args) != 1:
    print 'get_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_database(args[0],))

elif cmd == 'drop_database':
  if len(args) != 1:
    print 'drop_database requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_database(args[0],))

elif cmd == 'get_databases':
  if len(args) != 0:
    print 'get_databases requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_databases())

elif cmd == 'get_type':
  if len(args) != 1:
    print 'get_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_type(args[0],))

elif cmd == 'create_type':
  if len(args) != 1:
    print 'create_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_type(eval(args[0]),))

elif cmd == 'drop_type':
  if len(args) != 1:
    print 'drop_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_type(args[0],))

elif cmd == 'get_type_all':
  if len(args) != 1:
    print 'get_type_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_type_all(args[0],))

elif cmd == 'get_fields':
  if len(args) != 2:
    print 'get_fields requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_fields(args[0],args[1],))

elif cmd == 'get_schema':
  if len(args) != 2:
    print 'get_schema requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_schema(args[0],args[1],))

elif cmd == 'create_table':
  if len(args) != 1:
    print 'create_table requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_table(eval(args[0]),))

elif cmd == 'drop_table':
  if len(args) != 3:
    print 'drop_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_table(args[0],args[1],eval(args[2]),))

elif cmd == 'get_tables':
  if len(args) != 2:
    print 'get_tables requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_tables(args[0],args[1],))

elif cmd == 'get_table':
  if len(args) != 2:
    print 'get_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table(args[0],args[1],))

elif cmd == 'alter_table':
  if len(args) != 3:
    print 'alter_table requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_table(args[0],args[1],eval(args[2]),))

elif cmd == 'get_partition':
  if len(args) != 3:
    print 'get_partition requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_partition(args[0],args[1],eval(args[2]),))

elif cmd == 'get_partitions':
  if len(args) != 2:
    print 'get_partitions requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_partitions(args[0],args[1],))

elif cmd == 'alter_partition':
  if len(args) != 3:
    print 'alter_partition requires 3 args'
    sys.exit(1)
  pp.pprint(client.alter_partition(args[0],args[1],eval(args[2]),))

elif cmd == 'add_table_statistics':
  if len(args) != 1:
    print 'add_table_statistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_table_statistics(eval(args[0]),))

elif cmd == 'delete_table_statistics':
  if len(args) != 2:
    print 'delete_table_statistics requires 2 args'
    sys.exit(1)
  pp.pprint(client.delete_table_statistics(args[0],args[1],))

elif cmd == 'get_table_statistics':
  if len(args) != 2:
    print 'get_table_statistics requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table_statistics(args[0],args[1],))

elif cmd == 'get_table_statistics_multi':
  if len(args) != 2:
    print 'get_table_statistics_multi requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table_statistics_multi(args[0],eval(args[1]),))

elif cmd == 'get_table_statistics_names':
  if len(args) != 2:
    print 'get_table_statistics_names requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_table_statistics_names(args[0],eval(args[1]),))

elif cmd == 'add_fields_statistics':
  if len(args) != 1:
    print 'add_fields_statistics requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_fields_statistics(eval(args[0]),))

elif cmd == 'delete_fields_statistics':
  if len(args) != 3:
    print 'delete_fields_statistics requires 3 args'
    sys.exit(1)
  pp.pprint(client.delete_fields_statistics(args[0],args[1],args[2],))

elif cmd == 'get_fields_statistics':
  if len(args) != 3:
    print 'get_fields_statistics requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_fields_statistics(args[0],args[1],args[2],))

elif cmd == 'get_fields_statistics_multi':
  if len(args) != 3:
    print 'get_fields_statistics_multi requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_fields_statistics_multi(args[0],args[1],eval(args[2]),))

elif cmd == 'get_fields_statistics_names':
  if len(args) != 3:
    print 'get_fields_statistics_names requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_fields_statistics_names(args[0],args[1],eval(args[2]),))

elif cmd == 'add_tdw_query_info':
  if len(args) != 1:
    print 'add_tdw_query_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_tdw_query_info(eval(args[0]),))

elif cmd == 'add_tdw_query_stat':
  if len(args) != 1:
    print 'add_tdw_query_stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_tdw_query_stat(eval(args[0]),))

elif cmd == 'update_tdw_query_info':
  if len(args) != 3:
    print 'update_tdw_query_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.update_tdw_query_info(args[0],args[1],args[2],))

elif cmd == 'update_tdw_query_stat':
  if len(args) != 3:
    print 'update_tdw_query_stat requires 3 args'
    sys.exit(1)
  pp.pprint(client.update_tdw_query_stat(args[0],args[1],args[2],))

elif cmd == 'get_tdw_query_info':
  if len(args) != 0:
    print 'get_tdw_query_info requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_tdw_query_info())

elif cmd == 'get_tdw_query_stat':
  if len(args) != 0:
    print 'get_tdw_query_stat requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_tdw_query_stat())

elif cmd == 'clear_tdw_query_info':
  if len(args) != 1:
    print 'clear_tdw_query_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.clear_tdw_query_info(eval(args[0]),))

elif cmd == 'clear_tdw_query_stat':
  if len(args) != 1:
    print 'clear_tdw_query_stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.clear_tdw_query_stat(eval(args[0]),))

elif cmd == 'search_tdw_query_info':
  if len(args) != 1:
    print 'search_tdw_query_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.search_tdw_query_info(args[0],))

elif cmd == 'add_user_group':
  if len(args) != 2:
    print 'add_user_group requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_user_group(eval(args[0]),args[1],))

elif cmd == 'drop_user_group':
  if len(args) != 2:
    print 'drop_user_group requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_user_group(args[0],args[1],))

elif cmd == 'get_groupname':
  if len(args) != 1:
    print 'get_groupname requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_groupname(args[0],))

elif cmd == 'revoke_user_group':
  if len(args) != 3:
    print 'revoke_user_group requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_user_group(args[0],args[1],args[2],))

elif cmd == 'grant_user_group':
  if len(args) != 3:
    print 'grant_user_group requires 3 args'
    sys.exit(1)
  pp.pprint(client.grant_user_group(args[0],args[1],args[2],))

elif cmd == 'get_groups':
  if len(args) != 1:
    print 'get_groups requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_groups(args[0],))

elif cmd == 'create_user':
  if len(args) != 3:
    print 'create_user requires 3 args'
    sys.exit(1)
  pp.pprint(client.create_user(args[0],args[1],args[2],))

elif cmd == 'drop_user':
  if len(args) != 2:
    print 'drop_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_user(args[0],args[1],))

elif cmd == 'get_user':
  if len(args) != 2:
    print 'get_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_user(args[0],args[1],))

elif cmd == 'get_users_all':
  if len(args) != 1:
    print 'get_users_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_users_all(args[0],))

elif cmd == 'set_passwd':
  if len(args) != 3:
    print 'set_passwd requires 3 args'
    sys.exit(1)
  pp.pprint(client.set_passwd(args[0],args[1],args[2],))

elif cmd == 'is_a_user':
  if len(args) != 2:
    print 'is_a_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.is_a_user(args[0],args[1],))

elif cmd == 'is_a_role':
  if len(args) != 1:
    print 'is_a_role requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_a_role(args[0],))

elif cmd == 'create_role':
  if len(args) != 2:
    print 'create_role requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_role(args[0],args[1],))

elif cmd == 'drop_role':
  if len(args) != 2:
    print 'drop_role requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_role(args[0],args[1],))

elif cmd == 'get_role':
  if len(args) != 2:
    print 'get_role requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_role(args[0],args[1],))

elif cmd == 'get_roles_all':
  if len(args) != 1:
    print 'get_roles_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_roles_all(args[0],))

elif cmd == 'grant_auth_sys':
  if len(args) != 3:
    print 'grant_auth_sys requires 3 args'
    sys.exit(1)
  pp.pprint(client.grant_auth_sys(args[0],args[1],eval(args[2]),))

elif cmd == 'grant_auth_role_sys':
  if len(args) != 3:
    print 'grant_auth_role_sys requires 3 args'
    sys.exit(1)
  pp.pprint(client.grant_auth_role_sys(args[0],args[1],eval(args[2]),))

elif cmd == 'grant_role_to_user':
  if len(args) != 3:
    print 'grant_role_to_user requires 3 args'
    sys.exit(1)
  pp.pprint(client.grant_role_to_user(args[0],args[1],eval(args[2]),))

elif cmd == 'grant_role_to_role':
  if len(args) != 3:
    print 'grant_role_to_role requires 3 args'
    sys.exit(1)
  pp.pprint(client.grant_role_to_role(args[0],args[1],eval(args[2]),))

elif cmd == 'grant_auth_on_db':
  if len(args) != 4:
    print 'grant_auth_on_db requires 4 args'
    sys.exit(1)
  pp.pprint(client.grant_auth_on_db(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'grant_auth_on_tbl':
  if len(args) != 5:
    print 'grant_auth_on_tbl requires 5 args'
    sys.exit(1)
  pp.pprint(client.grant_auth_on_tbl(args[0],args[1],eval(args[2]),args[3],args[4],))

elif cmd == 'get_auth_on_db':
  if len(args) != 3:
    print 'get_auth_on_db requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_auth_on_db(args[0],args[1],args[2],))

elif cmd == 'get_auth_on_dbs':
  if len(args) != 2:
    print 'get_auth_on_dbs requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_auth_on_dbs(args[0],args[1],))

elif cmd == 'get_db_auth':
  if len(args) != 2:
    print 'get_db_auth requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_db_auth(args[0],args[1],))

elif cmd == 'get_db_auth_all':
  if len(args) != 1:
    print 'get_db_auth_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_db_auth_all(args[0],))

elif cmd == 'get_auth_on_tbl':
  if len(args) != 4:
    print 'get_auth_on_tbl requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_auth_on_tbl(args[0],args[1],args[2],args[3],))

elif cmd == 'get_auth_on_tbls':
  if len(args) != 2:
    print 'get_auth_on_tbls requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_auth_on_tbls(args[0],args[1],))

elif cmd == 'get_tbl_auth':
  if len(args) != 3:
    print 'get_tbl_auth requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_tbl_auth(args[0],args[1],args[2],))

elif cmd == 'get_tbl_auth_all':
  if len(args) != 1:
    print 'get_tbl_auth_all requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_tbl_auth_all(args[0],))

elif cmd == 'revoke_auth_sys':
  if len(args) != 3:
    print 'revoke_auth_sys requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_auth_sys(args[0],args[1],eval(args[2]),))

elif cmd == 'revoke_auth_role_sys':
  if len(args) != 3:
    print 'revoke_auth_role_sys requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_auth_role_sys(args[0],args[1],eval(args[2]),))

elif cmd == 'revoke_role_from_user':
  if len(args) != 3:
    print 'revoke_role_from_user requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_role_from_user(args[0],args[1],eval(args[2]),))

elif cmd == 'revoke_role_from_role':
  if len(args) != 3:
    print 'revoke_role_from_role requires 3 args'
    sys.exit(1)
  pp.pprint(client.revoke_role_from_role(args[0],args[1],eval(args[2]),))

elif cmd == 'revoke_auth_on_db':
  if len(args) != 4:
    print 'revoke_auth_on_db requires 4 args'
    sys.exit(1)
  pp.pprint(client.revoke_auth_on_db(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'revoke_auth_on_tbl':
  if len(args) != 5:
    print 'revoke_auth_on_tbl requires 5 args'
    sys.exit(1)
  pp.pprint(client.revoke_auth_on_tbl(args[0],args[1],eval(args[2]),args[3],args[4],))

elif cmd == 'drop_auth_on_db':
  if len(args) != 3:
    print 'drop_auth_on_db requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_auth_on_db(args[0],args[1],args[2],))

elif cmd == 'drop_auth_in_db':
  if len(args) != 2:
    print 'drop_auth_in_db requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_auth_in_db(args[0],args[1],))

elif cmd == 'drop_auth_on_tbl':
  if len(args) != 4:
    print 'drop_auth_on_tbl requires 4 args'
    sys.exit(1)
  pp.pprint(client.drop_auth_on_tbl(args[0],args[1],args[2],args[3],))

elif cmd == 'drop_auth_in_tbl':
  if len(args) != 2:
    print 'drop_auth_in_tbl requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_auth_in_tbl(args[0],args[1],))

elif cmd == 'create_index':
  if len(args) != 1:
    print 'create_index requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_index(eval(args[0]),))

elif cmd == 'drop_index':
  if len(args) != 3:
    print 'drop_index requires 3 args'
    sys.exit(1)
  pp.pprint(client.drop_index(args[0],args[1],args[2],))

elif cmd == 'get_index_num':
  if len(args) != 2:
    print 'get_index_num requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_index_num(args[0],args[1],))

elif cmd == 'get_index_type':
  if len(args) != 3:
    print 'get_index_type requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_type(args[0],args[1],args[2],))

elif cmd == 'get_index_field':
  if len(args) != 3:
    print 'get_index_field requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_field(args[0],args[1],args[2],))

elif cmd == 'get_index_location':
  if len(args) != 3:
    print 'get_index_location requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_location(args[0],args[1],args[2],))

elif cmd == 'set_index_location':
  if len(args) != 4:
    print 'set_index_location requires 4 args'
    sys.exit(1)
  pp.pprint(client.set_index_location(args[0],args[1],args[2],args[3],))

elif cmd == 'set_index_status':
  if len(args) != 4:
    print 'set_index_status requires 4 args'
    sys.exit(1)
  pp.pprint(client.set_index_status(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_all_index_table':
  if len(args) != 2:
    print 'get_all_index_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_all_index_table(args[0],args[1],))

elif cmd == 'get_index_info':
  if len(args) != 3:
    print 'get_index_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_index_info(args[0],args[1],args[2],))

elif cmd == 'get_all_index_sys':
  if len(args) != 0:
    print 'get_all_index_sys requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_all_index_sys())

elif cmd == 'get_fields_jdbc':
  if len(args) != 2:
    print 'get_fields_jdbc requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_fields_jdbc(args[0],args[1],))

elif cmd == 'get_part_fields_jdbc':
  if len(args) != 2:
    print 'get_part_fields_jdbc requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_part_fields_jdbc(args[0],args[1],))

transport.close()
