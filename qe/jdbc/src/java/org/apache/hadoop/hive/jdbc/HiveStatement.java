/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.hive.jdbc;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import org.apache.hadoop.hive.service.HiveInterface;
import org.apache.hadoop.hive.service.HiveServerException;
import org.apache.thrift.TException;

public class HiveStatement implements java.sql.Statement {
  private HiveInterface client;
  private int fetchSize = 50;

  private Socket socket;

  private String stmtID = null;
  private int sqlIndex = 0;
  private String sqlID = null;
  private String actualSQLID = null;

  private ResultSet resultSet = null;

  private int maxRows = 0;

  private SQLWarning warningChain = null;

  private boolean isClosed = false;

  public HiveStatement(HiveInterface client) {
    this.client = client;
    stmtID = String.valueOf(genStmtID());
    sqlID = genSQLID();
    sqlIndex = 0;
  }

  public void setSocket(Socket soc) {
    socket = soc;
  }

  public void addBatch(String sql) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.addBatch(String sql) not supported");
  }

  public void cancel() throws SQLException {
    throw new SQLException("Method HiveStatement.cancel() not supported");
  }

  public void clearBatch() throws SQLException {
    throw new SQLException("Method HiveStatement.clearBatch() not supported");
  }

  public void clearWarnings() throws SQLException {
    warningChain = null;
  }

  public void close() throws SQLException {
    client = null;
    resultSet = null;
    isClosed = true;
  }

  public boolean execute(String sql) throws SQLException {
    ResultSet rs = executeQuery(sql);

    return rs != null;
  }

  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.execute(String sql, int autoGeneratedKeys) not supported");
  }

  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.execute(String sql, int[] columnIndexes) not supported");
  }

  public boolean execute(String sql, String[] columnNames) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.execute(String sql, String[] columnNames) not supported");
  }

  public int[] executeBatch() throws SQLException {
    throw new SQLException("Method HiveStatement.executeBatch() not supported");
  }

  public ResultSet executeQuery(String sql) throws SQLException {
    if (isClosed) {
      throw new SQLException("Can't execute after statement has been closed");
    }

    sqlIndex++;
    try {
      resultSet = null;
      ConnectProbeThread prober = new ConnectProbeThread(socket);
      Thread downloadThread = new Thread(prober);
      downloadThread.start();
      String res = client.jdbc_execute(sql, sqlID);
      prober.stopRunning();
      downloadThread.stop();

    } catch (HiveServerException e) {
      throw new SQLException(e.getMessage(), e.getSQLState(), e.getErrorCode());
    } catch (Exception ex) {
      throw new SQLException(ex.toString(), "08S01");
    }
    resultSet = new HiveQueryResultSet(client, maxRows);
    resultSet.setFetchSize(fetchSize);
    return resultSet;
  }

  public int executeUpdate(String sql) throws SQLException {
    if (sqlID == null) {
      sqlID = genSQLID();
    }
    try {
      client.jdbc_execute(sql, sqlID);
    } catch (Exception ex) {
      throw new SQLException(ex.toString());
    }
    throw new SQLException(
        "Method HiveStatement.executeUpdate(String sql) not supported");
  }

  public int executeUpdate(String sql, int autoGeneratedKeys)
      throws SQLException {
    throw new SQLException(
        "Method HiveStatement.executeUpdate(String sql, int autoGeneratedKeys) not supported");
  }

  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.executeUpdate(String sql, int[] columnIndexes) not supported");
  }

  public int executeUpdate(String sql, String[] columnNames)
      throws SQLException {
    throw new SQLException(
        "Method HiveStatement.executeUpdate(String sql, String[] columnNames) not supported");
  }

  public Connection getConnection() throws SQLException {
    throw new SQLException("Method HiveStatement.getConnection() not supported");
  }

  public int getFetchDirection() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getFetchDirection() not supported");
  }

  public int getFetchSize() throws SQLException {
    return fetchSize;
  }

  public ResultSet getGeneratedKeys() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getGeneratedKeys() not supported");
  }

  public int getMaxFieldSize() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getMaxFieldSize() not supported");
  }

  public int getMaxRows() throws SQLException {
    return maxRows;
  }

  public boolean getMoreResults() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getMoreResults() not supported");
  }

  public boolean getMoreResults(int current) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getMoreResults(int current) not supported");
  }

  public int getQueryTimeout() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getQueryTimeout() not supported");
  }

  public ResultSet getResultSet() throws SQLException {
    return resultSet;
  }

  public int getResultSetConcurrency() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getResultSetConcurrency() not supported");
  }

  public int getResultSetHoldability() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getResultSetHoldability() not supported");
  }

  public int getResultSetType() throws SQLException {
    throw new SQLException(
        "Method HiveStatement.getResultSetType() not supported");
  }

  public int getUpdateCount() throws SQLException {
    return 0;
  }

  public SQLWarning getWarnings() throws SQLException {
    return warningChain;
  }

  public boolean isClosed() throws SQLException {
    return isClosed;
  }

  public boolean isPoolable() throws SQLException {
    throw new SQLException("Method HiveStatement.isPoolable() not supported");
  }

  public void setCursorName(String name) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setCursorName(String name) not supported");
  }

  public void setEscapeProcessing(boolean enable) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setEscapeProcessing(boolean enable) not supported");
  }

  public void setFetchDirection(int direction) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setFetchDirection(int direction) not supported");
  }

  public void setFetchSize(int rows) throws SQLException {
    fetchSize = rows;
  }

  public void setMaxFieldSize(int max) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setMaxFieldSize(int max) not supported");
  }

  public void setMaxRows(int max) throws SQLException {
    if (max < 0) {
      throw new SQLException("max must be >= 0");
    }
    maxRows = max;
  }

  public void setPoolable(boolean poolable) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setPoolable(boolean poolable) not supported");
  }

  public void setQueryTimeout(int seconds) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.setQueryTimeout(int seconds) not supported");
  }

  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.isWrapperFor(Class<?> iface) not supported");
  }

  public <T> T unwrap(Class<T> iface) throws SQLException {
    throw new SQLException(
        "Method HiveStatement.unwrap(Class<T> iface) not supported");
  }

  private int genStmtID() {
    Random rd = new Random();
    return rd.nextInt(1000000);
  }

  public String genSQLID() {
    String timerStr = new SimpleDateFormat("yyyyMMddHHmmssSSS")
        .format(new Date());
    sqlID = timerStr + stmtID;
    return sqlID;
  }

  public String getSQLID() {
    if (sqlID == null)
      sqlID = genSQLID();

    return sqlID;
  }

  public String getActualSQLID() {
    return actualSQLID;
  }

  public void setSQLID(String id) {
    sqlID = id;
  }

}
